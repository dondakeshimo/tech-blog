{"componentChunkName":"component---src-templates-post-post-js","path":"/blog/effective-modern-cpp","result":{"data":{"markdownRemark":{"html":"<h1>モチベーション</h1>\n<p>私は業務でC++を使用している。\n聞いて驚いてほしいことに最近までのC++のコンパイラはC++98までしか理解しないものだった。\n過去形ということでお気づきだと思うが、つい最近、\nと言っても数ヶ月前だがコンパイラを新しいものに変えC++11をコンパイルする準備ができた。\n私はまだC++を使い始めて1年経っておらず、C++98の範囲でさえ分かっているとは言い難い状況だが、\n嫌だからこそ、この機にモダンなC++の書き方というものを学びたく思い\n<a href=\"https://www.oreilly.co.jp/books/9784873117362/\">Effective Modern C++</a> を購入した。\nやや嘘をついた、上述の本を購入したのは実はC++を学び始めてすぐで1年ほど前である。\nC++初学者であった私にこの書籍はあまりに難しく当時は挫折した。\n1年の修行期間を経てリベンジした結果なんとか完走することができたので、\n実際に自分が使いそうなものや覚えておいた方が良さそうなことをここにまとめる。</p>\n<h1>Effective Modern C++</h1>\n<h2>目次</h2>\n<ul>\n<li>\n<p><a href=\"#sec1\">型推論にまつわる流儀</a></p>\n<ul>\n<li><a href=\"#sec11\">テンプレートとauto</a></li>\n<li><a href=\"#sec12\">decltype</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#sec2\">ポインタにまつわる流儀</a></p>\n<ul>\n<li><a href=\"#sec21\">std::unique_ptr</a></li>\n<li><a href=\"#sec22\">std::shared_ptr</a></li>\n<li><a href=\"#sec23\">std::weak_ptr</a></li>\n<li><a href=\"#sec24\">newの可能な範囲での撲滅</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#sec4\">moveにまつわる流儀</a></p>\n<ul>\n<li><a href=\"#sec41\">std::move, std::forward</a></li>\n<li><a href=\"#sec42\">ユニヴァーサル参照, 右辺値参照</a></li>\n<li><a href=\"#sec43\">右辺値参照ならstd::move, ユニヴァーサル参照ならstd::forward</a></li>\n<li><a href=\"#sec44\">ユニヴァーサル参照をとるオーバーロードの撲滅</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#sec3\">モダンC++の流儀</a></p>\n<ul>\n<li><a href=\"#sec31\">初期化子の統一</a></li>\n<li><a href=\"#sec32\">nullptr</a></li>\n<li><a href=\"#sec33\">エイリアス宣言</a></li>\n<li><a href=\"#sec34\">scoped enum</a></li>\n<li><a href=\"#sec35\">未定義private関数の撲滅</a></li>\n<li><a href=\"#sec36\">overrideの宣言</a></li>\n<li><a href=\"#sec37\">const_iterator</a></li>\n<li><a href=\"#sec38\">noexcept, constexpr</a></li>\n<li><a href=\"#sec39\">要素の挿入, 直接配置</a></li>\n</ul>\n</li>\n</ul>\n<p><a id=\"sec1\"></a></p>\n<h2>型推論にまつわる流儀</h2>\n<p><a id=\"sec11\"></a></p>\n<h4>テンプレートとauto</h4>\n<p>型推論を行う代表的な場面がテンプレートを使用した場合とautoを宣言した場合となる。\nテンプレートとautoの型推論は基本的に同じものであるため、\nまずはテンプレートを例にとってどの様な型推論が行われるか理解する。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>ParamType param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span>expr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>この場合 <em>T</em> の推論には呼び出しの型だけではなく <em>ParamType</em> の型にも左右される。\n具体的には以下の様に場合分けできる</p>\n<ul>\n<li><em>ParamType</em> が参照もしくはポインタだがユニヴァーサル参照ではない</li>\n<li><em>ParamType</em> がユニヴァーサル参照である</li>\n<li><em>ParamType</em> がポインタでも参照でもない</li>\n</ul>\n<h5><em>ParamType</em>が参照もしくはポインタだがユニヴァーサル参照ではない</h5>\n<ol>\n<li><em>expr</em> が参照型ならば、参照性を無視する</li>\n<li><em>expr</em> の型を <em>ParamType</em> とパターンマッチングし、 <strong>T</strong> を決定する</li>\n</ol>\n<h5><em>ParamType</em> がユニヴァーサル参照である</h5>\n<ul>\n<li><em>expr</em> が左辺値ならば、 <strong>T</strong> も <em>ParamType</em> も左辺値参照と推論される</li>\n<li><em>expr</em> が右辺値ならば、先述の規則が適用される</li>\n</ul>\n<h5><em>ParamType</em> がポインタでも参照でもない</h5>\n<ol>\n<li><em>expr</em> の型が参照ならば、参照性を無視する</li>\n<li>参照性を無視した <em>expr</em> の型が <strong>const</strong> , <strong>volatile</strong> であればこれを無視する</li>\n</ol>\n<h5>ポインタへの成り下がり</h5>\n<p>配列または関数実引数はテンプレートの型推論時にポインタに成り下がる</p>\n<h5>autoとテンプレート推論の差異</h5>\n<p>autoとテンプレートの型推論はほとんど同一のアルゴリズムで解決される。\nただ一つの違いはautoが波括弧で囲んだ初期化子をstd::initilizer_listと <em>想定する</em> のに対し、\nテンプレートの型推論は想定しないと言う点だ。</p>\n<h5>明示的型宣言よりもautoを優先する</h5>\n<ul>\n<li>autoで宣言した変数は初期化する必要があり未定義動作を防げる</li>\n<li>一般に可搬性や効率に関する問題を引き起こす型の不一致を防げる</li>\n<li>型の暗黙的変換が行われないため意図的に変更させる必要があり可読性が上がる(明示的片付け初期化子の使用)</li>\n<li>リファクタリングを容易にする</li>\n<li>タイプ量が減る</li>\n<li>プロクシ型はautoに誤った型を推論させるので注意する</li>\n</ul>\n<p><a id=\"sec12\"></a></p>\n<h4>decltype</h4>\n<p>decltype は変数を与えるとその型を返す関数である。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// decltype(v) is vector&lt;int></span></code></pre></div>\n<p>使用用途として戻り型が仮引数の型により決定される関数テンプレートの宣言が挙げられる。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// c++11 version</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> Container<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> Index<span class=\"token operator\">></span>\n<span class=\"token keyword\">auto</span> <span class=\"token function\">sampleContainerAccesser</span><span class=\"token punctuation\">(</span>Container<span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">,</span> Index i<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// c++14 version</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> Container<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> Index<span class=\"token operator\">></span>\n<span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token punctuation\">)</span> <span class=\"token function\">sampleContainerAccesser</span><span class=\"token punctuation\">(</span>Container<span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">,</span> Index i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上記の記法は <strong>戻り型の後置</strong> (trailing return type) と呼ばれているものである。\n上記の例は改良の余地があり、一つは右辺値を受け付ける必要があること、\nもう一つは返り値を必要なら右辺値にする方が効率が良いことだ。それらを反映させると</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// c++11 version</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> Container<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> Index<span class=\"token operator\">></span>\n<span class=\"token keyword\">auto</span> <span class=\"token function\">sampleContainerAccesser</span><span class=\"token punctuation\">(</span>Container<span class=\"token operator\">&amp;&amp;</span> c<span class=\"token punctuation\">,</span> Index i<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>forward<span class=\"token operator\">&lt;</span>Container<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>forward<span class=\"token operator\">&lt;</span>Container<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// c++14 version</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> Container<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> Index<span class=\"token operator\">></span>\n<span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token punctuation\">)</span> <span class=\"token function\">sampleContainerAccesser</span><span class=\"token punctuation\">(</span>Container<span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">,</span> Index i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>forward<span class=\"token operator\">&lt;</span>Container<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>std::forwardについては後続の説明に記載予定。</p>\n<h5>decltypeの注意点</h5>\n<p>変数を括弧で囲むと参照が付与されてしまうので注意。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// -> int</span>\n<span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// -> int&amp;</span></code></pre></div>\n<p><a id=\"sec2\"></a></p>\n<h2>ポインタにまつわる流儀</h2>\n<p><a id=\"sec21\"></a></p>\n<h4>std::unique_ptr</h4>\n<p>独立するリソースの管理には std::unique_ptr を使用する。\nstd::unique_ptrはムーブ専用型であり、独占所有セマンティクスを所有する。</p>\n<p>std::unique_ptrのインターフェースは二つあり、カスタムデリータを引数にとるものと取らないものがある。\nカスタムデリータにはラムダ式を使用した方が時間、空間計算量が優れる。\nカスタムデリータを用いる際の注意点としてstd::unique_ptr 自体のメモリ使用量が増加することが挙げられる。</p>\n<p>std::unique_ptrの大きな魅力は独占所有権を有しながら、std::shared_ptrへの変換が簡単なことだ。\nこれはfactory関数の戻り型としてstd::unique_ptrが非常に優れている理由となる。\n関数側からはポインタが共有されるべきか独占されるべきか判断できないため、\n呼び出し側で好きに置き換えが可能なことで柔軟性を保持している。</p>\n<p><a id=\"sec22\"></a></p>\n<h4>std::shared_ptr</h4>\n<p>共同所有権を必要とするリソースの管理にはstd::shared_ptrを利用する。\nstd::shared_ptrはreference countから地震がそのリソースを指す最後のポインタか否かを判断できる。\n即ちstd::shared_ptrのコンストラクタはreference countをインクリメントし、\nデストラクタはデクリメントする。</p>\n<p>reference countを保持することでrawポインタと比較して性能面に負債を背負うこととなる。</p>\n<ul>\n<li>std::shared_ptrのサイズがrawポインタの2倍になる</li>\n<li>\n<p>reference countをダイナミックにメモリ割り当てする必要がある</p>\n<ul>\n<li>std::make_sharedの利用により回避できる</li>\n</ul>\n</li>\n<li>\n<p>reference countのincrement/decrementはアトミックに実行する必要がある</p>\n<ul>\n<li>move演算をすることによってreference countを操作しなくて済む</li>\n</ul>\n</li>\n</ul>\n<p>std::shared_ptrもstd::unique_ptrと同様にカスタムデリータを指定できる。\nこれら二つのカスタムデリータを指定したスマートポインタは型にデリータを含むかどうかで差異が存在する。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// deleter type is part of ptr type</span>\nstd<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>Widget<span class=\"token punctuation\">,</span> <span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>loggingDel<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token function\">upw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Widget<span class=\"token punctuation\">,</span> loggingDel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// deleter type is not part of ptr type</span>\nstd<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>Widget<span class=\"token operator\">></span> <span class=\"token function\">spw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Widget<span class=\"token punctuation\">,</span> loggingDel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>これらはポインタの取り回しの柔軟性にも差異を与える。\n例えばコンテナ型に上記のポインタを代入することを考えると、\nstd::unique_ptrは全て同一のカスタムデリータを指定しない限りコンテナにまとめることができないが、\nstd::shared_ptrは自由にカスタムデリータを指定できる。</p>\n<p>std::shared_ptrはreference countを含むコントロールブロックと呼ばれるデータを所有している。\nコントロールブロック内にカスタムデリータのデータも含まれるため、\nstd::shared_ptrはstd::unique_ptrと違いカスタムデリータを指定してもサイズが大きくならない。</p>\n<p>コントロールブロックは対象オブジェクトを指すstd::shard_ptrを最初に作成した関数が設定する。\nただし、一般にstd::shared_ptrが既に存在しているかを知る方法はないため、下記のルールを適用する。</p>\n<ul>\n<li>std::make_sharedは常にコントロールブロックを作成する</li>\n<li>所有権が一意なポインタからstd::shared_ptrを作成した場合は常にコントロールブロックを作成する</li>\n<li>rawポインタを与えstd::shared_ptrコンストラクタを呼び出した場合はコントロールブロックを作成する</li>\n</ul>\n<p>上記のルールからrawポインタをコンストラクタに複数か渡すことで\nバグの温床と非効率なコードが生成されることとなる。\n上述の理由からクラス設計において自身のポインタ <strong>this</strong> を使用したいシーンがあるが、\nその際にstd::shared_ptrのコンストラクタへthisを渡していないか注意する必要がある。\n自身のポインタをstd::shared_ptrとして扱う必要がある場合は基底クラステンプレートとして\nstd::enbale_shared_from_thisクラスを利用し、thisの代わりにshard_from_this()を使用する。</p>\n<p><a id=\"sec23\"></a></p>\n<h4>std::weak_ptr</h4>\n<p>std::shared_ptrのように振る舞いながらも、対象リソースの所有権を共有しない\nスマートポインタが有用になる場面がある。\nこの種のスマートポインタは対象が破棄された場合を考え、ポインタが不正(dangle)になったことを追跡管理し、\n問題に対応すル必要がある。\nこれらを賄うC++のスマートポインタがstd::weak_ptrとなる。</p>\n<p>std::weak_ptrは必ずstd::shared_ptrに付随して使用される。\nstd::weak_ptrのコンストラクタにstd::shared_ptrを作成した時点から両者は同じメモリ上の位置を指し示す。\nただし、std::weak_ptrは対象オブジェクトのreference countには影響を及ぼさない。</p>\n<p>不正ポインタとなったstd::weak_ptrを <strong>expireされた</strong> と表現する。\nスマートポインタが不正かどうかを判定するには <code class=\"language-text\">wpw.expired()</code> を呼び出せば良いが、\n一般に不正判定する目的は対象オブジェクトに無事アクセスできるかを確認することであり、\n不正判定からアクセスまでの一連の処理がアトミックに行われる必要がある。\nこれを実現するためにはstd::weak_ptrをstd::shared_ptrに変換してやれば良い。\n<code class=\"language-text\">wpw.lock()</code> を用いて初期化する方法とstd::shared_ptrのコンストラクタに直接渡す方法がある。</p>\n<p>std::weak_ptrは不正になる可能性のあるstd::shared_ptrライクなポインタで使用し、\n具体的な利用先としては下記のようなパターンが挙げられる。</p>\n<ul>\n<li>キャッシュ</li>\n<li>observer リスト</li>\n<li>std::shared_ptrの循環防止</li>\n</ul>\n<p><a id=\"sec24\"></a></p>\n<h4>newの可能な範囲での撲滅</h4>\n<p>newを回避するためにstd::make_uniqueとstd::make_sharedを積極的に使用する。\nただし、std::make_uniqueについてはC++14以降に追加された関数のため、以下に実装例を記す。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Ts<span class=\"token operator\">></span>\nstd<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token function\">make_unique</span><span class=\"token punctuation\">(</span>Ts<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">T</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>forward<span class=\"token operator\">&lt;</span>Ts<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>std namespaceに上記関数を置いた場合、C++14にアップグレードした際に衝突するため注意。</p>\n<p>newの直接使用と比較してmake関数はソースコードの重複を避け、例外安全性を向上できる。\nまた、std::make_sharedおよびstd::allocate_sharedでは高速化つサイズの小さなコードを生成できる。</p>\n<p>make関数を使用できないシーンにはカスタムデリータを指定する場合と波括弧による初期化を目的とする場合の\n二つがある。</p>\n<p>std::shared_ptrの場合ではmake関数が適切でない場面が増え、専用のメモリ管理を実装したクラスや、\nメモリに特別な注意が必要なシステム、巨大オブジェクト、\n対応するstd::shared_ptrとは異なるライフタイムを持つstd::weak_ptrなどが挙げられる。</p>\n<p><a id=\"sec4\"></a></p>\n<h2>moveにまつわる流儀</h2>\n<p><a id=\"sec41\"></a></p>\n<h4>std::move, std::forward</h4>\n<p>std::moveおよびstd::forwardはキャストを実行する関数にすぎず、関数内でムーブ演算は実行されない。</p>\n<p>std::moveは右辺値への無条件キャストを実行する。</p>\n<p>std::forwardは実引数が右辺値にバインドされている場合に限り、その実引数を右辺値へキャストする。</p>\n<p>std::moveもstd::forwardもプログラム実行時には何も実行しない。</p>\n<p><a id=\"sec42\"></a></p>\n<h4>ユニヴァーサル参照, 右辺値参照</h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>Widget<span class=\"token operator\">&amp;&amp;</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// rvalue reference</span>\n\nWidget<span class=\"token operator\">&amp;&amp;</span> var1 <span class=\"token operator\">=</span> <span class=\"token function\">Widget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// rvalue reference</span>\n\n<span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;&amp;</span> var2 <span class=\"token operator\">=</span> var1<span class=\"token punctuation\">;</span>              <span class=\"token comment\">// universal reference</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;&amp;</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// rvalue reference</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;&amp;</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// universal reference</span></code></pre></div>\n<p>上記のコードから察せられるように「T&#x26;&#x26;」には二つの意味がある。\n一つは右辺値参照であり、もう一つは右辺値参照か左辺値参照のどちらか一方を表すことである。\n後者は型推論を伴うTに対し右辺値参照の記法を用いた際に発動する構文であり、\n参照の初期化を行う際の初期化子が右辺値なら右辺値参照を、\n左辺値なら左辺値参照をを表す。</p>\n<p><a id=\"sec43\"></a></p>\n<h4>右辺値参照ならstd::move, ユニヴァーサル参照ならstd::forward</h4>\n<p>std::moveは右辺値参照に対し、std::forwardは最後に使用するユニヴァーサル参照に対し、\nそれぞれ実行するべきである。\nこれは値戻しする関数から返す右辺値参照、ユニヴァーサル参照についても同様のことが言える。</p>\n<p>ただし、 <strong>戻り値の最適化(return value optimization, RVO)</strong> が適用される関数ではその限りではない。\nRVOとは値戻しの関数において下記条件を満たした際にコピーを省略する仕様のことである。</p>\n<ul>\n<li>ローカルオブジェクトの型が関数の戻り値の型に一致している</li>\n<li>戻り値となるのがそのローカルオブジェクトである</li>\n</ul>\n<p>この場合、std::move等を返り値に適用してしまうとRVOが発動せず結果的に効率の悪いコードになってしまう。</p>\n<p><a id=\"sec44\"></a></p>\n<h4>ユニヴァーサル参照をとるオーバーロードの撲滅</h4>\n<p>ユニヴァーサル参照をとるオーバーロードを加えると、予想以上に多くの場面で、\nほぼ常にユニヴァーサル参照をとるオーバーロードが呼び出される。\n完全転送コンストラクタは特に問題になる。非constな左辺値をとるコピーコンストラクタよりも\n一致度が高くなるのが通例であり、派生クラスからの基底クラスの\nコピー/ムーブコンストラクタ呼び出しをのっとってしまうためである。</p>\n<p>ユニヴァーサル参照をとるオーバーロードの代替策としては</p>\n<ul>\n<li>オーバーロードしない</li>\n<li>const T&#x26;を渡す</li>\n<li>値を渡す</li>\n<li>タグディスパッチを用いる</li>\n</ul>\n<p>がある。</p>\n<p><a id=\"sec45\"></a></p>\n<h4>参照の圧縮</h4>\n<p>参照の圧縮とは型推論などの過程で参照の参照をコンパイラが生成した際に、\n単一の参照に変換する動作のことである。\n<em>二つある参照のいずれかが左辺値参照であれば、圧縮結果は左辺値参照となる。二つとも右辺値参照の場合は、圧縮結果は右辺値参照となる。</em></p>\n<p>参照の圧縮が発生する場面は4つある。</p>\n<ul>\n<li>テンプレートのインスタンス化</li>\n<li>autoの型生成</li>\n<li>typedefとエイリアス宣言の使用と作成</li>\n<li>decltype</li>\n</ul>\n<p><a id=\"sec45\"></a></p>\n<h4>完全転送</h4>\n<p>完全転送とはある関数が仮引数を他の関数へ渡す挙動であり、単なる転送と異なり、\n仮引数のオブジェクトの性質(オブジェクトの型、左辺値か右辺値かなど)も転送する。\n使用例としては下記のようになる。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Ts<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fwd</span><span class=\"token punctuation\">(</span>Ts<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>forward<span class=\"token operator\">&lt;</span>Ts<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>完全転送はほとんどの場合意図通りに動作するが、まれに完全でない部分が露見する。\n条例の目的関数fと転送関数fwdでは、同じ実引数に対する両者の動作が異なると完全転送できない。</p>\n<p>完全転送できない場合は二つで、fwdの仮引数の方を推論できない、\nまたは誤った方を推論した場合、完全転送がエラーになる。</p>\n<p>完全転送のエラー原因となる実引数には、</p>\n<ul>\n<li>波括弧による初期化子</li>\n<li>ヌルポインタとして用いた0やNULL</li>\n<li>宣言のみのconst staticな汎整数メンバ変数</li>\n<li>テンプレート名</li>\n<li>オーバーロード関数名</li>\n<li>ビットフィールド</li>\n</ul>\n<p>などがある。</p>\n<p><a id=\"sec3\"></a></p>\n<h2>モダンC++の流儀</h2>\n<p><a id=\"sec31\"></a></p>\n<h4>初期化子の統一</h4>\n<p>初期化の方法は大きく以下の三つの記法に分類される。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> z<span class=\"token punctuation\">{</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>多くの場合、等号と波括弧は併用できるが、波括弧のみの時と同じのため等号はこの項では無視する。</p>\n<p>C++11になり、初期化子の統一記法を導入したことで\n波括弧による初期化が概ねどのような場面でも適用できるようになった。\nそのため、これまで等号と丸括弧を場面場面で使い分けていたコピー不可能なオブジェクトの初期化や、\n非スタティックなメンバ変数のdefault値の指定に加えて、等号と丸括弧では表現できなかった\nコンテナの初期要素の指定も全て波括弧を用いて行えるようになった。</p>\n<p>波括弧を用いることのもう一つのメリットとして <strong>精度が落ちる変換(narrowing conversion)</strong> を認めない\nという特徴がある。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">{</span> x <span class=\"token operator\">+</span> y <span class=\"token operator\">+</span> z <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error!</span></code></pre></div>\n<p>これは <strong>最も厄介な構文解析(most vexing parse)</strong> と呼ばれる問題を回避できる。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">Widget <span class=\"token function\">w1</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// call Widget ctor with argument 10</span>\nWidget <span class=\"token function\">w2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// declares a function named w2 that returns a Widget</span></code></pre></div>\n<p>波括弧の初期化子のデメリットはstd::initializer_listをとみなせる仮引数が渡された際に、\n見た目ではより高く一致するコンストラクタが他にあってもstd::initializer_listをとるコンストラクタに\n解決されてしまうことである。\nこれは混乱を生む場合がある。</p>\n<p>丸括弧と波括弧の選択が生む差異の例としては下記のようなものもある。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// [5, 5, 5]</span>\n\nstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v2<span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// [3, 5]</span></code></pre></div>\n<p>結局波括弧ではないと初期化できないものがある一方、丸括弧を用いないと混乱を招く初期化もあり、\nどちらの方を使うべきということはない。\n開発ルールを定めることが肝要である。</p>\n<p>ただし、他社が利用する可能性のあるライブラリの\nテンプレート関数内でのオブジェクト作成に際しては関数の挙動自体が左右されてしまうので\n単なる開発ルールにとどまらずよく吟味する必要がある。</p>\n<p><a id=\"sec32\"></a></p>\n<h4>nullptr</h4>\n<p><strong>0とNULLは常にint型である</strong>。<br>\n0やNULLをヌルポインタとして利用するしかなかったが、nullptrが実装されたためその必要性は無くなった。<br>\n<strong>nullptrはポインタ型である。</strong><br>\nそのためオーバーロードで妙な解決をされることもない。\n常にnullptrを使用すべきである。</p>\n<p>ただし、これまでと違いnullptrがあるからと言って汎整数型とポインタ型のオーバーロードを行うと\nこれまで動作していた呼び出し側で意図しないオーバーロード解決されてしまうことになりかねないので注意する。</p>\n<p><a id=\"sec33\"></a></p>\n<h4>エイリアス宣言</h4>\n<p>長ったらしい型宣言を簡略化する際のtypedefの上位互換としてエイリアス宣言が実装された。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">typedef</span> std<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>unordered_map<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">>></span> UPtrMapSS<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> UPtrMapSS <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>unordered_map<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">>></span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>FP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> FP <span class=\"token operator\">=</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>typedefはテンプレート化に対応していないが、エイリアス宣言は対応しているため、気持ちの悪いネストをする必要がなくなった。</p>\n<p>また、エイリアステンプレートを用いれば、「::type」や「typename」を排除できる。</p>\n<p><a id=\"sec34\"></a></p>\n<h4>scoped enum</h4>\n<p>C++98まではenum型はスコープを持たなかった。\nC++11ではこれが是正され、スコープを持つenum型が導入された。\nscoped enumの宣言は <code class=\"language-text\">enum class</code> と表記する。</p>\n<p>単にスコープを持ち名前空間を汚さないようになっただけでなく、\n列挙子が暗黙に他の型に変換されることもなくなった。\nこれまでのように列挙子を数値等と比較したい場合はキャストを利用する。</p>\n<p>enumでは基礎とする方の指定が可能である。\nスコープを持つenumの基礎とする型のdefaultはintである。\nスコープを持たないenumはdefaultが存在しない。\nenumの前方宣言は基礎とする型が存在する場合可能である。</p>\n<p><a id=\"sec35\"></a></p>\n<h4>未定義private関数の撲滅</h4>\n<p>未定義の関数を呼び出し側に使用されたくない際、C++98ではprivateな関数とすることで秘匿にしていた。\nC++11以降ではprivateとして間接的に使用を禁止するのではなく <strong>deleteされた関数 (deleted function)</strong>\nとすることで上記の要件を満たすことができる。\n加えて、deleteを利用した場合はコンパイル時に不正なアクセスを検知できる。\nprivate宣言のものをfriend関数内から利用しようとした際などはリンク時まで不正なアクセスを発見できない。</p>\n<p>また、非メンバ関数、テンプレートのインスタンス化も含め、どんな関数でもdeleteできる。</p>\n<p>以上より、使用を禁止したい関数に対してはdeleteを使用する。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">bool</span> <span class=\"token function\">isLucky</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a id=\"sec36\"></a></p>\n<h4>overrideの宣言</h4>\n<p>オーバーライドを実装したい場合、オーバーライドを満たす様にクラスおよびメンバ関数を実装すれば\n自動的にメンバ関数がオーバーライドされる。\nしかしこの仕様には問題点もあり、\n大きなものの一つがオーバーライドしたつもりができていない場合があることだ。\nしかもその誤りをコンパイラは教えてくれない。</p>\n<p>上述の問題点を回避するためにC++11以降ではオーバーライドしたい関数には明示的に <code class=\"language-text\">override</code> 宣言を用いる。</p>\n<p>override宣言にはコンパイラ、実装者へのオーバーライドの明示化以外に、\nメンバ関数の参照修飾子を用いると左辺値オブジェクトと右辺値オブジェクトを\n区別することができるというメリットもある。</p>\n<p><a id=\"sec37\"></a></p>\n<h4>const_iterator</h4>\n<p>一般に可能な場面ではtuneniconstを使用せよと言われており、iteratorでもそれは例外ではない。\nconst_iteratorとはSTLが用意したconstをさすポインタ相当のiteratorであり\n可能な場面ではこれを使用すべきである。</p>\n<p>C++98でもC++11でも上記のルールは適用されるが、C++98でのconst_iteratorは扱いが煩雑だ。\nC++11ではこれが大幅に改良されており現実的に上述のルールに従うことが可能になった。</p>\n<p>よって常にiteratorよりもconst_iteratorを優先して使用する。</p>\n<p><a id=\"sec38\"></a></p>\n<h4>noexcept, constexpr</h4>\n<h5>noexcept</h5>\n<p>C++11では、関数が例外を発生させないことをnoexceptにより明示できる。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>C++11からプログラムの仕様が変更され、<code class=\"language-text\">noexcept</code> を指定することでコンパイラが最適化する機会が生まれる。</p>\n<h5>constexpr</h5>\n<p>ある変数がコンパイル時定数を必要とする場面で使用可能なことをコンパイラに保証してもらうために\nconstexprが存在する。</p>\n<p>可能な場面では常にconstexprを使用することで実行時ではなくコンパイル時に可能な範囲の演算が行われ、\n処理が軽やかになる。</p>\n<p>注意点はconstexprの宣言を解除すると呼び出し側で大量のエラーが発生する可能性があることだ。\nconstexprを宣言した後は以降constexpr宣言を削除しないと断ぜられる様にすることに留意する。</p>\n<p><a id=\"sec39\"></a></p>\n<h4>要素の挿入, 直接配置</h4>\n<p>std::vectorに要素を追加する時、一般的に使用される関数はpush_backである。\nしかし、emplace_backを使用した方が効率良い場面がある。</p>\n<p>原則として挿入関数と比べ、同等機能の直接配置関数が効率性に優れることはあるが劣ることはない。\nただし、挿入関数なら拒否する様な型変換でも直接配置関数は実行する場合がある。</p>\n<p>直接配置関数が実際に高速に実行されるのは下記の場合である。</p>\n<ul>\n<li>追加する値がコンテナ内に代入ではなくコンストラクトされる</li>\n<li>実引数の型がコンテナ要素の型とは異なる</li>\n<li>コンテナが重複すを理由に値の追加を拒否しない</li>\n</ul>","timeToRead":21,"frontmatter":{"title":"modern C++erの流儀","date":"23 Nov 2020","tags":["cpp"],"path":"blog/effective-modern-cpp","excerpt":"C++11以降大きく変わったC++をどの様に扱うべきかを記したEffective Modern C++を読んだのでまとめる","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='225'%20viewBox='0%200%20400%20225'%20preserveAspectRatio='none'%3e%3cpath%20d='M299%2015c-6%202-82%2045-83%2047-2%202-2%206-2%2051%200%2044%200%2048%202%2050a722%20722%200%200087%2047%20732%20732%200%200087-48c2-2%202-96-1-100l-81-46c-4-2-6-2-9-1M99%2021c-3%201-85%2082-87%2086v12l86%2085h12l44-43c44-44%2043-44%2042-52-1-3-83-86-88-88h-9M58%2065c-41%2042-45%2045-44%2049a917%20917%200%200090%2088c2%200%208-6%2045-42l43-45c2-4-2-8-43-50-41-40-42-41-46-41-3%200-4%201-45%2041m229-16a66%2066%200%2000-40%2099%2066%2066%200%2000112-3l-14-8-14-8-5%205a32%2032%200%2001-53-35c10-21%2037-25%2053-9%203%204%205%205%206%205l27-16a67%2067%200%2000-72-30M49%2090c-5%202-4%2010%202%2013%205%202%206%205%203%206-2%200-2-1-3-2%200-3-6-3-6%200%200%206%2011%209%2015%204%202-2%203-7%201-10l-5-3-5-3c1-2%204-1%205%201s6%201%205-1c-1-5-7-7-12-5m18%2011l-4%2012h4c2%200%203-1%203-2l4-2c2%200%203%201%203%202%201%202%207%203%207%202l-3-11-4-11-3-1h-4l-3%2011m19%201v11h3c3%200%203%200%203-4%200-5%200-5%203-5%204%200%205%200%204-3%200-1-1-2-4-2-2%200-3%200-3-2s1-2%205-2%204%200%204-2c0-3%200-3-7-3h-8v12m18%200v11h8c8%200%208%200%208-2%200-3%200-3-5-3s-5%200-5-2c0-3%200-3%205-3%204%200%204%200%204-2%200-3%200-3-4-3l-5-1c0-2%201-2%205-2%205%200%205%200%205-2%200-3%200-3-8-3h-8v12m18-9c0%203%200%203%203%203h3v17h6V96h3c3%200%203%200%203-3v-3h-18v3m19-2l4%206%203%2011c0%205%200%205%203%205s3%200%203-5c0-3%201-6%204-11l3-7h-3c-3%200-4%201-5%204l-2%204-2-4c-1-3-2-4-5-4l-3%201m194%2012v4h-9v10h9v10h10v-10h9v-10h-9v-9h-10v5m33-1v5h-5l-4%201-1%204v5h5l5%201v9h10v-10h9v-9l-5-1c-4%200-4%200-4-4v-4l-5-1h-5v4M61%20134v12h3c3%200%203%200%203-5v-5h4c4%200%204%200%204-2s-1-3-4-3c-6%200-5-3%201-4%204%200%204%200%204-3%200-2%200-2-7-2h-8v12m18%200v12h6v-24h-6v12m10%200v12h3c3%200%203%200%203-5%200-6%201-6%204%201%202%203%203%204%205%204%203%200%203%200%203-3l-3-5c-2-2-2-3%200-4l2-5c0-5-3-7-11-7h-6v12m22-10c-4%204-2%209%205%2012l4%203c-1%202-4%202-5%201l-4-2c-3%200-3%200-2%203%201%204%204%205%208%205a8%208%200%20002-15c-3-1-5-3-3-4h2c2%202%207%203%207%201%200-3-4-6-8-6l-6%202m16%201c0%203%200%203%203%203h3v18h6v-18h3c3%200%203%200%203-3v-3h-18v3'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.7730496453900708,"src":"/tech-blog/static/a47fecddf11a575541f81b715c017ed1/3c17d/preview.png","srcSet":"/tech-blog/static/a47fecddf11a575541f81b715c017ed1/e1953/preview.png 250w,\n/tech-blog/static/a47fecddf11a575541f81b715c017ed1/46604/preview.png 500w,\n/tech-blog/static/a47fecddf11a575541f81b715c017ed1/3c17d/preview.png 720w","sizes":"(max-width: 720px) 100vw, 720px"}}}}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"path":"blog/design-pattern","title":"デザインパターンについてまとめる","tags":["book"],"excerpt":"JAVA言語で学ぶデザインパターン入門を読んだのでざっくりまとめる","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='225'%20viewBox='0%200%20400%20225'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20113v112h401V0H0v113m112%200v111h176V1H112v112m56-99c-2%201-2%203-2%205%200%206%200%206%2031%206%2026%200%2028%200%2029-2%203-2%202-6%200-8-2-3-55-3-58-1m-5%2015l1%201%201%205c0%205%200%205-1%204h-2c0%202%203%203%205%201h1l5%201c3%200%203%200%202-4v-3l2%203c2%205%203%205%204%201l2-3%202-1h2l-2%202c-4%202-3%205%202%205%203%200%203-1%203-4s-1-5-6-5c-2%200-3%201-4%203v3l-1-3c-1-3-7-4-10-2-1%201-1%201-1-2%201-3%201-3-2-3l-3%201m30%203c-2%201-3%201-2%202v7h8v-7c2%200%202%201%201%204v3h4c5%200%206-1%205-3l2-2c2-1%202-1%202%201l2%203c3%202%204%200%201-2-2-2-2-3%202-5%202-1%203%200%201%202-1%201-1%201%202%201%202%200%202%200%200%201s-2%201%200%201c1%200%202%200%201%202l1%201%202-1%202-2%201%201%203%201%204-1c3%200%202-2-1-3l-1-1v-2c-1-2-2-1-2%202s-2%204-3%201c0-5-7-6-15-3-4%202-4%202-4%200%201-1%201-2-3-1h-13m-32%2012l-1%201h-3c-2%200-2%200-2%202v2h-1l-2-2c-1%200-2%200-1%202%200%201-2%202-5%201l-8%201c-6%200-7%200-6%202h4c3%200%203%203%200%206l-1%203c2%200%206-5%206-7%200-3%200-3%205-3%203%200%205%201%205%202%201%203%202%203%203%200l1-2c1-1%201%200%201%202l-3%205-2%203c1%201%207-5%207-8%201-2%202-3%203-2l2-1-3-2c-1%200-2-1-1-2h3c2-2%202-3%201-3h-2m81%202l-1%201c4%200%201%209-3%2012l-1%201%205-3%203-2%202%202%204%203h2c1%202%202%200%202-4%200-3%200-4%202-4%201%200%202%200%202-2%201-2%201-2%201%200l2%202c2%200%202%201%202%203s0%203-2%203l1%201c3%203%204%201%204-7v-6l-8-1h-7v6l-1%206c-2%200-5-5-5-8-1-4-2-4-4-3m-38%202l-2%204c-2%203-2%204%201%202h2c1%202%201%202-2%204l-4%203%207-2h3c2%200%202%200%202-3v-2l10%201c10-1%2010-2-1-3-6%200-8%200-8-2l-3-1-1-1c-1-2-4-3-4%200m1%2031c0%202%200%202-2%202-1-1-2%200-3%201l-3%201c-1-1-2%200-2%201%200%202-4%205-6%204l-4%201c-4%202-12%202-12%201h-3c0-2-2-1-1%201h-1c-2-1-2-1-4%201l-4%201%201%201%202%201h-5c-2%200-1%202%201%202%202%201%202%201-1%201l-3%201-2%201c-2%200-5%202-5%204l-1%203-1%204v1l-1%202%201%202%201%201%201%201c1%201%201%201-1%203l-2%201%202%202c2%201%202%202%201%203-1%200-1%201%201%201%201%201%201%201-1%201s-2%200-1%201l1%202v1c2%201%201%203%200%202-2%200-2%200-1%202%200%203%202%205%204%205l1%202c1%201%201%202%202%201l1%201v1c2%200%208%206%208%207l9%205%203%202c-1%201-1%201%201%201h1l-1%202%202-1h2c2%201%202%202%201%202h1l4%201h1c-1-2-1-2%203-1v1a417%20417%200%200114%202c6%201%2025-4%2024-5l8-4%201-1v-1l2-1h2c-1-1%200-3%202-4%203-3%203-4%203-6l2-2v-1l1-5%201-5%201-2%201-4c-1-4-1-5%201-6%201%200%202-1%201-2l-5-11v-4l1-1-2-1-2-2c0-3-12-15-16-15l-8-4c-4-2-6-2-9-2h-3l1-1h-4c-2-2-3-1-2%201m-13%20135v5h5l6%201%201-1-2-2-2-1h2c2%200%202-1%202-3v-4h-12v5'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.7857142857142858,"src":"/tech-blog/static/95b19a329ead842b67c46c87fc3b7cea/2a4de/preview.png","srcSet":"/tech-blog/static/95b19a329ead842b67c46c87fc3b7cea/6d161/preview.png 150w,\n/tech-blog/static/95b19a329ead842b67c46c87fc3b7cea/630fb/preview.png 300w,\n/tech-blog/static/95b19a329ead842b67c46c87fc3b7cea/2a4de/preview.png 600w,\n/tech-blog/static/95b19a329ead842b67c46c87fc3b7cea/3c17d/preview.png 720w","sizes":"(max-width: 600px) 100vw, 600px"}}}}}},{"node":{"frontmatter":{"path":"blog/microservice-architecture","title":"マイクロサービスアーキテクチャのざっくりまとめ","tags":["linux","book"],"excerpt":"マイクロサービスアーキテクチャを読んだのでざっくりまとめる","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='225'%20viewBox='0%200%20400%20225'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20113v112h122V0H0v113M131%2010l1%2010h137V0H131v10m148%20103v112h121V0H279v113M131%2039v25l1%2023h41c38%200%2041%200%2039%202-5%203-2%207%206%208%207%200%208%203%203%208l-2%203%203-1c2-3%203-2%203%202%200%202%201%203%203%201%201-2%202-1%202%201l1%202%201-4%202-5c2-2%202-2%206%202%204%206%208%208%2010%206s1-6-4-11l-3-4%202-2%204-5c2-3%203-3%2011-3h9V39l-69-1-69%201m52%2014v6h13V46h-13v7m4%2040c-4%203-7%209-6%2011%200%202%200%202-2%201-2-2-2-2-6%200s-5%203-5%201c1-1-5-3-7-2-3%201-2%203%200%206%203%202%204%2013%201%2013h-2l2%201%204-2c4-4%207-5%208-3%202%202%202%203-2%203-3%200-5%202-4%204%202%203%201%205-3%206-5%201-5%201-4%208l-4%203c-4%202-4%201-2%208%200%201%200%202-3%203-4%202-4%203%200%207%202%203%203%203%203%202%200-2%200-2%201-1%202%202%201%203-1%205-2%201-3%202-3%204h-1l-4-1c-3-2-2%201%202%203%203%201%203%201%203%206v4h4c4-1%204-1%202%201-3%202-3%205%200%208l2%203h14l16-2c2-1%202-1%203%202%200%203%207%2010%208%209l-2-4c-2-4-2-5%202-2%202%202%205%202%205-1%200-1%200-2%202-1l1-1-2-3c0-2%201-2%204-2%2010%200%2029-8%2034-14%206-7%206-21%201-26-2-2-3-3-2-4v-3c-1-2-1-3%202-6%206-6%208-15%205-18-2-2-2-2-4-1-2%203-6%202-8%200-2-3-4-4-5-2s-4%201-6-1h-12c-2%200-2%200-2%203%200%204%200%204-2%203l-3-3c-1-3-6-5-12-5h-3l3-1-3-1-4-2c-1-1-2-2-3-1-2%200-2%200-1-2v-2l1-3c1-1%201-1%201%201%200%201%201%201%204-2%205-7%201-12-5-7m25%2047c-1%203-2%204-5%205l-2%201c1%202-1%206-4%206-2%201-3%201-2%204l-1%204v2l1%202c0%202-4%201-5-1-1-1-1-1-1%201s0%203%203%203%204-1%204-2l2-2c2%200%202%200%201%201v1h2l-3%202c-1%200-2%201-1%203l-1%203c-1%201-1%201%201%201%201%200%202-1%202-3l3-3%202-3c-1-1%202-3%203-3v-2c-2-1%203-5%205-4h7l-3-2c-2-1-3-2-3-4l-1-2v2c0%202-1%203-3%204-3%201-4%202-4%204%200%206-8%205-9%200%200-3%203-5%206-4v-1c-2-2%200-7%204-7l3-1-1%201v1h6l-2-2c-3-2-3-3-3-5v-3l-1%203m6%2019c-1%201%200%202%202%202s3%200%203%202c0%201-1%202-3%202l-2%201h3c3%200%204%200%205%202%202%204-3%207-6%203l-2-1%201%203%202%203c0%202%200%202-1%201-1-2-3-1-2%201%200%202%200%202-3%202-3-1-4-5-1-7%202-1%202-1%200-3l-2-3h-1v3c1%201%201%201-1%203-2%201-2%202%200%202%202%201%201%204-1%205-3%201-2%202%201%201l5%201h6c3%202%204%201%201-1-1-1-1-1%201-1l2%201h1c1-1%200-2-1-2-2-1-4-4-3-5%202-1%206%200%206%202l2%202c2%200%202-4%200-6l-2-3-1-3-2-4c1-3-5-5-7-3'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.7857142857142858,"src":"/tech-blog/static/d230b073ea6c86b382313b5da1dc9967/2a4de/preview.png","srcSet":"/tech-blog/static/d230b073ea6c86b382313b5da1dc9967/6d161/preview.png 150w,\n/tech-blog/static/d230b073ea6c86b382313b5da1dc9967/630fb/preview.png 300w,\n/tech-blog/static/d230b073ea6c86b382313b5da1dc9967/2a4de/preview.png 600w,\n/tech-blog/static/d230b073ea6c86b382313b5da1dc9967/3c17d/preview.png 720w","sizes":"(max-width: 600px) 100vw, 600px"}}}}}},{"node":{"frontmatter":{"path":"blog/github-actions-changelog","title":"GitHub ActionsでCHANGELOG駆動Release","tags":["github"],"excerpt":null,"cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='225'%20viewBox='0%200%20400%20225'%20preserveAspectRatio='none'%3e%3cpath%20d='M135%2011c-2%208-2%2014-1%2021%201%204%201%204-2%209-8%2012-11%2027-8%2044l2%208-11%201-11%201h11c11%200%2012%200%2013%202%202%203%201%203-5%203l-5%201h6c6%200%206%200%208%203%206%2011%2021%2019%2039%2022%208%201%208%201%205%205-2%201-4%204-5%207-1%204-2%204-7%206-9%202-17%200-23-8s-11-12-15-13c-7-2-12%201-6%204%205%203%2010%208%2014%2014%206%2012%2013%2015%2026%2015h9v28l-4%204c-6%205-6%206%200%206%207%200%2014-4%2016-9v-19c0-13%201-17%202-19%202-3%202-3%202%2022v25l-2%203c-6%205-1%208%207%204s8-5%208-34c0-22%200-26%202-26l1%2026c0%2029%200%2030%208%2034%209%204%2014%201%208-4l-2-3-1-18v-24l1-7%201%203c2%203%202%207%202%2020%200%2017%200%2017%203%2020%203%204%208%206%2013%206%206%200%206-2%202-5-6-4-6-6-6-26%200-21-1-26-6-32l-3-4%208-1c18-3%2034-12%2038-22%201-3%202-3%207-3h7l-6-1h-6l2-7c5-21%203-42-7-54-3-4-3-5-3-14l-1-14c-2-5-2-6-6-6-5%200-14%203-22%208l-5%203-9-1c-11-2-30-2-41%200-8%202-8%202-11%200-6-4-18-9-24-10h-6l-1%206m25%2053c-10%202-17%2013-17%2024%200%2018%209%2027%2030%2032%209%202%2050%202%2058%200%2017-5%2024-14%2024-31%200-11-6-21-15-25-5-2-74-2-80%200m7%2015l-2%201%202%202c2%202%202%202%201%204h-3c-4-3-3%208%201%2012%202%203%204%203%207%200%205-4%205-13%200-18-3-2-3-2-6-1m60%201c-8%206-2%2023%206%2019l2-2%201-2c1%200%202-5%201-9-1-6-6-10-10-6'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.7857142857142858,"src":"/tech-blog/static/fd3e4dc9df349a378435a24061fd48fc/4fe8c/preview.jpg","srcSet":"/tech-blog/static/fd3e4dc9df349a378435a24061fd48fc/aabdf/preview.jpg 150w,\n/tech-blog/static/fd3e4dc9df349a378435a24061fd48fc/9dc27/preview.jpg 300w,\n/tech-blog/static/fd3e4dc9df349a378435a24061fd48fc/4fe8c/preview.jpg 600w,\n/tech-blog/static/fd3e4dc9df349a378435a24061fd48fc/7d509/preview.jpg 720w","sizes":"(max-width: 600px) 100vw, 600px"}}}}}},{"node":{"frontmatter":{"path":"blog/how-to-use-cron","title":"cronジョブを追加する4つの方法","tags":["linux"],"excerpt":"cronジョブの追加方法について調べたのでまとめる","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='225'%20viewBox='0%200%20400%20225'%20preserveAspectRatio='none'%3e%3cpath%20d='M130%2066c-5%202-7%207-7%2015%200%209%201%2012%203%209v-3c-2-3-1-6%201-7%203-3%205-1%205%203%200%202%200%203%202%203l2-2c0-3%203-7%205-7%203%200%206%206%204%209v3l1%204%205%2013%205%2018%201%207%201-4c2-4%203-10%200-13v-2c2%200%204%205%204%2010%200%206-1%209-4%209-1%201-2%202-1%204%201%203%203%204%206%201l4-3c6%200%203-17-6-29-6-8-7-11-8-20s-3-14-7-17-12-4-16-1m-6%2030l-5%209c-5%205-11%2019-11%2022l2%202c3%201%2017%2021%2017%2024a1001%201001%200%200121%202l1-4v-5l-4%202c-5%203-12%203-17%201-3-2-4-3-1-4%202-2%201-4-7-10-7-6-9-10-6-18%202-4%204-4%202%200l-1%206%201-2%205-11c3-4%204-8%205-11%200-5-1-8-2-3'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.7857142857142858,"src":"/tech-blog/static/ac7eb4a46644b7a2c7135328696263b6/2a4de/preview.png","srcSet":"/tech-blog/static/ac7eb4a46644b7a2c7135328696263b6/6d161/preview.png 150w,\n/tech-blog/static/ac7eb4a46644b7a2c7135328696263b6/630fb/preview.png 300w,\n/tech-blog/static/ac7eb4a46644b7a2c7135328696263b6/2a4de/preview.png 600w,\n/tech-blog/static/ac7eb4a46644b7a2c7135328696263b6/3c17d/preview.png 720w","sizes":"(max-width: 600px) 100vw, 600px"}}}}}},{"node":{"frontmatter":{"path":"blog/deep-learning-3","title":"機械学習の深層順伝播型ネットワークについてのざっくりとしたまとめ","tags":["python","DL","book"],"excerpt":"書籍 深層学習 を読みながらまとめていく","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='225'%20viewBox='0%200%20400%20225'%20preserveAspectRatio='none'%3e%3cpath%20d='M121%201v4l-1%203-1%203c1%201-1%207-2%207l-2%205-2%208v11h2l-1-1v-4l1-1%201-2c1-4%201-4%203-3v-3c-1-2%200-6%201-6l1-3c0-4%200-6%202-5v25c1%202%201%202-1%202v1c1%202%200%2010-1%2011l-1-3-1-3v-4c0-2%200-3-1-2l-1%202v3l-1%205c-2%201-1%203%201%203v8l-1%204-2-4c0-2-1-3-2-3l2%2020-1%205c-1-1-1%200-1%204%200%205%201%206%202%203%201-2%201-2%201%202s-1%207-2%206l-1%2032%201%2032%205-10c0-3%201-4%203-1h1c0-2%202-3%202-1h1l2-1-1%202-1%203v1l-2-2h-2l-2%201c-2-2-1%202%201%205s3%204%201%204l-1-2c0-1-1-1-1%201l-2%202-1%201c0%203-2%202-2%200-1-1-1-1-1%201l1%204v2l-1-2c-1-1-1-1-1%201l1%204v3c-2%200%202%204%204%203v3c-2%202-3%201-2-1l-1-1-2%206c0%206%200%206%204%2010%205%203%205%203%207%202%202-2%203-2%203-1h1l2-2%201%202c-1%201-1%201%201%201%201-1%202%200%203%201l1%202c1%200%201-2-1-3-1-2%200-6%202-6l1-1%201-1c2-1%202-1%201-3l-2-1c-1%201-1%201-2-1h-5c-2-2-1-3%201-2h1c0-2%204-2%205%200h1l2-1c3%200%205-3%204-6h2c2%201%202%201%201-1%200-3%200-3%202-3l2-1h-2c-1%200-4-3-3-5l2-1%202-1h1v7l2-3%202-3%202-2%201%203%201%202c2%200%202%200%201%203l-1%202%201-1v3c0%204-2%206-3%202-1-2-1-2-3%200h-5l1%202v1l2%202v2h-1c0-3-2%200-2%204v4l1-2c0-2%203-6%203-5v3c-2%202-1%203%203%203%202%200%203%201%203%203l1%204c1%204%201%204-1%204s-3%202-1%205h1c1-2%203-1%202%200%200%202-2%202-8%202-7%200-8%200-7-1s2-2%201-4l1-3h1l2%202%201%202c-1%201%200%202%201%202%201%201%202%200%202-2v-9c-2%201-2%200-2-1l-1-3-1%201-2%202v2c1%201%200%202-2%203s-3%202-3%204c0%203%200%203-1%202l-1-2-1%204-1-1h-2c-1%203-3%202-3%200h-1c0%204-4%202-13-5l-9-8%201%206%201%203%202-1v2l-3%201-1%209v8h176v-7c0-6%200-7-2-7l-2-1%202-1c1%200%202-2%202-7%200-6%200-7-2-6v-2c2-2%202-2%201-4v-13l1-3-2-2-2-1%201-1c2%200%202%200%201-2l-1-2%201%201c2%204%202%202%202-12l-1-15v-1l1-24c0-24-1-26-4-26-2%200-4-4-3-4%202-1%205%200%204%202l1%201c3%200%202-5%200-5l-3-2h-2c-2%200-2%200-2-2v-3l-1%202c0%203-2%204-2%201%200-2%200-2-2%202%200%201-1%201-3-1l-4-3c-4%200-6-2-3-2%202%200%202%200%201-1l-1-2-3-6c-2%200-1%204%200%204v1l-2%202c1%205%201%205-18%205-15%200-17%200-15%201%202%202%202%203-1%202l-1%201%201%201v2c0%202-1%203-2%202l-3%201-3%203c-2%201-2%201%200%201l3-1c2-3%203-2%203%205l-2%2010-2%202h-2c-1%202-3%202-4%202-1-1-2%200-2%201l2%201h2l2%201v1l-3%203c-2%202-3%203-3%200s-3-3-3-1l-2%202v-8l1-3c0-3%202-4%202-2s3%201%204-1l2-2%205-4c0-2-6%201-6%202-1%201-1%201-1-1s-2-3-2-1h-1c-2-2-2-2-3%200l-5%202c-3%200-5-1-3-2v-2l1-3c2-1%202-1%203%201%200%202%201%202%202-1v-2l2-3%203-4%203-4%202-2h-8c-5%200-8%200-7%201l1%201%201%201%202-1h2l3-1c2%200%202%200%201%202-3%202-5%203-5%201l-2%203-4%204-1%202h-1v7l-1%202-1%202v7c0%204%200%204-1%203-2-2-2-2-3-1-2%202-3%201-2-1%200-1%201-2%202-1%202%200%202%200%202-2%200-3-3-4-4-1%200%202%200%202-1%201l1-6%201-12v-8c1-1%202%201%203%205l2%205%201-2c-2-4-2-8%200-10%201-1%200-1-6-1h-8l1%205-1%204-1-6c0-2-1-3-5-3s-4%200-3%202c2%201%202%202%201%202v3l1%203h-1l-2%201v5l-1%203c0%203%200%203%201%201%200-4%202-2%203%204l3%209%202%203c0%202%200%202%201%201h1v4l-1%204c-1%201-1%200-1-2%200-3%200-3-1-2l-1%201-2-2c0%201%203%208%205%209%201%201-1%201-2%201l-2%201c-1%202-6-3-6-7v-6c-1-3%200-4%202-2s2%202%202%200v-2l-1-2c1-1%200-2-1-2l-1-3c-1-2-1-2-1%200l1%205c1%201%200%202-2%202-5%200-6%200-7%202l-2%202c-1-1-2%202-2%2010l-1%206-2-1-1-1-2%201c0%202-4%203-5%202l-1-4c0-4-1-3-1%201%200%205-7%207-7%202%200-2%200-2-3-2-4%201-5%200-5-12v-6l-2-3-1-2v2l1%205v5l1%206-1%205c-2-1-5%200-4%201%201%202-2%204-4%203l-2%201c1%201-2%202-3%201-1-2%200-20%201-21l1-1h-1c-2%200-2-2%200-7l1-10%202-8%203-2h1l1-1c1-2%203-3%203%200l1%201v-2l2-1h2l-3-1c-5%201-1-2%205-3s7-3%205-7V44l-2%209-2%205c-1%200-1%201%201%203%201%202%201%208-1%2010l-3%203c-1%203-6%204-7%202-2-2-3-2-2%201l-2%201c-2%200-2%200-2-2v-3c-1-1-2-4-1-7l2-1%202-2%204-12v-1l1-4%202-4c-1-1%203-7%204-7l3-2%202-2v3c0%202%200%202%201-1%201-5%200-6-2-5l-2%201%201-2v-1l-1-3c1-2%202-2%2013-2%209%200%2011%200%2010-1v-5l-1-3-2-1c1-2%201-2-2-1l-2%201c-1-1%202-8%204-9s1-2-2-2l-2%201v4c-2%203-2%203-3%201l-1-4c0-3-1-2-2%203l1%203c1-2%203%202%203%205-1%204-2%206-3%205l-1%201c1%201%201%201%200%200l-2-1h-1c-2%202-3%203-3%201%200-1%203-5%203-3l3-7h-2l-1-1-1%202c1%202%200%204-2%205l-2%202v-2l1-7c2-6%202-8-1-8-2%200-2%200-2%205l-1%205-1-2-3-8-1%206c1%206%200%207-2%2011s-2%204-3-7c-1-5-1-6%201-8s2-3%200-1h-5m52%200v2l1%201%201%201-2%201c-1-1-4%202-3%202%203%201%205%203%205%205l-1%202v-2l-1-1c-2%200-2%202%200%203%202%203%202%205-1%205a940%20940%200%200086%202l1%2017%201%2018c1%201%201%200%201-2l2-1c2%200%201%201-1%204-2%202-3%203%200%203l1-2%201-2%203-2%201-2%201-1v-1c-2%200%202-3%205-3s5%200%203%201h2c4%200%204%200%203%201v2l-1%201-2%201h-3c-3%200-3%200-2%202l1%201v2l3%202%202%201-2%201c-2%200-3%200-3%202%200%203%201%203%203%203s2%200%202%203l-1%203%203-3c4-4%204-4%203-6v-1l2%201v1l1-2c0-2-1-2-3-2l-4-2c0-2%201-4%202-2h2l1%201%201-1a60%2060%200%20000-23V2c0-3-39-3-40%200s-3%203-2%200c0-2-6-3-10-1h-3l-4-1c-3%200-4%200-3%201l-1%201-1-1-4-1c-3%200-3%200-2%203%200%202%200%202-2%201s-3-2-4-1h-1l-1-2-1%203-1%203-1-1V3l-1%202-2%203c-1%201-1%201-1-1l3-5V0l-4%202v3c-2%202-3%200-1-3%201-2%201-2-5-2s-7%200-7%202l-1%201-1-1c0-2-1-2-7-2-4%200-7%200-6%201m79%208c0%202-1%202-4%202l-1%202%201%202-1%201c-2%201-2%201-1%202l4-1v-2l-1-1h2l3%201-1-1-1-1%201-1h4l1%203c2%202%202%204%201%204v1h2l1%201%202%201h1c-1%202%200%202%202%201v-4c1%200-1-3-3-3l-2-1-3-2v-1c1-1%200-4-2-4h-1c0-2-3-1-4%201m26%2029l-2%201h-1v1l1%202h-5v-2c3-2%201-3-3-2-4%200-5%202-3%206v1l6%201c4%200%205%200%205-2h2c0%202%201%202%201%201l2-1v-3c1-1%200-5-2-5l-1%202m-43%2010l-4%201c-2%200-2%200-2%204v5h13v-5c0-4%200-4-3-4l-3-1h-1m-1%2034l2%2011v9c-1%202-1%202%202%203s4%201%202-1c-2-1-2-2-1-3V85c-1-1-1-2%201-3%202-2%202-2%200-2l-5-1h-3l2%203m25-2c-1%202-1%203%201%203v4c-2%201-3%205-2%205v5l-1-1h-1c-1%201%201%207%202%206l1%203c0%202%200%202-1%200l-2-2-1%201%202%203c0%202%202%203%202%201l1%201%201%203%202-2%201-5c-1-3-1-3%201-4%202%200%202-1%202-3-1-4%200-6%202-6v5c2%201%202%201%202-1s4-3%205-1c0%202%203%200%203-2%200-3-2-3-2-1-1%202-3%200-3-4%200-2-4-4-6-2h-1l-2%201-3%201%201-2c2-1%203-3%202-3l-1%201-2-1c-1-1-1-1%201-2l2-1h-6m-87%2091v2c2-1%204%200%204%202h-4c0%202-1%202-2%201l-3%201-2%201c-3%200-4%202-4%203%201%201%201%202%202%201%202-1%204-1%205%201l3-1c3-3%205-3%204%200%200%201%200%202%202%202v1l-3%208c0%202%203-3%203-5s0-2%201-1c0%202%200%202%201%201l4-1%204-2%203-1h2l3-6c-1-2-2-1-2%202l-2%203v-1h-7c-2-3-4-2-4%201%200%201%200%202-1%201v-3l-1-2-2-2h2c2%202%203%202%204%201l-1-2-1-2-2-2-3-2c-1-1-2-1-3%201m40%2023h-2c-2%200-2%200-2%202l-1%203v5c-1%201%200%202%201%204%201%201%202%202%201%203h13c1%201%2015%201%2015-1h1l1-1h-5c-2%201-2%201-3-2%200-3-2-4-2-2l-2%201c-2%200-2-1-2-2v-1l-1%202c-1%203-3%205-5%205v-4c-1%201-2%200-2-3v-3l1%201%202%201%201%201%201%201%201-3c0-3-1-4-2-2l-2%201v-2l1-2-2%201c-1%202-6%203-6%201l1-1c2%200%203-2%202-3h-3m25%204l-2%204-1%201-2%202%201%201h8v3c-1%202-1%202%201%202l5-1c3-1%206-5%204-6v-2c1-2%201-3-1-3h-1v2s-3-2-3-4c-1-1-1-1-1%201l-3%203-1%202c0%201-1%202-3%202s-3-1-2-2l3-2c2%200%202%200%201-1v-4l-3%202'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.7857142857142858,"src":"/tech-blog/static/0a5ef4c7db01af8de4e6d9703fea9529/497c6/preview.png","srcSet":"/tech-blog/static/0a5ef4c7db01af8de4e6d9703fea9529/6d161/preview.png 150w,\n/tech-blog/static/0a5ef4c7db01af8de4e6d9703fea9529/630fb/preview.png 300w,\n/tech-blog/static/0a5ef4c7db01af8de4e6d9703fea9529/497c6/preview.png 400w","sizes":"(max-width: 400px) 100vw, 400px"}}}}}},{"node":{"frontmatter":{"path":"blog/deep-learning-4","title":"機械学習の誤差逆伝播法についてまとまらない","tags":["python","DL","book"],"excerpt":"書籍 深層学習 を読みながらまとめていく","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='225'%20viewBox='0%200%20400%20225'%20preserveAspectRatio='none'%3e%3cpath%20d='M121%201v4l-1%203-1%203c1%201-1%207-2%207l-2%205-2%208v11h2l-1-1v-4l1-1%201-2c1-4%201-4%203-3v-3c-1-2%200-6%201-6l1-3c0-4%200-6%202-5v25c1%202%201%202-1%202v1c1%202%200%2010-1%2011l-1-3-1-3v-4c0-2%200-3-1-2l-1%202v3l-1%205c-2%201-1%203%201%203v8l-1%204-2-4c0-2-1-3-2-3l2%2020-1%205c-1-1-1%200-1%204%200%205%201%206%202%203%201-2%201-2%201%202s-1%207-2%206l-1%2032%201%2032%205-10c0-3%201-4%203-1h1c0-2%202-3%202-1h1l2-1-1%202-1%203v1l-2-2h-2l-2%201c-2-2-1%202%201%205s3%204%201%204l-1-2c0-1-1-1-1%201l-2%202-1%201c0%203-2%202-2%200-1-1-1-1-1%201l1%204v2l-1-2c-1-1-1-1-1%201l1%204v3c-2%200%202%204%204%203v3c-2%202-3%201-2-1l-1-1-2%206c0%206%200%206%204%2010%205%203%205%203%207%202%202-2%203-2%203-1h1l2-2%201%202c-1%201-1%201%201%201%201-1%202%200%203%201l1%202c1%200%201-2-1-3-1-2%200-6%202-6l1-1%201-1c2-1%202-1%201-3l-2-1c-1%201-1%201-2-1h-5c-2-2-1-3%201-2h1c0-2%204-2%205%200h1l2-1c3%200%205-3%204-6h2c2%201%202%201%201-1%200-3%200-3%202-3l2-1h-2c-1%200-4-3-3-5l2-1%202-1h1v7l2-3%202-3%202-2%201%203%201%202c2%200%202%200%201%203l-1%202%201-1v3c0%204-2%206-3%202-1-2-1-2-3%200h-5l1%202v1l2%202v2h-1c0-3-2%200-2%204v4l1-2c0-2%203-6%203-5v3c-2%202-1%203%203%203%202%200%203%201%203%203l1%204c1%204%201%204-1%204s-3%202-1%205h1c1-2%203-1%202%200%200%202-2%202-8%202-7%200-8%200-7-1s2-2%201-4l1-3h1l2%202%201%202c-1%201%200%202%201%202%201%201%202%200%202-2v-9c-2%201-2%200-2-1l-1-3-1%201-2%202v2c1%201%200%202-2%203s-3%202-3%204c0%203%200%203-1%202l-1-2-1%204-1-1h-2c-1%203-3%202-3%200h-1c0%204-4%202-13-5l-9-8%201%206%201%203%202-1v2l-3%201-1%209v8h176v-7c0-6%200-7-2-7l-2-1%202-1c1%200%202-2%202-7%200-6%200-7-2-6v-2c2-2%202-2%201-4v-13l1-3-2-2-2-1%201-1c2%200%202%200%201-2l-1-2%201%201c2%204%202%202%202-12l-1-15v-1l1-24c0-24-1-26-4-26-2%200-4-4-3-4%202-1%205%200%204%202l1%201c3%200%202-5%200-5l-3-2h-2c-2%200-2%200-2-2v-3l-1%202c0%203-2%204-2%201%200-2%200-2-2%202%200%201-1%201-3-1l-4-3c-4%200-6-2-3-2%202%200%202%200%201-1l-1-2-3-6c-2%200-1%204%200%204v1l-2%202c1%205%201%205-18%205-15%200-17%200-15%201%202%202%202%203-1%202l-1%201%201%201v2c0%202-1%203-2%202l-3%201-3%203c-2%201-2%201%200%201l3-1c2-3%203-2%203%205l-2%2010-2%202h-2c-1%202-3%202-4%202-1-1-2%200-2%201l2%201h2l2%201v1l-3%203c-2%202-3%203-3%200s-3-3-3-1l-2%202v-8l1-3c0-3%202-4%202-2s3%201%204-1l2-2%205-4c0-2-6%201-6%202-1%201-1%201-1-1s-2-3-2-1h-1c-2-2-2-2-3%200l-5%202c-3%200-5-1-3-2v-2l1-3c2-1%202-1%203%201%200%202%201%202%202-1v-2l2-3%203-4%203-4%202-2h-8c-5%200-8%200-7%201l1%201%201%201%202-1h2l3-1c2%200%202%200%201%202-3%202-5%203-5%201l-2%203-4%204-1%202h-1v7l-1%202-1%202v7c0%204%200%204-1%203-2-2-2-2-3-1-2%202-3%201-2-1%200-1%201-2%202-1%202%200%202%200%202-2%200-3-3-4-4-1%200%202%200%202-1%201l1-6%201-12v-8c1-1%202%201%203%205l2%205%201-2c-2-4-2-8%200-10%201-1%200-1-6-1h-8l1%205-1%204-1-6c0-2-1-3-5-3s-4%200-3%202c2%201%202%202%201%202v3l1%203h-1l-2%201v5l-1%203c0%203%200%203%201%201%200-4%202-2%203%204l3%209%202%203c0%202%200%202%201%201h1v4l-1%204c-1%201-1%200-1-2%200-3%200-3-1-2l-1%201-2-2c0%201%203%208%205%209%201%201-1%201-2%201l-2%201c-1%202-6-3-6-7v-6c-1-3%200-4%202-2s2%202%202%200v-2l-1-2c1-1%200-2-1-2l-1-3c-1-2-1-2-1%200l1%205c1%201%200%202-2%202-5%200-6%200-7%202l-2%202c-1-1-2%202-2%2010l-1%206-2-1-1-1-2%201c0%202-4%203-5%202l-1-4c0-4-1-3-1%201%200%205-7%207-7%202%200-2%200-2-3-2-4%201-5%200-5-12v-6l-2-3-1-2v2l1%205v5l1%206-1%205c-2-1-5%200-4%201%201%202-2%204-4%203l-2%201c1%201-2%202-3%201-1-2%200-20%201-21l1-1h-1c-2%200-2-2%200-7l1-10%202-8%203-2h1l1-1c1-2%203-3%203%200l1%201v-2l2-1h2l-3-1c-5%201-1-2%205-3s7-3%205-7V44l-2%209-2%205c-1%200-1%201%201%203%201%202%201%208-1%2010l-3%203c-1%203-6%204-7%202-2-2-3-2-2%201l-2%201c-2%200-2%200-2-2v-3c-1-1-2-4-1-7l2-1%202-2%204-12v-1l1-4%202-4c-1-1%203-7%204-7l3-2%202-2v3c0%202%200%202%201-1%201-5%200-6-2-5l-2%201%201-2v-1l-1-3c1-2%202-2%2013-2%209%200%2011%200%2010-1v-5l-1-3-2-1c1-2%201-2-2-1l-2%201c-1-1%202-8%204-9s1-2-2-2l-2%201v4c-2%203-2%203-3%201l-1-4c0-3-1-2-2%203l1%203c1-2%203%202%203%205-1%204-2%206-3%205l-1%201c1%201%201%201%200%200l-2-1h-1c-2%202-3%203-3%201%200-1%203-5%203-3l3-7h-2l-1-1-1%202c1%202%200%204-2%205l-2%202v-2l1-7c2-6%202-8-1-8-2%200-2%200-2%205l-1%205-1-2-3-8-1%206c1%206%200%207-2%2011s-2%204-3-7c-1-5-1-6%201-8s2-3%200-1h-5m52%200v2l1%201%201%201-2%201c-1-1-4%202-3%202%203%201%205%203%205%205l-1%202v-2l-1-1c-2%200-2%202%200%203%202%203%202%205-1%205a940%20940%200%200086%202l1%2017%201%2018c1%201%201%200%201-2l2-1c2%200%201%201-1%204-2%202-3%203%200%203l1-2%201-2%203-2%201-2%201-1v-1c-2%200%202-3%205-3s5%200%203%201h2c4%200%204%200%203%201v2l-1%201-2%201h-3c-3%200-3%200-2%202l1%201v2l3%202%202%201-2%201c-2%200-3%200-3%202%200%203%201%203%203%203s2%200%202%203l-1%203%203-3c4-4%204-4%203-6v-1l2%201v1l1-2c0-2-1-2-3-2l-4-2c0-2%201-4%202-2h2l1%201%201-1a60%2060%200%20000-23V2c0-3-39-3-40%200s-3%203-2%200c0-2-6-3-10-1h-3l-4-1c-3%200-4%200-3%201l-1%201-1-1-4-1c-3%200-3%200-2%203%200%202%200%202-2%201s-3-2-4-1h-1l-1-2-1%203-1%203-1-1V3l-1%202-2%203c-1%201-1%201-1-1l3-5V0l-4%202v3c-2%202-3%200-1-3%201-2%201-2-5-2s-7%200-7%202l-1%201-1-1c0-2-1-2-7-2-4%200-7%200-6%201m79%208c0%202-1%202-4%202l-1%202%201%202-1%201c-2%201-2%201-1%202l4-1v-2l-1-1h2l3%201-1-1-1-1%201-1h4l1%203c2%202%202%204%201%204v1h2l1%201%202%201h1c-1%202%200%202%202%201v-4c1%200-1-3-3-3l-2-1-3-2v-1c1-1%200-4-2-4h-1c0-2-3-1-4%201m26%2029l-2%201h-1v1l1%202h-5v-2c3-2%201-3-3-2-4%200-5%202-3%206v1l6%201c4%200%205%200%205-2h2c0%202%201%202%201%201l2-1v-3c1-1%200-5-2-5l-1%202m-43%2010l-4%201c-2%200-2%200-2%204v5h13v-5c0-4%200-4-3-4l-3-1h-1m-1%2034l2%2011v9c-1%202-1%202%202%203s4%201%202-1c-2-1-2-2-1-3V85c-1-1-1-2%201-3%202-2%202-2%200-2l-5-1h-3l2%203m25-2c-1%202-1%203%201%203v4c-2%201-3%205-2%205v5l-1-1h-1c-1%201%201%207%202%206l1%203c0%202%200%202-1%200l-2-2-1%201%202%203c0%202%202%203%202%201l1%201%201%203%202-2%201-5c-1-3-1-3%201-4%202%200%202-1%202-3-1-4%200-6%202-6v5c2%201%202%201%202-1s4-3%205-1c0%202%203%200%203-2%200-3-2-3-2-1-1%202-3%200-3-4%200-2-4-4-6-2h-1l-2%201-3%201%201-2c2-1%203-3%202-3l-1%201-2-1c-1-1-1-1%201-2l2-1h-6m-87%2091v2c2-1%204%200%204%202h-4c0%202-1%202-2%201l-3%201-2%201c-3%200-4%202-4%203%201%201%201%202%202%201%202-1%204-1%205%201l3-1c3-3%205-3%204%200%200%201%200%202%202%202v1l-3%208c0%202%203-3%203-5s0-2%201-1c0%202%200%202%201%201l4-1%204-2%203-1h2l3-6c-1-2-2-1-2%202l-2%203v-1h-7c-2-3-4-2-4%201%200%201%200%202-1%201v-3l-1-2-2-2h2c2%202%203%202%204%201l-1-2-1-2-2-2-3-2c-1-1-2-1-3%201m40%2023h-2c-2%200-2%200-2%202l-1%203v5c-1%201%200%202%201%204%201%201%202%202%201%203h13c1%201%2015%201%2015-1h1l1-1h-5c-2%201-2%201-3-2%200-3-2-4-2-2l-2%201c-2%200-2-1-2-2v-1l-1%202c-1%203-3%205-5%205v-4c-1%201-2%200-2-3v-3l1%201%202%201%201%201%201%201%201-3c0-3-1-4-2-2l-2%201v-2l1-2-2%201c-1%202-6%203-6%201l1-1c2%200%203-2%202-3h-3m25%204l-2%204-1%201-2%202%201%201h8v3c-1%202-1%202%201%202l5-1c3-1%206-5%204-6v-2c1-2%201-3-1-3h-1v2s-3-2-3-4c-1-1-1-1-1%201l-3%203-1%202c0%201-1%202-3%202s-3-1-2-2l3-2c2%200%202%200%201-1v-4l-3%202'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.7857142857142858,"src":"/tech-blog/static/0a5ef4c7db01af8de4e6d9703fea9529/497c6/preview.png","srcSet":"/tech-blog/static/0a5ef4c7db01af8de4e6d9703fea9529/6d161/preview.png 150w,\n/tech-blog/static/0a5ef4c7db01af8de4e6d9703fea9529/630fb/preview.png 300w,\n/tech-blog/static/0a5ef4c7db01af8de4e6d9703fea9529/497c6/preview.png 400w","sizes":"(max-width: 400px) 100vw, 400px"}}}}}},{"node":{"frontmatter":{"path":"blog/deep-learning-5","title":"機械学習の正則化についてまとめ","tags":["python","DL","book"],"excerpt":"書籍 深層学習 を読みながらまとめていく","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='225'%20viewBox='0%200%20400%20225'%20preserveAspectRatio='none'%3e%3cpath%20d='M121%201v4l-1%203-1%203c1%201-1%207-2%207l-2%205-2%208v11h2l-1-1v-4l1-1%201-2c1-4%201-4%203-3v-3c-1-2%200-6%201-6l1-3c0-4%200-6%202-5v25c1%202%201%202-1%202v1c1%202%200%2010-1%2011l-1-3-1-3v-4c0-2%200-3-1-2l-1%202v3l-1%205c-2%201-1%203%201%203v8l-1%204-2-4c0-2-1-3-2-3l2%2020-1%205c-1-1-1%200-1%204%200%205%201%206%202%203%201-2%201-2%201%202s-1%207-2%206l-1%2032%201%2032%205-10c0-3%201-4%203-1h1c0-2%202-3%202-1h1l2-1-1%202-1%203v1l-2-2h-2l-2%201c-2-2-1%202%201%205s3%204%201%204l-1-2c0-1-1-1-1%201l-2%202-1%201c0%203-2%202-2%200-1-1-1-1-1%201l1%204v2l-1-2c-1-1-1-1-1%201l1%204v3c-2%200%202%204%204%203v3c-2%202-3%201-2-1l-1-1-2%206c0%206%200%206%204%2010%205%203%205%203%207%202%202-2%203-2%203-1h1l2-2%201%202c-1%201-1%201%201%201%201-1%202%200%203%201l1%202c1%200%201-2-1-3-1-2%200-6%202-6l1-1%201-1c2-1%202-1%201-3l-2-1c-1%201-1%201-2-1h-5c-2-2-1-3%201-2h1c0-2%204-2%205%200h1l2-1c3%200%205-3%204-6h2c2%201%202%201%201-1%200-3%200-3%202-3l2-1h-2c-1%200-4-3-3-5l2-1%202-1h1v7l2-3%202-3%202-2%201%203%201%202c2%200%202%200%201%203l-1%202%201-1v3c0%204-2%206-3%202-1-2-1-2-3%200h-5l1%202v1l2%202v2h-1c0-3-2%200-2%204v4l1-2c0-2%203-6%203-5v3c-2%202-1%203%203%203%202%200%203%201%203%203l1%204c1%204%201%204-1%204s-3%202-1%205h1c1-2%203-1%202%200%200%202-2%202-8%202-7%200-8%200-7-1s2-2%201-4l1-3h1l2%202%201%202c-1%201%200%202%201%202%201%201%202%200%202-2v-9c-2%201-2%200-2-1l-1-3-1%201-2%202v2c1%201%200%202-2%203s-3%202-3%204c0%203%200%203-1%202l-1-2-1%204-1-1h-2c-1%203-3%202-3%200h-1c0%204-4%202-13-5l-9-8%201%206%201%203%202-1v2l-3%201-1%209v8h176v-7c0-6%200-7-2-7l-2-1%202-1c1%200%202-2%202-7%200-6%200-7-2-6v-2c2-2%202-2%201-4v-13l1-3-2-2-2-1%201-1c2%200%202%200%201-2l-1-2%201%201c2%204%202%202%202-12l-1-15v-1l1-24c0-24-1-26-4-26-2%200-4-4-3-4%202-1%205%200%204%202l1%201c3%200%202-5%200-5l-3-2h-2c-2%200-2%200-2-2v-3l-1%202c0%203-2%204-2%201%200-2%200-2-2%202%200%201-1%201-3-1l-4-3c-4%200-6-2-3-2%202%200%202%200%201-1l-1-2-3-6c-2%200-1%204%200%204v1l-2%202c1%205%201%205-18%205-15%200-17%200-15%201%202%202%202%203-1%202l-1%201%201%201v2c0%202-1%203-2%202l-3%201-3%203c-2%201-2%201%200%201l3-1c2-3%203-2%203%205l-2%2010-2%202h-2c-1%202-3%202-4%202-1-1-2%200-2%201l2%201h2l2%201v1l-3%203c-2%202-3%203-3%200s-3-3-3-1l-2%202v-8l1-3c0-3%202-4%202-2s3%201%204-1l2-2%205-4c0-2-6%201-6%202-1%201-1%201-1-1s-2-3-2-1h-1c-2-2-2-2-3%200l-5%202c-3%200-5-1-3-2v-2l1-3c2-1%202-1%203%201%200%202%201%202%202-1v-2l2-3%203-4%203-4%202-2h-8c-5%200-8%200-7%201l1%201%201%201%202-1h2l3-1c2%200%202%200%201%202-3%202-5%203-5%201l-2%203-4%204-1%202h-1v7l-1%202-1%202v7c0%204%200%204-1%203-2-2-2-2-3-1-2%202-3%201-2-1%200-1%201-2%202-1%202%200%202%200%202-2%200-3-3-4-4-1%200%202%200%202-1%201l1-6%201-12v-8c1-1%202%201%203%205l2%205%201-2c-2-4-2-8%200-10%201-1%200-1-6-1h-8l1%205-1%204-1-6c0-2-1-3-5-3s-4%200-3%202c2%201%202%202%201%202v3l1%203h-1l-2%201v5l-1%203c0%203%200%203%201%201%200-4%202-2%203%204l3%209%202%203c0%202%200%202%201%201h1v4l-1%204c-1%201-1%200-1-2%200-3%200-3-1-2l-1%201-2-2c0%201%203%208%205%209%201%201-1%201-2%201l-2%201c-1%202-6-3-6-7v-6c-1-3%200-4%202-2s2%202%202%200v-2l-1-2c1-1%200-2-1-2l-1-3c-1-2-1-2-1%200l1%205c1%201%200%202-2%202-5%200-6%200-7%202l-2%202c-1-1-2%202-2%2010l-1%206-2-1-1-1-2%201c0%202-4%203-5%202l-1-4c0-4-1-3-1%201%200%205-7%207-7%202%200-2%200-2-3-2-4%201-5%200-5-12v-6l-2-3-1-2v2l1%205v5l1%206-1%205c-2-1-5%200-4%201%201%202-2%204-4%203l-2%201c1%201-2%202-3%201-1-2%200-20%201-21l1-1h-1c-2%200-2-2%200-7l1-10%202-8%203-2h1l1-1c1-2%203-3%203%200l1%201v-2l2-1h2l-3-1c-5%201-1-2%205-3s7-3%205-7V44l-2%209-2%205c-1%200-1%201%201%203%201%202%201%208-1%2010l-3%203c-1%203-6%204-7%202-2-2-3-2-2%201l-2%201c-2%200-2%200-2-2v-3c-1-1-2-4-1-7l2-1%202-2%204-12v-1l1-4%202-4c-1-1%203-7%204-7l3-2%202-2v3c0%202%200%202%201-1%201-5%200-6-2-5l-2%201%201-2v-1l-1-3c1-2%202-2%2013-2%209%200%2011%200%2010-1v-5l-1-3-2-1c1-2%201-2-2-1l-2%201c-1-1%202-8%204-9s1-2-2-2l-2%201v4c-2%203-2%203-3%201l-1-4c0-3-1-2-2%203l1%203c1-2%203%202%203%205-1%204-2%206-3%205l-1%201c1%201%201%201%200%200l-2-1h-1c-2%202-3%203-3%201%200-1%203-5%203-3l3-7h-2l-1-1-1%202c1%202%200%204-2%205l-2%202v-2l1-7c2-6%202-8-1-8-2%200-2%200-2%205l-1%205-1-2-3-8-1%206c1%206%200%207-2%2011s-2%204-3-7c-1-5-1-6%201-8s2-3%200-1h-5m52%200v2l1%201%201%201-2%201c-1-1-4%202-3%202%203%201%205%203%205%205l-1%202v-2l-1-1c-2%200-2%202%200%203%202%203%202%205-1%205a940%20940%200%200086%202l1%2017%201%2018c1%201%201%200%201-2l2-1c2%200%201%201-1%204-2%202-3%203%200%203l1-2%201-2%203-2%201-2%201-1v-1c-2%200%202-3%205-3s5%200%203%201h2c4%200%204%200%203%201v2l-1%201-2%201h-3c-3%200-3%200-2%202l1%201v2l3%202%202%201-2%201c-2%200-3%200-3%202%200%203%201%203%203%203s2%200%202%203l-1%203%203-3c4-4%204-4%203-6v-1l2%201v1l1-2c0-2-1-2-3-2l-4-2c0-2%201-4%202-2h2l1%201%201-1a60%2060%200%20000-23V2c0-3-39-3-40%200s-3%203-2%200c0-2-6-3-10-1h-3l-4-1c-3%200-4%200-3%201l-1%201-1-1-4-1c-3%200-3%200-2%203%200%202%200%202-2%201s-3-2-4-1h-1l-1-2-1%203-1%203-1-1V3l-1%202-2%203c-1%201-1%201-1-1l3-5V0l-4%202v3c-2%202-3%200-1-3%201-2%201-2-5-2s-7%200-7%202l-1%201-1-1c0-2-1-2-7-2-4%200-7%200-6%201m79%208c0%202-1%202-4%202l-1%202%201%202-1%201c-2%201-2%201-1%202l4-1v-2l-1-1h2l3%201-1-1-1-1%201-1h4l1%203c2%202%202%204%201%204v1h2l1%201%202%201h1c-1%202%200%202%202%201v-4c1%200-1-3-3-3l-2-1-3-2v-1c1-1%200-4-2-4h-1c0-2-3-1-4%201m26%2029l-2%201h-1v1l1%202h-5v-2c3-2%201-3-3-2-4%200-5%202-3%206v1l6%201c4%200%205%200%205-2h2c0%202%201%202%201%201l2-1v-3c1-1%200-5-2-5l-1%202m-43%2010l-4%201c-2%200-2%200-2%204v5h13v-5c0-4%200-4-3-4l-3-1h-1m-1%2034l2%2011v9c-1%202-1%202%202%203s4%201%202-1c-2-1-2-2-1-3V85c-1-1-1-2%201-3%202-2%202-2%200-2l-5-1h-3l2%203m25-2c-1%202-1%203%201%203v4c-2%201-3%205-2%205v5l-1-1h-1c-1%201%201%207%202%206l1%203c0%202%200%202-1%200l-2-2-1%201%202%203c0%202%202%203%202%201l1%201%201%203%202-2%201-5c-1-3-1-3%201-4%202%200%202-1%202-3-1-4%200-6%202-6v5c2%201%202%201%202-1s4-3%205-1c0%202%203%200%203-2%200-3-2-3-2-1-1%202-3%200-3-4%200-2-4-4-6-2h-1l-2%201-3%201%201-2c2-1%203-3%202-3l-1%201-2-1c-1-1-1-1%201-2l2-1h-6m-87%2091v2c2-1%204%200%204%202h-4c0%202-1%202-2%201l-3%201-2%201c-3%200-4%202-4%203%201%201%201%202%202%201%202-1%204-1%205%201l3-1c3-3%205-3%204%200%200%201%200%202%202%202v1l-3%208c0%202%203-3%203-5s0-2%201-1c0%202%200%202%201%201l4-1%204-2%203-1h2l3-6c-1-2-2-1-2%202l-2%203v-1h-7c-2-3-4-2-4%201%200%201%200%202-1%201v-3l-1-2-2-2h2c2%202%203%202%204%201l-1-2-1-2-2-2-3-2c-1-1-2-1-3%201m40%2023h-2c-2%200-2%200-2%202l-1%203v5c-1%201%200%202%201%204%201%201%202%202%201%203h13c1%201%2015%201%2015-1h1l1-1h-5c-2%201-2%201-3-2%200-3-2-4-2-2l-2%201c-2%200-2-1-2-2v-1l-1%202c-1%203-3%205-5%205v-4c-1%201-2%200-2-3v-3l1%201%202%201%201%201%201%201%201-3c0-3-1-4-2-2l-2%201v-2l1-2-2%201c-1%202-6%203-6%201l1-1c2%200%203-2%202-3h-3m25%204l-2%204-1%201-2%202%201%201h8v3c-1%202-1%202%201%202l5-1c3-1%206-5%204-6v-2c1-2%201-3-1-3h-1v2s-3-2-3-4c-1-1-1-1-1%201l-3%203-1%202c0%201-1%202-3%202s-3-1-2-2l3-2c2%200%202%200%201-1v-4l-3%202'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.7857142857142858,"src":"/tech-blog/static/0a5ef4c7db01af8de4e6d9703fea9529/497c6/preview.png","srcSet":"/tech-blog/static/0a5ef4c7db01af8de4e6d9703fea9529/6d161/preview.png 150w,\n/tech-blog/static/0a5ef4c7db01af8de4e6d9703fea9529/630fb/preview.png 300w,\n/tech-blog/static/0a5ef4c7db01af8de4e6d9703fea9529/497c6/preview.png 400w","sizes":"(max-width: 400px) 100vw, 400px"}}}}}},{"node":{"frontmatter":{"path":"blog/perfect-javascript","title":"JavaScriptの勉強始めました","tags":["javascript","book"],"excerpt":"Perfect JavaScriptの自分用まとめ","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='225'%20viewBox='0%200%20400%20225'%20preserveAspectRatio='none'%3e%3cpath%20d='M117%208c0%202%201%202%2083%202s83%200%2083-2-1-2-83-2-83%200-83%202m0%20105v79h166V34H117v79m78-74c-6%204-6%208%200%2013%204%203%205%206%203%208s-5%200-7-3-3-3-3%200c0%204%202%206%207%206%204%200%206-1%208-3%204-5%203-7-6-14-2-2-2-5%201-5%201-1%202%200%204%201%203%204%203%204%203%200s-6-6-10-3m-63%202c2%201%202%202%201%2013-1%2012-1%2014-4%2012-1-1-4%200-3%202s7%201%209-2c3-3%203-4%205-18l2-8c1-1%200-1-5-1-6%200-6%200-5%202m133%205l-3%202v7l1%207c2%202%207%200%208-2h-1c-2%200-3-2-2-6%200-3%201-4%202-4l2-1-2-1-2-2c0-2-1-2-3%200m-120%202c-3%202-5%205-3%206l3-2c2-2%204-3%204%200l-4%203c-3%202-4%202-4%204l1%203c9%201%2016%200%2013-2-2-1-2-2-1-6%201-6-2-8-9-6m30%201l-3%203c0%202%202%202%204%200s4-2%204%200c0%201-1%202-3%202-4%201-6%204-5%207%201%202%202%202%207%202%205-1%2011-3%207-3-2%200-2-1-2-5%201-8-2-10-9-6m36-1c-6%203-7%2013%200%2014%203%201%208%200%208-3h-2c-5%201-8-3-4-8%201-2%201-2%204-1%203%202%203%202%203%200%200-3-4-4-9-2m12%200c-1%201-2%202-1%206%200%204%200%206-2%207-1%201-1%201%204%201%203%200%205%200%204-1l-1-5c0-4%201-4%203-4s3-1%203-2c0-3-6-4-10-2m23%200c-2%200-2%202-2%2011l-2%2010c-3%201-1%202%204%202l4-1-1-1-1-3c0-2%200-3%202-3%207%200%2013-9%208-14-2-2-8-2-12-1m-90%202l4%207c2%207%203%207%206%201l5-8%202-2h-3c-3%200-4%200-3%201s0%202-1%204l-1%203-1-3v-4c1-1%200-1-4-1-5%200-5%200-4%202m2%2024c-4%200-14%204-16%205s-2%201-1%202l1%203%201%203h5c2%200%202%200%201%201l-2%202c-2-1-2%200%200%202l2%202c1-1%202%201%204%204%204%206%203%206%2011%203%204-2%205-2%207-1h1l-1-1%201-1c4-3%201-2-6%201-8%203-8%203-8-1%200-3%200-4-3-5l-3-2%2017-7%204%206%204%205c1%200%201-1-1-4l-2-5c0-5-2-5-12-1l-4%201c-1%200%204-4%206-4%203%200%205-2%204-4h-1c0%203-3%203-5%201-3-3-2-5%201-5%202-1%202-1%200-1l-5%201m17%2025c0%201%200%202-2%202l1%201%202%203-1%201h-1l1%202%201-1c0-2%201%200%202%202l1%205-2-1-6-2c-2%200-2%200-1-1s1-1-1-3c-1-3-4-4-2-2%201%202-1%201-2-1h-3c-1%201-2%202-3%201l2%205-1%201h-1l1%202%201%202%201%201c1%200%202%201%202%203%201%206%2011%209%2015%205l5-4v-2c-1-1-1-1%201-1s3-1%203-5c0-3%200-4-4-6-5-2-6-4-4-4%201%200%202-1%201-2h-1c-1%201-1%201-3-1-2-3-3-3-2%200m22%2027c-2%200-3%202-2%202l-5%205c-5%203-6%204-5%205s6%200%2010-3l4-2c3%200%200%203-7%206l-5%203-3-3-2-4h-2c-2%202-2%204%202%206%202%201%203%203%201%203l-1%201c1%201%201%201%200%200-2%200-5%202-3%203%201%201%204%200%204-1%200-2%204-1%205%201s6%203%206%201l2-1%201-1c-1-1%200-3%202-4l3-2%206-2c3%200%205-1%205-2h2l1-1-3-1h-1c1-1%201-1-1-1l-3%201c-2%202-2%200-1-2%202-2%201-4-1-1-2%202-4%201-4-1l-2-2-1-1%201-2%201-1c0-1-1-1-4%201m-59%2070c-10%202-22%2010-16%2010%201%200%202%201%202%203%200%203-1%203-3-1l-1-2v3c1%206%2012%208%2025%204%207-2%207-2%209%200h1l-1-2c-1-1%203-3%207-4%202-1%202-1%201-2v-4c0-3-1-4-3-5-3-2-5-1-3%201s1%203-1%202l-1-3c1-2-8-3-16%200'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.7857142857142858,"src":"/tech-blog/static/93f60a672aaf5316bf028fa91908921f/2a4de/preview.png","srcSet":"/tech-blog/static/93f60a672aaf5316bf028fa91908921f/6d161/preview.png 150w,\n/tech-blog/static/93f60a672aaf5316bf028fa91908921f/630fb/preview.png 300w,\n/tech-blog/static/93f60a672aaf5316bf028fa91908921f/2a4de/preview.png 600w,\n/tech-blog/static/93f60a672aaf5316bf028fa91908921f/3c17d/preview.png 720w","sizes":"(max-width: 600px) 100vw, 600px"}}}}}},{"node":{"frontmatter":{"path":"blog/deep-learning-1","title":"機械学習に必要な数学についてざっくりとしたまとめ","tags":["python","DL","book"],"excerpt":"書籍 深層学習 を読みながらまとめていく","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='225'%20viewBox='0%200%20400%20225'%20preserveAspectRatio='none'%3e%3cpath%20d='M121%201v4l-1%203-1%203c1%201-1%207-2%207l-2%205-2%208v11h2l-1-1v-4l1-1%201-2c1-4%201-4%203-3v-3c-1-2%200-6%201-6l1-3c0-4%200-6%202-5v25c1%202%201%202-1%202v1c1%202%200%2010-1%2011l-1-3-1-3v-4c0-2%200-3-1-2l-1%202v3l-1%205c-2%201-1%203%201%203v8l-1%204-2-4c0-2-1-3-2-3l2%2020-1%205c-1-1-1%200-1%204%200%205%201%206%202%203%201-2%201-2%201%202s-1%207-2%206l-1%2032%201%2032%205-10c0-3%201-4%203-1h1c0-2%202-3%202-1h1l2-1-1%202-1%203v1l-2-2h-2l-2%201c-2-2-1%202%201%205s3%204%201%204l-1-2c0-1-1-1-1%201l-2%202-1%201c0%203-2%202-2%200-1-1-1-1-1%201l1%204v2l-1-2c-1-1-1-1-1%201l1%204v3c-2%200%202%204%204%203v3c-2%202-3%201-2-1l-1-1-2%206c0%206%200%206%204%2010%205%203%205%203%207%202%202-2%203-2%203-1h1l2-2%201%202c-1%201-1%201%201%201%201-1%202%200%203%201l1%202c1%200%201-2-1-3-1-2%200-6%202-6l1-1%201-1c2-1%202-1%201-3l-2-1c-1%201-1%201-2-1h-5c-2-2-1-3%201-2h1c0-2%204-2%205%200h1l2-1c3%200%205-3%204-6h2c2%201%202%201%201-1%200-3%200-3%202-3l2-1h-2c-1%200-4-3-3-5l2-1%202-1h1v7l2-3%202-3%202-2%201%203%201%202c2%200%202%200%201%203l-1%202%201-1v3c0%204-2%206-3%202-1-2-1-2-3%200h-5l1%202v1l2%202v2h-1c0-3-2%200-2%204v4l1-2c0-2%203-6%203-5v3c-2%202-1%203%203%203%202%200%203%201%203%203l1%204c1%204%201%204-1%204s-3%202-1%205h1c1-2%203-1%202%200%200%202-2%202-8%202-7%200-8%200-7-1s2-2%201-4l1-3h1l2%202%201%202c-1%201%200%202%201%202%201%201%202%200%202-2v-9c-2%201-2%200-2-1l-1-3-1%201-2%202v2c1%201%200%202-2%203s-3%202-3%204c0%203%200%203-1%202l-1-2-1%204-1-1h-2c-1%203-3%202-3%200h-1c0%204-4%202-13-5l-9-8%201%206%201%203%202-1v2l-3%201-1%209v8h176v-7c0-6%200-7-2-7l-2-1%202-1c1%200%202-2%202-7%200-6%200-7-2-6v-2c2-2%202-2%201-4v-13l1-3-2-2-2-1%201-1c2%200%202%200%201-2l-1-2%201%201c2%204%202%202%202-12l-1-15v-1l1-24c0-24-1-26-4-26-2%200-4-4-3-4%202-1%205%200%204%202l1%201c3%200%202-5%200-5l-3-2h-2c-2%200-2%200-2-2v-3l-1%202c0%203-2%204-2%201%200-2%200-2-2%202%200%201-1%201-3-1l-4-3c-4%200-6-2-3-2%202%200%202%200%201-1l-1-2-3-6c-2%200-1%204%200%204v1l-2%202c1%205%201%205-18%205-15%200-17%200-15%201%202%202%202%203-1%202l-1%201%201%201v2c0%202-1%203-2%202l-3%201-3%203c-2%201-2%201%200%201l3-1c2-3%203-2%203%205l-2%2010-2%202h-2c-1%202-3%202-4%202-1-1-2%200-2%201l2%201h2l2%201v1l-3%203c-2%202-3%203-3%200s-3-3-3-1l-2%202v-8l1-3c0-3%202-4%202-2s3%201%204-1l2-2%205-4c0-2-6%201-6%202-1%201-1%201-1-1s-2-3-2-1h-1c-2-2-2-2-3%200l-5%202c-3%200-5-1-3-2v-2l1-3c2-1%202-1%203%201%200%202%201%202%202-1v-2l2-3%203-4%203-4%202-2h-8c-5%200-8%200-7%201l1%201%201%201%202-1h2l3-1c2%200%202%200%201%202-3%202-5%203-5%201l-2%203-4%204-1%202h-1v7l-1%202-1%202v7c0%204%200%204-1%203-2-2-2-2-3-1-2%202-3%201-2-1%200-1%201-2%202-1%202%200%202%200%202-2%200-3-3-4-4-1%200%202%200%202-1%201l1-6%201-12v-8c1-1%202%201%203%205l2%205%201-2c-2-4-2-8%200-10%201-1%200-1-6-1h-8l1%205-1%204-1-6c0-2-1-3-5-3s-4%200-3%202c2%201%202%202%201%202v3l1%203h-1l-2%201v5l-1%203c0%203%200%203%201%201%200-4%202-2%203%204l3%209%202%203c0%202%200%202%201%201h1v4l-1%204c-1%201-1%200-1-2%200-3%200-3-1-2l-1%201-2-2c0%201%203%208%205%209%201%201-1%201-2%201l-2%201c-1%202-6-3-6-7v-6c-1-3%200-4%202-2s2%202%202%200v-2l-1-2c1-1%200-2-1-2l-1-3c-1-2-1-2-1%200l1%205c1%201%200%202-2%202-5%200-6%200-7%202l-2%202c-1-1-2%202-2%2010l-1%206-2-1-1-1-2%201c0%202-4%203-5%202l-1-4c0-4-1-3-1%201%200%205-7%207-7%202%200-2%200-2-3-2-4%201-5%200-5-12v-6l-2-3-1-2v2l1%205v5l1%206-1%205c-2-1-5%200-4%201%201%202-2%204-4%203l-2%201c1%201-2%202-3%201-1-2%200-20%201-21l1-1h-1c-2%200-2-2%200-7l1-10%202-8%203-2h1l1-1c1-2%203-3%203%200l1%201v-2l2-1h2l-3-1c-5%201-1-2%205-3s7-3%205-7V44l-2%209-2%205c-1%200-1%201%201%203%201%202%201%208-1%2010l-3%203c-1%203-6%204-7%202-2-2-3-2-2%201l-2%201c-2%200-2%200-2-2v-3c-1-1-2-4-1-7l2-1%202-2%204-12v-1l1-4%202-4c-1-1%203-7%204-7l3-2%202-2v3c0%202%200%202%201-1%201-5%200-6-2-5l-2%201%201-2v-1l-1-3c1-2%202-2%2013-2%209%200%2011%200%2010-1v-5l-1-3-2-1c1-2%201-2-2-1l-2%201c-1-1%202-8%204-9s1-2-2-2l-2%201v4c-2%203-2%203-3%201l-1-4c0-3-1-2-2%203l1%203c1-2%203%202%203%205-1%204-2%206-3%205l-1%201c1%201%201%201%200%200l-2-1h-1c-2%202-3%203-3%201%200-1%203-5%203-3l3-7h-2l-1-1-1%202c1%202%200%204-2%205l-2%202v-2l1-7c2-6%202-8-1-8-2%200-2%200-2%205l-1%205-1-2-3-8-1%206c1%206%200%207-2%2011s-2%204-3-7c-1-5-1-6%201-8s2-3%200-1h-5m52%200v2l1%201%201%201-2%201c-1-1-4%202-3%202%203%201%205%203%205%205l-1%202v-2l-1-1c-2%200-2%202%200%203%202%203%202%205-1%205a940%20940%200%200086%202l1%2017%201%2018c1%201%201%200%201-2l2-1c2%200%201%201-1%204-2%202-3%203%200%203l1-2%201-2%203-2%201-2%201-1v-1c-2%200%202-3%205-3s5%200%203%201h2c4%200%204%200%203%201v2l-1%201-2%201h-3c-3%200-3%200-2%202l1%201v2l3%202%202%201-2%201c-2%200-3%200-3%202%200%203%201%203%203%203s2%200%202%203l-1%203%203-3c4-4%204-4%203-6v-1l2%201v1l1-2c0-2-1-2-3-2l-4-2c0-2%201-4%202-2h2l1%201%201-1a60%2060%200%20000-23V2c0-3-39-3-40%200s-3%203-2%200c0-2-6-3-10-1h-3l-4-1c-3%200-4%200-3%201l-1%201-1-1-4-1c-3%200-3%200-2%203%200%202%200%202-2%201s-3-2-4-1h-1l-1-2-1%203-1%203-1-1V3l-1%202-2%203c-1%201-1%201-1-1l3-5V0l-4%202v3c-2%202-3%200-1-3%201-2%201-2-5-2s-7%200-7%202l-1%201-1-1c0-2-1-2-7-2-4%200-7%200-6%201m79%208c0%202-1%202-4%202l-1%202%201%202-1%201c-2%201-2%201-1%202l4-1v-2l-1-1h2l3%201-1-1-1-1%201-1h4l1%203c2%202%202%204%201%204v1h2l1%201%202%201h1c-1%202%200%202%202%201v-4c1%200-1-3-3-3l-2-1-3-2v-1c1-1%200-4-2-4h-1c0-2-3-1-4%201m26%2029l-2%201h-1v1l1%202h-5v-2c3-2%201-3-3-2-4%200-5%202-3%206v1l6%201c4%200%205%200%205-2h2c0%202%201%202%201%201l2-1v-3c1-1%200-5-2-5l-1%202m-43%2010l-4%201c-2%200-2%200-2%204v5h13v-5c0-4%200-4-3-4l-3-1h-1m-1%2034l2%2011v9c-1%202-1%202%202%203s4%201%202-1c-2-1-2-2-1-3V85c-1-1-1-2%201-3%202-2%202-2%200-2l-5-1h-3l2%203m25-2c-1%202-1%203%201%203v4c-2%201-3%205-2%205v5l-1-1h-1c-1%201%201%207%202%206l1%203c0%202%200%202-1%200l-2-2-1%201%202%203c0%202%202%203%202%201l1%201%201%203%202-2%201-5c-1-3-1-3%201-4%202%200%202-1%202-3-1-4%200-6%202-6v5c2%201%202%201%202-1s4-3%205-1c0%202%203%200%203-2%200-3-2-3-2-1-1%202-3%200-3-4%200-2-4-4-6-2h-1l-2%201-3%201%201-2c2-1%203-3%202-3l-1%201-2-1c-1-1-1-1%201-2l2-1h-6m-87%2091v2c2-1%204%200%204%202h-4c0%202-1%202-2%201l-3%201-2%201c-3%200-4%202-4%203%201%201%201%202%202%201%202-1%204-1%205%201l3-1c3-3%205-3%204%200%200%201%200%202%202%202v1l-3%208c0%202%203-3%203-5s0-2%201-1c0%202%200%202%201%201l4-1%204-2%203-1h2l3-6c-1-2-2-1-2%202l-2%203v-1h-7c-2-3-4-2-4%201%200%201%200%202-1%201v-3l-1-2-2-2h2c2%202%203%202%204%201l-1-2-1-2-2-2-3-2c-1-1-2-1-3%201m40%2023h-2c-2%200-2%200-2%202l-1%203v5c-1%201%200%202%201%204%201%201%202%202%201%203h13c1%201%2015%201%2015-1h1l1-1h-5c-2%201-2%201-3-2%200-3-2-4-2-2l-2%201c-2%200-2-1-2-2v-1l-1%202c-1%203-3%205-5%205v-4c-1%201-2%200-2-3v-3l1%201%202%201%201%201%201%201%201-3c0-3-1-4-2-2l-2%201v-2l1-2-2%201c-1%202-6%203-6%201l1-1c2%200%203-2%202-3h-3m25%204l-2%204-1%201-2%202%201%201h8v3c-1%202-1%202%201%202l5-1c3-1%206-5%204-6v-2c1-2%201-3-1-3h-1v2s-3-2-3-4c-1-1-1-1-1%201l-3%203-1%202c0%201-1%202-3%202s-3-1-2-2l3-2c2%200%202%200%201-1v-4l-3%202'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.7857142857142858,"src":"/tech-blog/static/0a5ef4c7db01af8de4e6d9703fea9529/497c6/preview.png","srcSet":"/tech-blog/static/0a5ef4c7db01af8de4e6d9703fea9529/6d161/preview.png 150w,\n/tech-blog/static/0a5ef4c7db01af8de4e6d9703fea9529/630fb/preview.png 300w,\n/tech-blog/static/0a5ef4c7db01af8de4e6d9703fea9529/497c6/preview.png 400w","sizes":"(max-width: 400px) 100vw, 400px"}}}}}},{"node":{"frontmatter":{"path":"blog/deep-learning-2","title":"機械学習の基礎的な知識についてざっくりとしたまとめ","tags":["python","DL","book"],"excerpt":"書籍 深層学習 を読みながらまとめていく","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='225'%20viewBox='0%200%20400%20225'%20preserveAspectRatio='none'%3e%3cpath%20d='M121%201v4l-1%203-1%203c1%201-1%207-2%207l-2%205-2%208v11h2l-1-1v-4l1-1%201-2c1-4%201-4%203-3v-3c-1-2%200-6%201-6l1-3c0-4%200-6%202-5v25c1%202%201%202-1%202v1c1%202%200%2010-1%2011l-1-3-1-3v-4c0-2%200-3-1-2l-1%202v3l-1%205c-2%201-1%203%201%203v8l-1%204-2-4c0-2-1-3-2-3l2%2020-1%205c-1-1-1%200-1%204%200%205%201%206%202%203%201-2%201-2%201%202s-1%207-2%206l-1%2032%201%2032%205-10c0-3%201-4%203-1h1c0-2%202-3%202-1h1l2-1-1%202-1%203v1l-2-2h-2l-2%201c-2-2-1%202%201%205s3%204%201%204l-1-2c0-1-1-1-1%201l-2%202-1%201c0%203-2%202-2%200-1-1-1-1-1%201l1%204v2l-1-2c-1-1-1-1-1%201l1%204v3c-2%200%202%204%204%203v3c-2%202-3%201-2-1l-1-1-2%206c0%206%200%206%204%2010%205%203%205%203%207%202%202-2%203-2%203-1h1l2-2%201%202c-1%201-1%201%201%201%201-1%202%200%203%201l1%202c1%200%201-2-1-3-1-2%200-6%202-6l1-1%201-1c2-1%202-1%201-3l-2-1c-1%201-1%201-2-1h-5c-2-2-1-3%201-2h1c0-2%204-2%205%200h1l2-1c3%200%205-3%204-6h2c2%201%202%201%201-1%200-3%200-3%202-3l2-1h-2c-1%200-4-3-3-5l2-1%202-1h1v7l2-3%202-3%202-2%201%203%201%202c2%200%202%200%201%203l-1%202%201-1v3c0%204-2%206-3%202-1-2-1-2-3%200h-5l1%202v1l2%202v2h-1c0-3-2%200-2%204v4l1-2c0-2%203-6%203-5v3c-2%202-1%203%203%203%202%200%203%201%203%203l1%204c1%204%201%204-1%204s-3%202-1%205h1c1-2%203-1%202%200%200%202-2%202-8%202-7%200-8%200-7-1s2-2%201-4l1-3h1l2%202%201%202c-1%201%200%202%201%202%201%201%202%200%202-2v-9c-2%201-2%200-2-1l-1-3-1%201-2%202v2c1%201%200%202-2%203s-3%202-3%204c0%203%200%203-1%202l-1-2-1%204-1-1h-2c-1%203-3%202-3%200h-1c0%204-4%202-13-5l-9-8%201%206%201%203%202-1v2l-3%201-1%209v8h176v-7c0-6%200-7-2-7l-2-1%202-1c1%200%202-2%202-7%200-6%200-7-2-6v-2c2-2%202-2%201-4v-13l1-3-2-2-2-1%201-1c2%200%202%200%201-2l-1-2%201%201c2%204%202%202%202-12l-1-15v-1l1-24c0-24-1-26-4-26-2%200-4-4-3-4%202-1%205%200%204%202l1%201c3%200%202-5%200-5l-3-2h-2c-2%200-2%200-2-2v-3l-1%202c0%203-2%204-2%201%200-2%200-2-2%202%200%201-1%201-3-1l-4-3c-4%200-6-2-3-2%202%200%202%200%201-1l-1-2-3-6c-2%200-1%204%200%204v1l-2%202c1%205%201%205-18%205-15%200-17%200-15%201%202%202%202%203-1%202l-1%201%201%201v2c0%202-1%203-2%202l-3%201-3%203c-2%201-2%201%200%201l3-1c2-3%203-2%203%205l-2%2010-2%202h-2c-1%202-3%202-4%202-1-1-2%200-2%201l2%201h2l2%201v1l-3%203c-2%202-3%203-3%200s-3-3-3-1l-2%202v-8l1-3c0-3%202-4%202-2s3%201%204-1l2-2%205-4c0-2-6%201-6%202-1%201-1%201-1-1s-2-3-2-1h-1c-2-2-2-2-3%200l-5%202c-3%200-5-1-3-2v-2l1-3c2-1%202-1%203%201%200%202%201%202%202-1v-2l2-3%203-4%203-4%202-2h-8c-5%200-8%200-7%201l1%201%201%201%202-1h2l3-1c2%200%202%200%201%202-3%202-5%203-5%201l-2%203-4%204-1%202h-1v7l-1%202-1%202v7c0%204%200%204-1%203-2-2-2-2-3-1-2%202-3%201-2-1%200-1%201-2%202-1%202%200%202%200%202-2%200-3-3-4-4-1%200%202%200%202-1%201l1-6%201-12v-8c1-1%202%201%203%205l2%205%201-2c-2-4-2-8%200-10%201-1%200-1-6-1h-8l1%205-1%204-1-6c0-2-1-3-5-3s-4%200-3%202c2%201%202%202%201%202v3l1%203h-1l-2%201v5l-1%203c0%203%200%203%201%201%200-4%202-2%203%204l3%209%202%203c0%202%200%202%201%201h1v4l-1%204c-1%201-1%200-1-2%200-3%200-3-1-2l-1%201-2-2c0%201%203%208%205%209%201%201-1%201-2%201l-2%201c-1%202-6-3-6-7v-6c-1-3%200-4%202-2s2%202%202%200v-2l-1-2c1-1%200-2-1-2l-1-3c-1-2-1-2-1%200l1%205c1%201%200%202-2%202-5%200-6%200-7%202l-2%202c-1-1-2%202-2%2010l-1%206-2-1-1-1-2%201c0%202-4%203-5%202l-1-4c0-4-1-3-1%201%200%205-7%207-7%202%200-2%200-2-3-2-4%201-5%200-5-12v-6l-2-3-1-2v2l1%205v5l1%206-1%205c-2-1-5%200-4%201%201%202-2%204-4%203l-2%201c1%201-2%202-3%201-1-2%200-20%201-21l1-1h-1c-2%200-2-2%200-7l1-10%202-8%203-2h1l1-1c1-2%203-3%203%200l1%201v-2l2-1h2l-3-1c-5%201-1-2%205-3s7-3%205-7V44l-2%209-2%205c-1%200-1%201%201%203%201%202%201%208-1%2010l-3%203c-1%203-6%204-7%202-2-2-3-2-2%201l-2%201c-2%200-2%200-2-2v-3c-1-1-2-4-1-7l2-1%202-2%204-12v-1l1-4%202-4c-1-1%203-7%204-7l3-2%202-2v3c0%202%200%202%201-1%201-5%200-6-2-5l-2%201%201-2v-1l-1-3c1-2%202-2%2013-2%209%200%2011%200%2010-1v-5l-1-3-2-1c1-2%201-2-2-1l-2%201c-1-1%202-8%204-9s1-2-2-2l-2%201v4c-2%203-2%203-3%201l-1-4c0-3-1-2-2%203l1%203c1-2%203%202%203%205-1%204-2%206-3%205l-1%201c1%201%201%201%200%200l-2-1h-1c-2%202-3%203-3%201%200-1%203-5%203-3l3-7h-2l-1-1-1%202c1%202%200%204-2%205l-2%202v-2l1-7c2-6%202-8-1-8-2%200-2%200-2%205l-1%205-1-2-3-8-1%206c1%206%200%207-2%2011s-2%204-3-7c-1-5-1-6%201-8s2-3%200-1h-5m52%200v2l1%201%201%201-2%201c-1-1-4%202-3%202%203%201%205%203%205%205l-1%202v-2l-1-1c-2%200-2%202%200%203%202%203%202%205-1%205a940%20940%200%200086%202l1%2017%201%2018c1%201%201%200%201-2l2-1c2%200%201%201-1%204-2%202-3%203%200%203l1-2%201-2%203-2%201-2%201-1v-1c-2%200%202-3%205-3s5%200%203%201h2c4%200%204%200%203%201v2l-1%201-2%201h-3c-3%200-3%200-2%202l1%201v2l3%202%202%201-2%201c-2%200-3%200-3%202%200%203%201%203%203%203s2%200%202%203l-1%203%203-3c4-4%204-4%203-6v-1l2%201v1l1-2c0-2-1-2-3-2l-4-2c0-2%201-4%202-2h2l1%201%201-1a60%2060%200%20000-23V2c0-3-39-3-40%200s-3%203-2%200c0-2-6-3-10-1h-3l-4-1c-3%200-4%200-3%201l-1%201-1-1-4-1c-3%200-3%200-2%203%200%202%200%202-2%201s-3-2-4-1h-1l-1-2-1%203-1%203-1-1V3l-1%202-2%203c-1%201-1%201-1-1l3-5V0l-4%202v3c-2%202-3%200-1-3%201-2%201-2-5-2s-7%200-7%202l-1%201-1-1c0-2-1-2-7-2-4%200-7%200-6%201m79%208c0%202-1%202-4%202l-1%202%201%202-1%201c-2%201-2%201-1%202l4-1v-2l-1-1h2l3%201-1-1-1-1%201-1h4l1%203c2%202%202%204%201%204v1h2l1%201%202%201h1c-1%202%200%202%202%201v-4c1%200-1-3-3-3l-2-1-3-2v-1c1-1%200-4-2-4h-1c0-2-3-1-4%201m26%2029l-2%201h-1v1l1%202h-5v-2c3-2%201-3-3-2-4%200-5%202-3%206v1l6%201c4%200%205%200%205-2h2c0%202%201%202%201%201l2-1v-3c1-1%200-5-2-5l-1%202m-43%2010l-4%201c-2%200-2%200-2%204v5h13v-5c0-4%200-4-3-4l-3-1h-1m-1%2034l2%2011v9c-1%202-1%202%202%203s4%201%202-1c-2-1-2-2-1-3V85c-1-1-1-2%201-3%202-2%202-2%200-2l-5-1h-3l2%203m25-2c-1%202-1%203%201%203v4c-2%201-3%205-2%205v5l-1-1h-1c-1%201%201%207%202%206l1%203c0%202%200%202-1%200l-2-2-1%201%202%203c0%202%202%203%202%201l1%201%201%203%202-2%201-5c-1-3-1-3%201-4%202%200%202-1%202-3-1-4%200-6%202-6v5c2%201%202%201%202-1s4-3%205-1c0%202%203%200%203-2%200-3-2-3-2-1-1%202-3%200-3-4%200-2-4-4-6-2h-1l-2%201-3%201%201-2c2-1%203-3%202-3l-1%201-2-1c-1-1-1-1%201-2l2-1h-6m-87%2091v2c2-1%204%200%204%202h-4c0%202-1%202-2%201l-3%201-2%201c-3%200-4%202-4%203%201%201%201%202%202%201%202-1%204-1%205%201l3-1c3-3%205-3%204%200%200%201%200%202%202%202v1l-3%208c0%202%203-3%203-5s0-2%201-1c0%202%200%202%201%201l4-1%204-2%203-1h2l3-6c-1-2-2-1-2%202l-2%203v-1h-7c-2-3-4-2-4%201%200%201%200%202-1%201v-3l-1-2-2-2h2c2%202%203%202%204%201l-1-2-1-2-2-2-3-2c-1-1-2-1-3%201m40%2023h-2c-2%200-2%200-2%202l-1%203v5c-1%201%200%202%201%204%201%201%202%202%201%203h13c1%201%2015%201%2015-1h1l1-1h-5c-2%201-2%201-3-2%200-3-2-4-2-2l-2%201c-2%200-2-1-2-2v-1l-1%202c-1%203-3%205-5%205v-4c-1%201-2%200-2-3v-3l1%201%202%201%201%201%201%201%201-3c0-3-1-4-2-2l-2%201v-2l1-2-2%201c-1%202-6%203-6%201l1-1c2%200%203-2%202-3h-3m25%204l-2%204-1%201-2%202%201%201h8v3c-1%202-1%202%201%202l5-1c3-1%206-5%204-6v-2c1-2%201-3-1-3h-1v2s-3-2-3-4c-1-1-1-1-1%201l-3%203-1%202c0%201-1%202-3%202s-3-1-2-2l3-2c2%200%202%200%201-1v-4l-3%202'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.7857142857142858,"src":"/tech-blog/static/0a5ef4c7db01af8de4e6d9703fea9529/497c6/preview.png","srcSet":"/tech-blog/static/0a5ef4c7db01af8de4e6d9703fea9529/6d161/preview.png 150w,\n/tech-blog/static/0a5ef4c7db01af8de4e6d9703fea9529/630fb/preview.png 300w,\n/tech-blog/static/0a5ef4c7db01af8de4e6d9703fea9529/497c6/preview.png 400w","sizes":"(max-width: 400px) 100vw, 400px"}}}}}},{"node":{"frontmatter":{"path":"blog/python-env","title":"Pythonの環境構築奮闘記 あるいは降参の反省文","tags":["python"],"excerpt":"Python の環境構築はツールが多すぎる","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='225'%20viewBox='0%200%20400%20225'%20preserveAspectRatio='none'%3e%3cpath%20d='M189%2036c-15%202-17%205-18%2017v9h14c13%200%2015%201%2015%202%200%202-1%202-22%202-23%200-27%201-31%206-7%208-9%2031-3%2043%204%207%208%209%2016%209h7v-7c0-9%202-14%206-18%205-5%209-6%2028-6%2026%200%2027-1%2028-25l-1-20c-1-5-7-10-12-11s-20-2-27-1m37%20129c-3%204-9%207-13%208s-4%200%201-4c3-3%205-7%202-4l-5%202-5%202c-2%202-7%204-10%204-11%200-20%204-12%205l4%202h-18c-6-1-7-1-11%201-3%201-4%202-2%202l3-1h12c11%204%2019%205%2017%203-3-4%201-6%2018-9%2015-3%2015-3%2020-9%204-5%204-6-1-2m7%2015v1c0%202-5%204-10%205a311%20311%200%2000-13%200l1-2-2%201c-2%202-6%203-8%201h-1l-2%201h-4c-4%201%2014%202%2024%201h9c5%200%209-3%209-8h-3m-71%208c1%201%2015%208%2023%2010%205%202%2012%202%2018%201l3-1h-4a88%2088%200%2001-32-8l-4-2h-4'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.7857142857142858,"src":"/tech-blog/static/280b6d1773fe54a08a11b643cbde19be/2a4de/preview.png","srcSet":"/tech-blog/static/280b6d1773fe54a08a11b643cbde19be/6d161/preview.png 150w,\n/tech-blog/static/280b6d1773fe54a08a11b643cbde19be/630fb/preview.png 300w,\n/tech-blog/static/280b6d1773fe54a08a11b643cbde19be/2a4de/preview.png 600w,\n/tech-blog/static/280b6d1773fe54a08a11b643cbde19be/3c17d/preview.png 720w","sizes":"(max-width: 600px) 100vw, 600px"}}}}}},{"node":{"frontmatter":{"path":"blog/intro-deep-learning","title":"機械学習の勉強を始めました","tags":["python","DL","book"],"excerpt":"ゼロから作る Deep Learning の自分用まとめ","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='225'%20viewBox='0%200%20400%20225'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20113v112h121v-33l1-33h6c4-1%205-1%205-3l-1-2-1-1%201-4c0-2%200-2%202%200%200%202%202%203%202%203v5l2-3c1-3%201-3%202-2l1%203%201%201%202-1h1c1%201%204-3%204-6h1c1%201%201%201%202-1l1-3c1%200%201%203-1%207l-1%204%206%201-3-1v-5c1-3%202-4%202-2v4c1%202%203%200%202-1l1-4c1-1%201%200%201%203%201%203%201%204%202%203%202-1%204%201%203%204l1%202%201-3c0-2%201-3%202-3l1%203%201%202%201-2%201-4-1-3v-3c1-1%201-1%201%201l2%202%202-2h3l-1%201-1%201%202%201h3v3h-2l-2-1h-2l-1-2c-2%201-3%207-1%207l1%203v2l1-2a3399%203399%200%20002-2c0%203%200%203%201%202s1-1%202%201l1%202c2%200%201-2-1-3v-3h1c0%202%202%203%202%201%201-1%201%200%202%203l2%204v-5l1-3v-4h-1l1-1c2%200%202-1%201-2-1-2%200-3%201-5l2-1-1%203-1%202h1c1-1%201-1%201%201%200%201%200%202%201%201l1-1v2l-2%201-2%201v1l2%201h-2v1c1%202%201%202-1%202v1l2%203%201%202c2%202%203%205%202%207v1l2-1v1l5%202c3%201%205%203%202%203l-5%201c-3%201-3%202-3%205%200%202%201%203%202%202%202%200%202%200%201%201v3c0%201%201%201%202-1l2-1-2%202v4c1%201%202%201%203-2l2-2-1%203c-2%203-1%205%201%202l2-1%202%201c3%201%205-6%205-13v-6h6l7-1-4-1c-4%201-5%200-6-3v-9l1-1%202-2c2-1%206%203%206%206l1%202%201%202%201%203v2c-2%202%200%201%2011-1%208-2%2017-5%2018-7%202-2%201-4-1-4v-1c3-2%202-3-2-7-2-3-4-5-3-6h-1c-2%200-2%200-1-2l-1-1c-1%201-1%200-1-1%200-2-1-3-4-4l-9-4-7-4v-3l-1-4v1l-1%201-1-3-2-4v2c0%202%200%202-2%202l-2-4-1-4c-1-2-3-1-2%201h-3c-2-3%200-3%2027-3h27V43H131v72h13c10%200%2012%200%2011%201v2l-1%201-1%201c0%202-1%202-2%202-1-1-1-1-1%201%201%202%200%202-1%202h-1l-1%202c-1%201%200%202%202%203%203%203%202%204-2%202-2-3-3-2-3%200l2%204c6%203-5%200-11-3l-11-4-3-1V0H0v113M131%2010v9h138V0H131v10m148%20102v112h-79c-47%200-23%201%2061%201h139V0H279v112M138%2049l2%201%201%209-1%208-2%201%2014-1c4-2%205-11%202-16-3-2-16-5-16-2m4%2010v8h4c4%200%207-1%208-5%202-7-1-12-8-12h-4v9m15%20100l-5%201-5%201v3c-1%201%200%201%201%201l-1%201c-3%201-2%203%201%202%203%200%203%200%202%201l-3%201-2%201c-1%202%200%202%202%201h4l-3%201c-4%202-4%204%200%203l2%201-1%201-2%201c0%202%203%201%209-2l6-1%201-1%201-1h2c3-1%203%201%200%204-2%203%200%203%204%200%203-4%204-4%204-1%200%202%201%202%204-2s4-5%206-4l6%202h4l-2-1v-1l1-2c0-2%200-2-1%200-1%203-2%203-5%200-2-2-2-2-3-1h-1l-1-1-2-1c-1-2-1-2-2-1-1%202-1%202-2%201l-2-1-2-2-2-1-1%201h-4l-3-3h-1l-3-1h-1'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.7857142857142858,"src":"/tech-blog/static/bca56e8ff752a6aa15568d3925557921/46604/preview.png","srcSet":"/tech-blog/static/bca56e8ff752a6aa15568d3925557921/6d161/preview.png 150w,\n/tech-blog/static/bca56e8ff752a6aa15568d3925557921/630fb/preview.png 300w,\n/tech-blog/static/bca56e8ff752a6aa15568d3925557921/46604/preview.png 500w","sizes":"(max-width: 500px) 100vw, 500px"}}}}}}]}},"pageContext":{"postPath":"blog/effective-modern-cpp","translations":[{"hreflang":"ja","path":"blog/effective-modern-cpp/"}]}}}