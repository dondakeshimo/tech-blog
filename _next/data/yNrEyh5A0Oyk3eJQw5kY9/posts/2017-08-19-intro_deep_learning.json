{"pageProps":{"post":{"title":"機械学習の勉強を始めました","date":"2017-08-19","slug":"2017-08-19-intro_deep_learning","author":{"name":"JJ Kasper","picture":"/assets/blog/authors/jj.jpeg"},"content":"<h1 id=\"目次\">目次</h1>\n<ul>\n<li><a href=\"#%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92%E3%81%AE%E5%8B%89%E5%BC%B7%E3%82%92%E7%9C%9F%E9%9D%A2%E7%9B%AE%E3%81%AB%E3%81%AF%E3%81%98%E3%82%81%E3%81%BE%E3%81%97%E3%81%9F%E3%80%82\">機械学習の勉強を真面目にはじめました。</a></li>\n<li><a href=\"#%E3%83%8B%E3%83%A5%E3%83%BC%E3%83%A9%E3%83%AB%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF\">ニューラルネットワーク</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%E5%85%A5%E5%8A%9B%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%AE%E6%A7%8B%E9%80%A0\">入力ネットワークの構造</a></li>\n<li><a href=\"#%E6%B4%BB%E6%80%A7%E5%8C%96%E9%96%A2%E6%95%B0\">活性化関数</a></li>\n<li><a href=\"#%E3%83%90%E3%83%83%E3%83%81%E5%87%A6%E7%90%86\">バッチ処理</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E5%AD%A6%E7%BF%92\">データの学習</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%E6%90%8D%E5%A4%B1%E9%96%A2%E6%95%B0\">損失関数</a></li>\n<li><a href=\"#%E5%8B%BE%E9%85%8D%E6%B3%95\">勾配法</a></li>\n<li><a href=\"#%E3%81%93%E3%81%93%E3%81%BE%E3%81%A7%E3%81%AE%E3%81%BE%E3%81%A8%E3%82%81\">ここまでのまとめ</a></li>\n<li><a href=\"#%E9%81%8E%E5%AD%A6%E7%BF%92\">過学習</a></li>\n</ul>\n</li>\n<li><a href=\"#%E8%AA%A4%E5%B7%AE%E9%80%86%E4%BC%9D%E6%92%ADbackpropagation\">誤差逆伝播(backpropagation)</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%E5%8B%BE%E9%85%8D%E7%A2%BA%E8%AA%8D\">勾配確認</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E6%9C%80%E9%81%A9%E5%8C%96%E6%89%8B%E6%B3%95\">最適化手法</a>\n<ul>\n<li>\n<ul>\n<li>\n<ul>\n<li><a href=\"#sgd\">SGD</a></li>\n<li><a href=\"#momentum\">Momentum</a></li>\n<li><a href=\"#adagrad\">AdaGrad</a></li>\n<li><a href=\"#adam\">Adam</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E9%87%8D%E3%81%BF%E3%81%AE%E5%88%9D%E6%9C%9F%E5%80%A4\">重みの初期値</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#1%E3%82%92%E6%A8%99%E6%BA%96%E5%81%8F%E5%B7%AE%E3%81%A8%E3%81%97%E3%81%9F%E3%82%AC%E3%82%A6%E3%82%B9%E5%88%86%E5%B8%83\">1を標準偏差としたガウス分布</a></li>\n<li><a href=\"#0001%E3%82%92%E6%A8%99%E6%BA%96%E5%81%8F%E5%B7%AE%E3%81%A8%E3%81%97%E3%81%9F%E3%82%AC%E3%82%A6%E3%82%B9%E5%88%86%E5%B8%83\">0.001を標準偏差としたガウス分布</a></li>\n<li><a href=\"#xavier%E3%81%AE%E5%88%9D%E6%9C%9F%E5%80%A4\">Xavierの初期値</a></li>\n<li><a href=\"#he%E3%81%AE%E5%88%9D%E6%9C%9F%E5%80%A4\">Heの初期値</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#batch-normalization\">Batch Normalization</a></li>\n<li><a href=\"#%E6%AD%A3%E5%89%87%E5%8C%96\">正則化</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#weight-decay%E8%8D%B7%E9%87%8D%E6%B8%9B%E8%A1%B0\">Weight decay(荷重減衰)</a></li>\n<li><a href=\"#dropout\">Dropout</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E7%95%B3%E3%81%BF%E8%BE%BC%E3%81%BF%E3%83%8B%E3%83%A5%E3%83%BC%E3%83%A9%E3%83%AB%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AFcnn\">畳み込みニューラルネットワーク(CNN)</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#convolution%E3%83%AC%E3%82%A4%E3%83%A4\">Convolutionレイヤ</a></li>\n<li><a href=\"#pooling%E3%83%AC%E3%82%A4%E3%83%A4\">Poolingレイヤ</a></li>\n<li><a href=\"#cnn%E3%81%AE%E7%89%B9%E5%BE%B4%EF%BC%9F\">CNNの特徴？</a></li>\n<li><a href=\"#%E4%BB%A3%E8%A1%A8%E7%9A%84%E3%81%AAcnn\">代表的なCNN</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#lenet\">LeNet</a></li>\n<li><a href=\"#alexnet\">AlexNet</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E3%83%87%E3%82%A3%E3%83%BC%E3%83%97%E3%83%A9%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0\">ディープラーニング</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%E5%B1%A4%E3%82%92%E5%8E%9A%E3%81%8F%E3%81%99%E3%82%8B%E3%81%A8%E8%A8%80%E3%81%86%E3%81%93%E3%81%A8\">層を厚くすると言うこと</a></li>\n<li><a href=\"#%E6%9C%89%E5%90%8D%E3%81%AA%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF\">有名なネットワーク</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#vgg\">VGG</a></li>\n<li><a href=\"#googlelenet\">GoogleLeNet</a></li>\n<li><a href=\"#resnet\">ResNet</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E8%BB%A2%E7%A7%BB%E5%AD%A6%E7%BF%92\">転移学習</a></li>\n<li><a href=\"#%E6%9C%80%E8%BF%91%E3%83%87%E3%82%A3%E3%83%BC%E3%83%97%E3%83%A9%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0%E3%81%A7%E8%A1%8C%E3%82%8F%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E3%81%93%E3%81%A8\">最近ディープラーニングで行われていること</a></li>\n<li><a href=\"#%E5%BC%B7%E5%8C%96%E5%AD%A6%E7%BF%92\">強化学習</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">まとめ</a></li>\n</ul>\n<h1 id=\"機械学習の勉強を真面目にはじめました。\">機械学習の勉強を真面目にはじめました。</h1>\n<p>今回しっかりと基礎から見直そうと思い、入門書を精読することにしました。\n具体的には上記の本を精読し、しっかりとゼロから作っていこうかと。\nなんとなく難しかったところとかを適当にまとめたり、シンプルにようやくしたりします。</p>\n<h1 id=\"ニューラルネットワーク\">ニューラルネットワーク</h1>\n<h3 id=\"入力ネットワークの構造\">入力ネットワークの構造</h3>\n<p>入力層、隠れ層、出力層に分けられる。\n入力層は例えば、28x28の画像であれば、28x28=784の入力。\n隠れ層は何層重ねてもよく、さらにどれだけ縮小しても拡大しても良い。\n出力層はクラス分類問題であれば、クラスの数となる。\n行列計算と非常に相性が良い構造である。</p>\n<h3 id=\"活性化関数\">活性化関数</h3>\n<ul>\n<li>シグモイド関数</li>\n<li>ステップ関数</li>\n<li>ReLU関数</li>\n<li>ソフトマックス関数</li>\n<li>恒等関数</li>\n</ul>\n<p>これらを回帰問題か分類問題かなどに応じて使い分ける。\n主に、重みを付与しながらの層から層への情報伝播の後、\n各層で行われる処理はこのような関数による変換。</p>\n<h3 id=\"バッチ処理\">バッチ処理</h3>\n<p>一回に入力する量を増やす処理。\n画像であれば、何枚もの画像を別次元に格納する。\nこの処理により高速化の恩恵が得られる。</p>\n<h1 id=\"データの学習\">データの学習</h1>\n<h3 id=\"損失関数\">損失関数</h3>\n<p>損失関数とは機械学習における目標値である。\n損失関数から出力される値を最小化することを目標に機械は学習を行う。\n主に用いられる関数として下記のものがあげられる。</p>\n<ul>\n<li>二乗和誤差</li>\n<li>交差エントロピー誤差</li>\n</ul>\n<h3 id=\"勾配法\">勾配法</h3>\n<p>極小値にハマり学習の進まないプラトーという状況に陥ることに注意。\n毎回の学習の更新量を定めるパラメタを <strong>学習率</strong> と呼ぶ。\n学習率は人間があらかじめ設定する必要があるため <strong>ハイパーパラメタ</strong>\nと呼ばれる。</p>\n<h3 id=\"ここまでのまとめ\">ここまでのまとめ</h3>\n<p>まとめてみると学習の流れは</p>\n<ol>\n<li>ミニバッチ</li>\n<li>勾配の算出</li>\n<li>パラメタの更新</li>\n</ol>\n<p>これらを繰り返すことになる。この流れを確率的勾配降下法と呼ぶ。\nまた、ミニパッチ一回分の繰り返しを <strong>1epoch</strong> と呼ぶ</p>\n<h3 id=\"過学習\">過学習</h3>\n<p>学習に用いたデータセットに特化した学習を行ってしまい汎化能力が失われた状態。\nこの状態を避けるために学習データとテストデータを分け、\n定期的にテストデータの認識精度も測ることで、\n両方の認識精度が向上していることを確認する必要がある。</p>\n<h2 id=\"誤差逆伝播backpropagation\">誤差逆伝播(backpropagation)</h2>\n<p>微分値によってパラメタを進める方向、量を決めるが、\n微分は一般的に重たい計算のため、高速化するために誤差逆伝播法を用いる。\nこれは各計算を分解、独立化し、chain ruleによって、\n独立した計算それぞれに対する微分を考えていくことで、\n行列計算として微分計算を行えると言う利点がある。\n隠れ層での行列の形状を変化させる計算をAffineレイヤと呼び、\nAffineレイヤを含む、上記の活性化関数それぞれに対し、\n独立して計算済みのレイヤを実装していくことで、\n部品を組み立てるようにニューラルネットワークを実装することができ、\nかつ高速に微分計算を行うことができる。</p>\n<h4 id=\"勾配確認\">勾配確認</h4>\n<p>実装の難しい誤差逆伝播法のバリデーションのため、\n実装の簡単な数値微分の結果と比較すること。</p>\n<h2 id=\"最適化手法\">最適化手法</h2>\n<p>パラメタの更新のことを最適化と呼ぶ。</p>\n<ul>\n<li>確率的勾配降下法(SGD)</li>\n<li>Momentum</li>\n<li>AdaGrad</li>\n<li>Adam</li>\n</ul>\n<p>上記の4つをこの書籍では取り上げていた。</p>\n<h5 id=\"sgd\">SGD</h5>\n<p>最もシンプルな手法。\n勾配に学習率をかけたものを次のパラメタ更新に用いる。\n欠点として、最小値までの傾斜が等方的でない場合、\nジグザグな動きをすることとなり、学習スピードが遅くなる。</p>\n<h5 id=\"momentum\">Momentum</h5>\n<p>前回の学習スピードを保持することで、\n同じ方向に進むときは加速度的に進み、\nジグザグな動きをするときはSGDと比べて減速するようにした。</p>\n<h5 id=\"adagrad\">AdaGrad</h5>\n<p>学習率を定数ではなく変数にする。\n過去全ての更新量を記憶し、そのぶん学習率を小さくしていく。\n欠点として、学習に長時間かかった場合、学習率が0に近づき、\n学習が進まなくなることが挙げられるが、それを改善したRMSProp\nと言う手法も存在する。</p>\n<h5 id=\"adam\">Adam</h5>\n<p>直感的にはMomentumとAdaGradを組み合わせたようなものらしい</p>\n<h3 id=\"重みの初期値\">重みの初期値</h3>\n<h5 id=\"1を標準偏差としたガウス分布\">1を標準偏差としたガウス分布</h5>\n<p>0と1にアクティベーション(各レイヤの出力)が固まることから\n勾配消失が起きているとわかる。</p>\n<h5 id=\"0001を標準偏差としたガウス分布\">0.001を標準偏差としたガウス分布</h5>\n<p>0.5付近に固まるため、勾配消失は怒っていないが、\nその代わり表現力が小さくなっている。\nある値にアクティベーションが集まると、\n単一のレイヤで全てのレイヤを表現できてしまうと言う問題や、\n学習が効率よくいかない問題が挙げられる。</p>\n<h5 id=\"xavierの初期値\">Xavierの初期値</h5>\n<p>前層のノードの数に準じて初期値を小さくする手法。\n活性化関数が線形関数(線形関数に近似される関数)の際に用いられる。</p>\n<h5 id=\"heの初期値\">Heの初期値</h5>\n<p>Xavierに2倍の広がりをもたせたもの。\n非線形関数に用いられる。</p>\n<h3 id=\"batch-normalization\">Batch Normalization</h3>\n<p>データを綺麗な分布にならす手法。\nAffineレイヤと活性化関数レイヤの間に\nBatch Normalizationレイヤを入れて使用する。</p>\n<ul>\n<li>学習スピードの増加</li>\n<li>初期値に対する依存度の減少</li>\n<li>過学習の抑制</li>\n</ul>\n<p>などの効果がある。</p>\n<h3 id=\"正則化\">正則化</h3>\n<p>過学習を抑制するための手法</p>\n<h5 id=\"weight-decay荷重減衰\">Weight decay(荷重減衰)</h5>\n<p>損失関数に重みに準じた量を加算することで、\n大きな重みを持つことにペナルティを課す。</p>\n<h5 id=\"dropout\">Dropout</h5>\n<p>確率で、ノードを消去することで何かうまいこと過学習が抑制されるらしい。</p>\n<h1 id=\"畳み込みニューラルネットワークcnn\">畳み込みニューラルネットワーク(CNN)</h1>\n<p>主に画像に用いられるニューラルネットワーク。\n昔のモデル(ここまで考えてきたモデル)では、\nAffineレイヤで前層の出力を全結合していたが、\nその部分をConvolutionレイヤで置き換え、\n必要に応じて、活性化関数適用後の出力にPoolingレイヤを挟むことで\nAffineレイヤの形状無視と言う欠点を補う。</p>\n<h3 id=\"convolutionレイヤ\">Convolutionレイヤ</h3>\n<p>形状を考えるために、入力データに対して、\n<strong>フィルター(カーネル)</strong> を用いた結合を行う。\nフィルターは入力データと同じチャンネル数で、任意のサイズを持つ。\nフィルターのサイズと、\n入力データに対する <strong>パティング</strong> 、フィルターの <strong>ストライド</strong> によって\n出力データのサイズが決定する。\n一つのフィルターに対して、出力データのチャンネル数は常に1つのため、\n複数のフィルターを用意して、出力データのチャンネル数を調整する。</p>\n<h3 id=\"poolingレイヤ\">Poolingレイヤ</h3>\n<p>サイズを小さくするための演算。\nある範囲の最も大きな値のみ抽出していくMaxPoolingが画像処理の分野では主流である。\nPoolingレイヤの特徴は以下の3つに代表される。</p>\n<ul>\n<li>学習するパラメータがない</li>\n<li>チャンネル数は変化しない</li>\n<li>微小な位置変化に対してロバスト</li>\n</ul>\n<h3 id=\"cnnの特徴？\">CNNの特徴？</h3>\n<p>フィルターが前半の層では低次元のエッジなどを抽出していくのに対し、\n後半のフィルターは高次元の犬の顔などを抽出し始めるらしい。\nこれは層を多くすることによって、出力までの下準備をそれまでのレイヤで\n丹念にできることに起因するとかしないとか。</p>\n<h3 id=\"代表的なcnn\">代表的なCNN</h3>\n<h5 id=\"lenet\">LeNet</h5>\n<p>1998年初めてのCNN？基本的な構造は今使われているものと同じだが、\nPoolingレイヤでMaxPoolingを行なっているわけではないらしいのと、\n活性化関数がSigmoid関数らしい。</p>\n<h5 id=\"alexnet\">AlexNet</h5>\n<p>2012年に彗星のごとくコンペティションに現れ、\n圧倒的な成績でトロフィーと話題をさらっていったAlexNetさんです。\n機械学習ブームの火付け役をしてくれたらしいですね。LeNetと比べると</p>\n<ul>\n<li>活性化関数にReLU関数を用いる</li>\n<li>LRNと言う局所的正規化を行う関数を挟む</li>\n<li>Dropoutを使用する</li>\n</ul>\n<p>松尾教授の書籍を読んだ時、うろ覚えですが、確かこのDropoutが\n革新的だったといっていたような気がします。うろ覚えなので突っ込まないでください。</p>\n<h1 id=\"ディープラーニング\">ディープラーニング</h1>\n<h3 id=\"層を厚くすると言うこと\">層を厚くすると言うこと</h3>\n<ul>\n<li>表現力の増加</li>\n<li>表現するために必要な学習パラメタの減少</li>\n<li>学習時間は増加</li>\n</ul>\n<p>こんな感じのメリットデメリットがあるらしい。\n表現力の増加とあるが、実際、MNISTの認識では2層くらいのモデルが\n最も高精度らしく、表現力がどの程度必要なのかも考えなければならない。\nちなみに2015年のクラス分類コンペティションの優勝モデルは\n150層とか言う馬鹿げたレベルのディープさだったそうな。</p>\n<h3 id=\"有名なネットワーク\">有名なネットワーク</h3>\n<h5 id=\"vgg\">VGG</h5>\n<p>CNNの基本型らしい。3x3の小さなフィルターでなんども畳み込むそうな。</p>\n<h5 id=\"googlelenet\">GoogleLeNet</h5>\n<p>基本的に層をディープにするといったら、伝播方向っぽいんだけど、\nGoogleさんは横方向にも伸ばしてしまったそうな。\n<strong>インセプション構造</strong> と呼ぶらしく、複数のサイズのフィルターで\nたたみ込んでその結果を結合するそうな。</p>\n<h5 id=\"resnet\">ResNet</h5>\n<p>GoogleがきてMSが来ないわけがない。\nこれがさっき言ったアホみたいに層を深くした150層ネットワーク。\nレイヤを通した出力とレイヤを通す前の入力の合計をその層の出力とする\nスキップ構造と呼ばれるものを用いることで、\n勾配消失問題を克服して、層をものごっつ厚くできたそうな。</p>\n<h3 id=\"転移学習\">転移学習</h3>\n<p>すでに学習済みのパラメタをそのまま初期値として用いて、\n次の学習を行う手法のこと。少ないデータセットしか手元にない時とかいいらしい。</p>\n<h3 id=\"最近ディープラーニングで行われていること\">最近ディープラーニングで行われていること</h3>\n<ul>\n<li>物体検出(物体認識の適用範囲検索と物体認識の結合)</li>\n<li>セグメンテーション(ピクセルレベルでのクラス分類)</li>\n<li>画像キャプション生成(CNNとRNNの結合)</li>\n<li>画像スタイル変換(中間出力とのloss)</li>\n<li>画像生成(DCGAN)</li>\n</ul>\n<h3 id=\"強化学習\">強化学習</h3>\n<p>エージェント(computer)が環境から得られる報酬を\n最大化するように動いていくのかな？\nゲームとかでやってるらしい。\nパックマンをコンピューターにやらせたらもう人は勝てないらしい。\nとりあえず強化学習にはまた独自のアルゴリズムがあるっぽくて(Q学習？)\nそれとCNNを融合させることでDeep Q-Networkとか言うすごい奴が生まれたらしい。</p>\n<h1 id=\"まとめ\">まとめ</h1>\n<p>特殊な用語がたくさん出てきたので、\nとりあえずこの分野に入るときには一回真面目に入門書を読むべきと感じました。</p>","ogImage":{"url":"/assets/blog/dynamic-routing/cover.jpg"},"coverImage":"/assets/blog/dynamic-routing/cover.jpg"}},"__N_SSG":true}