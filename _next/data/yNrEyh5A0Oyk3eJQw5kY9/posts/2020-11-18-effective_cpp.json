{"pageProps":{"post":{"title":"modern C++erの流儀","date":"2020-11-23","slug":"2020-11-18-effective_cpp","author":{"name":"JJ Kasper","picture":"/assets/blog/authors/jj.jpeg"},"content":"<h1 id=\"モチベーション\">モチベーション</h1>\n<p>私は業務でC++を使用している。\n聞いて驚いてほしいことに最近までのC++のコンパイラはC++98までしか理解しないものだった。\n過去形ということでお気づきだと思うが、つい最近、\nと言っても数ヶ月前だがコンパイラを新しいものに変えC++11をコンパイルする準備ができた。\n私はまだC++を使い始めて1年経っておらず、C++98の範囲でさえ分かっているとは言い難い状況だが、\n嫌だからこそ、この機にモダンなC++の書き方というものを学びたく思い\n<a href=\"https://www.oreilly.co.jp/books/9784873117362/\">Effective Modern C++</a> を購入した。\nやや嘘をついた、上述の本を購入したのは実はC++を学び始めてすぐで1年ほど前である。\nC++初学者であった私にこの書籍はあまりに難しく当時は挫折した。\n1年の修行期間を経てリベンジした結果なんとか完走することができたので、\n実際に自分が使いそうなものや覚えておいた方が良さそうなことをここにまとめる。</p>\n<h1 id=\"effective-modern-c\">Effective Modern C++</h1>\n<h2 id=\"目次\">目次</h2>\n<ul>\n<li><a href=\"#%E5%9E%8B%E6%8E%A8%E8%AB%96%E3%81%AB%E3%81%BE%E3%81%A4%E3%82%8F%E3%82%8B%E6%B5%81%E5%84%80\">型推論にまつわる流儀</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%81%A8auto\">テンプレートとauto</a>\n<ul>\n<li><a href=\"#_paramtype_%E3%81%8C%E5%8F%82%E7%85%A7%E3%82%82%E3%81%97%E3%81%8F%E3%81%AF%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF%E3%81%A0%E3%81%8C%E3%83%A6%E3%83%8B%E3%83%B4%E3%82%A1%E3%83%BC%E3%82%B5%E3%83%AB%E5%8F%82%E7%85%A7%E3%81%A7%E3%81%AF%E3%81%AA%E3%81%84\">_ParamType_が参照もしくはポインタだがユニヴァーサル参照ではない</a></li>\n<li><a href=\"#paramtype-%E3%81%8C%E3%83%A6%E3%83%8B%E3%83%B4%E3%82%A1%E3%83%BC%E3%82%B5%E3%83%AB%E5%8F%82%E7%85%A7%E3%81%A7%E3%81%82%E3%82%8B\"><em>ParamType</em> がユニヴァーサル参照である</a></li>\n<li><a href=\"#paramtype-%E3%81%8C%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF%E3%81%A7%E3%82%82%E5%8F%82%E7%85%A7%E3%81%A7%E3%82%82%E3%81%AA%E3%81%84\"><em>ParamType</em> がポインタでも参照でもない</a></li>\n<li><a href=\"#%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF%E3%81%B8%E3%81%AE%E6%88%90%E3%82%8A%E4%B8%8B%E3%81%8C%E3%82%8A\">ポインタへの成り下がり</a></li>\n<li><a href=\"#auto%E3%81%A8%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E6%8E%A8%E8%AB%96%E3%81%AE%E5%B7%AE%E7%95%B0\">autoとテンプレート推論の差異</a></li>\n<li><a href=\"#%E6%98%8E%E7%A4%BA%E7%9A%84%E5%9E%8B%E5%AE%A3%E8%A8%80%E3%82%88%E3%82%8A%E3%82%82auto%E3%82%92%E5%84%AA%E5%85%88%E3%81%99%E3%82%8B\">明示的型宣言よりもautoを優先する</a></li>\n</ul>\n</li>\n<li><a href=\"#decltype\">decltype</a>\n<ul>\n<li><a href=\"#decltype%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9\">decltypeの注意点</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF%E3%81%AB%E3%81%BE%E3%81%A4%E3%82%8F%E3%82%8B%E6%B5%81%E5%84%80\">ポインタにまつわる流儀</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#stdunique_ptr\">std::unique_ptr</a></li>\n<li><a href=\"#stdshared_ptr\">std::shared_ptr</a></li>\n<li><a href=\"#stdweak_ptr\">std::weak_ptr</a></li>\n<li><a href=\"#new%E3%81%AE%E5%8F%AF%E8%83%BD%E3%81%AA%E7%AF%84%E5%9B%B2%E3%81%A7%E3%81%AE%E6%92%B2%E6%BB%85\">newの可能な範囲での撲滅</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#move%E3%81%AB%E3%81%BE%E3%81%A4%E3%82%8F%E3%82%8B%E6%B5%81%E5%84%80\">moveにまつわる流儀</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#stdmove-stdforward\">std::move, std::forward</a></li>\n<li><a href=\"#%E3%83%A6%E3%83%8B%E3%83%B4%E3%82%A1%E3%83%BC%E3%82%B5%E3%83%AB%E5%8F%82%E7%85%A7-%E5%8F%B3%E8%BE%BA%E5%80%A4%E5%8F%82%E7%85%A7\">ユニヴァーサル参照, 右辺値参照</a></li>\n<li><a href=\"#%E5%8F%B3%E8%BE%BA%E5%80%A4%E5%8F%82%E7%85%A7%E3%81%AA%E3%82%89stdmove-%E3%83%A6%E3%83%8B%E3%83%B4%E3%82%A1%E3%83%BC%E3%82%B5%E3%83%AB%E5%8F%82%E7%85%A7%E3%81%AA%E3%82%89stdforward\">右辺値参照ならstd::move, ユニヴァーサル参照ならstd::forward</a></li>\n<li><a href=\"#%E3%83%A6%E3%83%8B%E3%83%B4%E3%82%A1%E3%83%BC%E3%82%B5%E3%83%AB%E5%8F%82%E7%85%A7%E3%82%92%E3%81%A8%E3%82%8B%E3%82%AA%E3%83%BC%E3%83%90%E3%83%BC%E3%83%AD%E3%83%BC%E3%83%89%E3%81%AE%E6%92%B2%E6%BB%85\">ユニヴァーサル参照をとるオーバーロードの撲滅</a></li>\n<li><a href=\"#%E5%8F%82%E7%85%A7%E3%81%AE%E5%9C%A7%E7%B8%AE\">参照の圧縮</a></li>\n<li><a href=\"#%E5%AE%8C%E5%85%A8%E8%BB%A2%E9%80%81\">完全転送</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E3%83%A2%E3%83%80%E3%83%B3c%E3%81%AE%E6%B5%81%E5%84%80\">モダンC++の流儀</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%E5%88%9D%E6%9C%9F%E5%8C%96%E5%AD%90%E3%81%AE%E7%B5%B1%E4%B8%80\">初期化子の統一</a></li>\n<li><a href=\"#nullptr\">nullptr</a></li>\n<li><a href=\"#%E3%82%A8%E3%82%A4%E3%83%AA%E3%82%A2%E3%82%B9%E5%AE%A3%E8%A8%80\">エイリアス宣言</a></li>\n<li><a href=\"#scoped-enum\">scoped enum</a></li>\n<li><a href=\"#%E6%9C%AA%E5%AE%9A%E7%BE%A9private%E9%96%A2%E6%95%B0%E3%81%AE%E6%92%B2%E6%BB%85\">未定義private関数の撲滅</a></li>\n<li><a href=\"#override%E3%81%AE%E5%AE%A3%E8%A8%80\">overrideの宣言</a></li>\n<li><a href=\"#const_iterator\">const_iterator</a></li>\n<li><a href=\"#noexcept-constexpr\">noexcept, constexpr</a>\n<ul>\n<li><a href=\"#noexcept\">noexcept</a></li>\n<li><a href=\"#constexpr\">constexpr</a></li>\n</ul>\n</li>\n<li><a href=\"#%E8%A6%81%E7%B4%A0%E3%81%AE%E6%8C%BF%E5%85%A5-%E7%9B%B4%E6%8E%A5%E9%85%8D%E7%BD%AE\">要素の挿入, 直接配置</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"型推論にまつわる流儀\">型推論にまつわる流儀</h2>\n<h4 id=\"テンプレートとauto\">テンプレートとauto</h4>\n<p>型推論を行う代表的な場面がテンプレートを使用した場合とautoを宣言した場合となる。\nテンプレートとautoの型推論は基本的に同じものであるため、\nまずはテンプレートを例にとってどの様な型推論が行われるか理解する。</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>ParamType param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span>expr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>この場合 <em>T</em> の推論には呼び出しの型だけではなく <em>ParamType</em> の型にも左右される。\n具体的には以下の様に場合分けできる</p>\n<ul>\n<li><em>ParamType</em> が参照もしくはポインタだがユニヴァーサル参照ではない</li>\n<li><em>ParamType</em> がユニヴァーサル参照である</li>\n<li><em>ParamType</em> がポインタでも参照でもない</li>\n</ul>\n<h5 id=\"_paramtype_が参照もしくはポインタだがユニヴァーサル参照ではない\">_ParamType_が参照もしくはポインタだがユニヴァーサル参照ではない</h5>\n<ol>\n<li><em>expr</em> が参照型ならば、参照性を無視する</li>\n<li><em>expr</em> の型を <em>ParamType</em> とパターンマッチングし、 <strong>T</strong> を決定する</li>\n</ol>\n<h5 id=\"paramtype-がユニヴァーサル参照である\"><em>ParamType</em> がユニヴァーサル参照である</h5>\n<ul>\n<li><em>expr</em> が左辺値ならば、 <strong>T</strong> も <em>ParamType</em> も左辺値参照と推論される</li>\n<li><em>expr</em> が右辺値ならば、先述の規則が適用される</li>\n</ul>\n<h5 id=\"paramtype-がポインタでも参照でもない\"><em>ParamType</em> がポインタでも参照でもない</h5>\n<ol>\n<li><em>expr</em> の型が参照ならば、参照性を無視する</li>\n<li>参照性を無視した <em>expr</em> の型が <strong>const</strong> , <strong>volatile</strong> であればこれを無視する</li>\n</ol>\n<h5 id=\"ポインタへの成り下がり\">ポインタへの成り下がり</h5>\n<p>配列または関数実引数はテンプレートの型推論時にポインタに成り下がる</p>\n<h5 id=\"autoとテンプレート推論の差異\">autoとテンプレート推論の差異</h5>\n<p>autoとテンプレートの型推論はほとんど同一のアルゴリズムで解決される。\nただ一つの違いはautoが波括弧で囲んだ初期化子をstd::initilizer_listと <em>想定する</em> のに対し、\nテンプレートの型推論は想定しないと言う点だ。</p>\n<h5 id=\"明示的型宣言よりもautoを優先する\">明示的型宣言よりもautoを優先する</h5>\n<ul>\n<li>autoで宣言した変数は初期化する必要があり未定義動作を防げる</li>\n<li>一般に可搬性や効率に関する問題を引き起こす型の不一致を防げる</li>\n<li>型の暗黙的変換が行われないため意図的に変更させる必要があり可読性が上がる(明示的片付け初期化子の使用)</li>\n<li>リファクタリングを容易にする</li>\n<li>タイプ量が減る</li>\n<li>プロクシ型はautoに誤った型を推論させるので注意する</li>\n</ul>\n<h4 id=\"decltype\">decltype</h4>\n<p>decltype は変数を与えるとその型を返す関数である。</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// decltype(v) is vector&#x3C;int></span>\n</code></pre>\n<p>使用用途として戻り型が仮引数の型により決定される関数テンプレートの宣言が挙げられる。</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// c++11 version</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">Container</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">Index</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">auto</span> <span class=\"token function\">sampleContainerAccesser</span><span class=\"token punctuation\">(</span>Container<span class=\"token operator\">&#x26;</span> c<span class=\"token punctuation\">,</span> Index i<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// c++14 version</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">Container</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">Index</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token punctuation\">)</span> <span class=\"token function\">sampleContainerAccesser</span><span class=\"token punctuation\">(</span>Container<span class=\"token operator\">&#x26;</span> c<span class=\"token punctuation\">,</span> Index i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>上記の記法は <strong>戻り型の後置</strong> (trailing return type) と呼ばれているものである。\n上記の例は改良の余地があり、一つは右辺値を受け付ける必要があること、\nもう一つは返り値を必要なら右辺値にする方が効率が良いことだ。それらを反映させると</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// c++11 version</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">Container</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">Index</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">auto</span> <span class=\"token function\">sampleContainerAccesser</span><span class=\"token punctuation\">(</span>Container<span class=\"token operator\">&#x26;&#x26;</span> c<span class=\"token punctuation\">,</span> Index i<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">forward</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span>Container<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">forward</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span>Container<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// c++14 version</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">Container</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> <span class=\"token class-name\">Index</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token punctuation\">)</span> <span class=\"token function\">sampleContainerAccesser</span><span class=\"token punctuation\">(</span>Container<span class=\"token operator\">&#x26;</span> c<span class=\"token punctuation\">,</span> Index i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">forward</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span>Container<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>std::forwardについては後続の説明に記載予定。</p>\n<h5 id=\"decltypeの注意点\">decltypeの注意点</h5>\n<p>変数を括弧で囲むと参照が付与されてしまうので注意。</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// -> int</span>\n<span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// -> int&#x26;</span>\n</code></pre>\n<h2 id=\"ポインタにまつわる流儀\">ポインタにまつわる流儀</h2>\n<h4 id=\"stdunique_ptr\">std::unique_ptr</h4>\n<p>独立するリソースの管理には std::unique_ptr を使用する。\nstd::unique_ptrはムーブ専用型であり、独占所有セマンティクスを所有する。</p>\n<p>std::unique_ptrのインターフェースは二つあり、カスタムデリータを引数にとるものと取らないものがある。\nカスタムデリータにはラムダ式を使用した方が時間、空間計算量が優れる。\nカスタムデリータを用いる際の注意点としてstd::unique_ptr 自体のメモリ使用量が増加することが挙げられる。</p>\n<p>std::unique_ptrの大きな魅力は独占所有権を有しながら、std::shared_ptrへの変換が簡単なことだ。\nこれはfactory関数の戻り型としてstd::unique_ptrが非常に優れている理由となる。\n関数側からはポインタが共有されるべきか独占されるべきか判断できないため、\n呼び出し側で好きに置き換えが可能なことで柔軟性を保持している。</p>\n<h4 id=\"stdshared_ptr\">std::shared_ptr</h4>\n<p>共同所有権を必要とするリソースの管理にはstd::shared_ptrを利用する。\nstd::shared_ptrはreference countから地震がそのリソースを指す最後のポインタか否かを判断できる。\n即ちstd::shared_ptrのコンストラクタはreference countをインクリメントし、\nデストラクタはデクリメントする。</p>\n<p>reference countを保持することでrawポインタと比較して性能面に負債を背負うこととなる。</p>\n<ul>\n<li>std::shared_ptrのサイズがrawポインタの2倍になる</li>\n<li>reference countをダイナミックにメモリ割り当てする必要がある\n<ul>\n<li>std::make_sharedの利用により回避できる</li>\n</ul>\n</li>\n<li>reference countのincrement/decrementはアトミックに実行する必要がある\n<ul>\n<li>move演算をすることによってreference countを操作しなくて済む</li>\n</ul>\n</li>\n</ul>\n<p>std::shared_ptrもstd::unique_ptrと同様にカスタムデリータを指定できる。\nこれら二つのカスタムデリータを指定したスマートポインタは型にデリータを含むかどうかで差異が存在する。</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// deleter type is part of ptr type</span>\nstd<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&#x3C;</span>Widget<span class=\"token punctuation\">,</span> <span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>loggingDel<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token function\">upw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Widget<span class=\"token punctuation\">,</span> loggingDel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// deleter type is not part of ptr type</span>\nstd<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&#x3C;</span>Widget<span class=\"token operator\">></span> <span class=\"token function\">spw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Widget<span class=\"token punctuation\">,</span> loggingDel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>これらはポインタの取り回しの柔軟性にも差異を与える。\n例えばコンテナ型に上記のポインタを代入することを考えると、\nstd::unique_ptrは全て同一のカスタムデリータを指定しない限りコンテナにまとめることができないが、\nstd::shared_ptrは自由にカスタムデリータを指定できる。</p>\n<p>std::shared_ptrはreference countを含むコントロールブロックと呼ばれるデータを所有している。\nコントロールブロック内にカスタムデリータのデータも含まれるため、\nstd::shared_ptrはstd::unique_ptrと違いカスタムデリータを指定してもサイズが大きくならない。</p>\n<p>コントロールブロックは対象オブジェクトを指すstd::shard_ptrを最初に作成した関数が設定する。\nただし、一般にstd::shared_ptrが既に存在しているかを知る方法はないため、下記のルールを適用する。</p>\n<ul>\n<li>std::make_sharedは常にコントロールブロックを作成する</li>\n<li>所有権が一意なポインタからstd::shared_ptrを作成した場合は常にコントロールブロックを作成する</li>\n<li>rawポインタを与えstd::shared_ptrコンストラクタを呼び出した場合はコントロールブロックを作成する</li>\n</ul>\n<p>上記のルールからrawポインタをコンストラクタに複数か渡すことで\nバグの温床と非効率なコードが生成されることとなる。\n上述の理由からクラス設計において自身のポインタ <strong>this</strong> を使用したいシーンがあるが、\nその際にstd::shared_ptrのコンストラクタへthisを渡していないか注意する必要がある。\n自身のポインタをstd::shared_ptrとして扱う必要がある場合は基底クラステンプレートとして\nstd::enbale_shared_from_thisクラスを利用し、thisの代わりにshard_from_this()を使用する。</p>\n<h4 id=\"stdweak_ptr\">std::weak_ptr</h4>\n<p>std::shared_ptrのように振る舞いながらも、対象リソースの所有権を共有しない\nスマートポインタが有用になる場面がある。\nこの種のスマートポインタは対象が破棄された場合を考え、ポインタが不正(dangle)になったことを追跡管理し、\n問題に対応すル必要がある。\nこれらを賄うC++のスマートポインタがstd::weak_ptrとなる。</p>\n<p>std::weak_ptrは必ずstd::shared_ptrに付随して使用される。\nstd::weak_ptrのコンストラクタにstd::shared_ptrを作成した時点から両者は同じメモリ上の位置を指し示す。\nただし、std::weak_ptrは対象オブジェクトのreference countには影響を及ぼさない。</p>\n<p>不正ポインタとなったstd::weak_ptrを <strong>expireされた</strong> と表現する。\nスマートポインタが不正かどうかを判定するには <code>wpw.expired()</code> を呼び出せば良いが、\n一般に不正判定する目的は対象オブジェクトに無事アクセスできるかを確認することであり、\n不正判定からアクセスまでの一連の処理がアトミックに行われる必要がある。\nこれを実現するためにはstd::weak_ptrをstd::shared_ptrに変換してやれば良い。\n<code>wpw.lock()</code> を用いて初期化する方法とstd::shared_ptrのコンストラクタに直接渡す方法がある。</p>\n<p>std::weak_ptrは不正になる可能性のあるstd::shared_ptrライクなポインタで使用し、\n具体的な利用先としては下記のようなパターンが挙げられる。</p>\n<ul>\n<li>キャッシュ</li>\n<li>observer リスト</li>\n<li>std::shared_ptrの循環防止</li>\n</ul>\n<h4 id=\"newの可能な範囲での撲滅\">newの可能な範囲での撲滅</h4>\n<p>newを回避するためにstd::make_uniqueとstd::make_sharedを積極的に使用する。\nただし、std::make_uniqueについてはC++14以降に追加された関数のため、以下に実装例を記す。</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Ts<span class=\"token operator\">></span>\nstd<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&#x3C;</span>T<span class=\"token operator\">></span> <span class=\"token function\">make_unique</span><span class=\"token punctuation\">(</span>Ts<span class=\"token operator\">&#x26;&#x26;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">unique_ptr</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span>T<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">T</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">forward</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span>Ts<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>std namespaceに上記関数を置いた場合、C++14にアップグレードした際に衝突するため注意。</p>\n<p>newの直接使用と比較してmake関数はソースコードの重複を避け、例外安全性を向上できる。\nまた、std::make_sharedおよびstd::allocate_sharedでは高速化つサイズの小さなコードを生成できる。</p>\n<p>make関数を使用できないシーンにはカスタムデリータを指定する場合と波括弧による初期化を目的とする場合の\n二つがある。</p>\n<p>std::shared_ptrの場合ではmake関数が適切でない場面が増え、専用のメモリ管理を実装したクラスや、\nメモリに特別な注意が必要なシステム、巨大オブジェクト、\n対応するstd::shared_ptrとは異なるライフタイムを持つstd::weak_ptrなどが挙げられる。</p>\n<h2 id=\"moveにまつわる流儀\">moveにまつわる流儀</h2>\n<h4 id=\"stdmove-stdforward\">std::move, std::forward</h4>\n<p>std::moveおよびstd::forwardはキャストを実行する関数にすぎず、関数内でムーブ演算は実行されない。</p>\n<p>std::moveは右辺値への無条件キャストを実行する。</p>\n<p>std::forwardは実引数が右辺値にバインドされている場合に限り、その実引数を右辺値へキャストする。</p>\n<p>std::moveもstd::forwardもプログラム実行時には何も実行しない。</p>\n<h4 id=\"ユニヴァーサル参照-右辺値参照\">ユニヴァーサル参照, 右辺値参照</h4>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>Widget<span class=\"token operator\">&#x26;&#x26;</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// rvalue reference</span>\n\nWidget<span class=\"token operator\">&#x26;&#x26;</span> var1 <span class=\"token operator\">=</span> <span class=\"token function\">Widget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// rvalue reference</span>\n\n<span class=\"token keyword\">auto</span><span class=\"token operator\">&#x26;&#x26;</span> var2 <span class=\"token operator\">=</span> var1<span class=\"token punctuation\">;</span>              <span class=\"token comment\">// universal reference</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&#x3C;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&#x26;&#x26;</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// rvalue reference</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&#x26;&#x26;</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// universal reference</span>\n</code></pre>\n<p>上記のコードから察せられるように「T&#x26;&#x26;」には二つの意味がある。\n一つは右辺値参照であり、もう一つは右辺値参照か左辺値参照のどちらか一方を表すことである。\n後者は型推論を伴うTに対し右辺値参照の記法を用いた際に発動する構文であり、\n参照の初期化を行う際の初期化子が右辺値なら右辺値参照を、\n左辺値なら左辺値参照をを表す。</p>\n<h4 id=\"右辺値参照ならstdmove-ユニヴァーサル参照ならstdforward\">右辺値参照ならstd::move, ユニヴァーサル参照ならstd::forward</h4>\n<p>std::moveは右辺値参照に対し、std::forwardは最後に使用するユニヴァーサル参照に対し、\nそれぞれ実行するべきである。\nこれは値戻しする関数から返す右辺値参照、ユニヴァーサル参照についても同様のことが言える。</p>\n<p>ただし、 <strong>戻り値の最適化(return value optimization, RVO)</strong> が適用される関数ではその限りではない。\nRVOとは値戻しの関数において下記条件を満たした際にコピーを省略する仕様のことである。</p>\n<ul>\n<li>ローカルオブジェクトの型が関数の戻り値の型に一致している</li>\n<li>戻り値となるのがそのローカルオブジェクトである</li>\n</ul>\n<p>この場合、std::move等を返り値に適用してしまうとRVOが発動せず結果的に効率の悪いコードになってしまう。</p>\n<h4 id=\"ユニヴァーサル参照をとるオーバーロードの撲滅\">ユニヴァーサル参照をとるオーバーロードの撲滅</h4>\n<p>ユニヴァーサル参照をとるオーバーロードを加えると、予想以上に多くの場面で、\nほぼ常にユニヴァーサル参照をとるオーバーロードが呼び出される。\n完全転送コンストラクタは特に問題になる。非constな左辺値をとるコピーコンストラクタよりも\n一致度が高くなるのが通例であり、派生クラスからの基底クラスの\nコピー/ムーブコンストラクタ呼び出しをのっとってしまうためである。</p>\n<p>ユニヴァーサル参照をとるオーバーロードの代替策としては</p>\n<ul>\n<li>オーバーロードしない</li>\n<li>const T&#x26;を渡す</li>\n<li>値を渡す</li>\n<li>タグディスパッチを用いる</li>\n</ul>\n<p>がある。</p>\n<h4 id=\"参照の圧縮\">参照の圧縮</h4>\n<p>参照の圧縮とは型推論などの過程で参照の参照をコンパイラが生成した際に、\n単一の参照に変換する動作のことである。\n<em>二つある参照のいずれかが左辺値参照であれば、圧縮結果は左辺値参照となる。二つとも右辺値参照の場合は、圧縮結果は右辺値参照となる。</em></p>\n<p>参照の圧縮が発生する場面は4つある。</p>\n<ul>\n<li>テンプレートのインスタンス化</li>\n<li>autoの型生成</li>\n<li>typedefとエイリアス宣言の使用と作成</li>\n<li>decltype</li>\n</ul>\n<h4 id=\"完全転送\">完全転送</h4>\n<p>完全転送とはある関数が仮引数を他の関数へ渡す挙動であり、単なる転送と異なり、\n仮引数のオブジェクトの性質(オブジェクトの型、左辺値か右辺値かなど)も転送する。\n使用例としては下記のようになる。</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">typename</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Ts<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">fwd</span><span class=\"token punctuation\">(</span>Ts<span class=\"token operator\">&#x26;&#x26;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">forward</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span>Ts<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>完全転送はほとんどの場合意図通りに動作するが、まれに完全でない部分が露見する。\n条例の目的関数fと転送関数fwdでは、同じ実引数に対する両者の動作が異なると完全転送できない。</p>\n<p>完全転送できない場合は二つで、fwdの仮引数の方を推論できない、\nまたは誤った方を推論した場合、完全転送がエラーになる。</p>\n<p>完全転送のエラー原因となる実引数には、</p>\n<ul>\n<li>波括弧による初期化子</li>\n<li>ヌルポインタとして用いた0やNULL</li>\n<li>宣言のみのconst staticな汎整数メンバ変数</li>\n<li>テンプレート名</li>\n<li>オーバーロード関数名</li>\n<li>ビットフィールド</li>\n</ul>\n<p>などがある。</p>\n<h2 id=\"モダンcの流儀\">モダンC++の流儀</h2>\n<h4 id=\"初期化子の統一\">初期化子の統一</h4>\n<p>初期化の方法は大きく以下の三つの記法に分類される。</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> z<span class=\"token punctuation\">{</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>多くの場合、等号と波括弧は併用できるが、波括弧のみの時と同じのため等号はこの項では無視する。</p>\n<p>C++11になり、初期化子の統一記法を導入したことで\n波括弧による初期化が概ねどのような場面でも適用できるようになった。\nそのため、これまで等号と丸括弧を場面場面で使い分けていたコピー不可能なオブジェクトの初期化や、\n非スタティックなメンバ変数のdefault値の指定に加えて、等号と丸括弧では表現できなかった\nコンテナの初期要素の指定も全て波括弧を用いて行えるようになった。</p>\n<p>波括弧を用いることのもう一つのメリットとして <strong>精度が落ちる変換(narrowing conversion)</strong> を認めない\nという特徴がある。</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">{</span> x <span class=\"token operator\">+</span> y <span class=\"token operator\">+</span> z <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error!</span>\n</code></pre>\n<p>これは <strong>最も厄介な構文解析(most vexing parse)</strong> と呼ばれる問題を回避できる。</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">Widget <span class=\"token function\">w1</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// call Widget ctor with argument 10</span>\nWidget <span class=\"token function\">w2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// declares a function named w2 that returns a Widget</span>\n</code></pre>\n<p>波括弧の初期化子のデメリットはstd::initializer_listをとみなせる仮引数が渡された際に、\n見た目ではより高く一致するコンストラクタが他にあってもstd::initializer_listをとるコンストラクタに\n解決されてしまうことである。\nこれは混乱を生む場合がある。</p>\n<p>丸括弧と波括弧の選択が生む差異の例としては下記のようなものもある。</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// [5, 5, 5]</span>\n\nstd<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v2<span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// [3, 5]</span>\n</code></pre>\n<p>結局波括弧ではないと初期化できないものがある一方、丸括弧を用いないと混乱を招く初期化もあり、\nどちらの方を使うべきということはない。\n開発ルールを定めることが肝要である。</p>\n<p>ただし、他社が利用する可能性のあるライブラリの\nテンプレート関数内でのオブジェクト作成に際しては関数の挙動自体が左右されてしまうので\n単なる開発ルールにとどまらずよく吟味する必要がある。</p>\n<h4 id=\"nullptr\">nullptr</h4>\n<p><strong>0とNULLは常にint型である</strong>。<br>\n0やNULLをヌルポインタとして利用するしかなかったが、nullptrが実装されたためその必要性は無くなった。<br>\n<strong>nullptrはポインタ型である。</strong><br>\nそのためオーバーロードで妙な解決をされることもない。\n常にnullptrを使用すべきである。</p>\n<p>ただし、これまでと違いnullptrがあるからと言って汎整数型とポインタ型のオーバーロードを行うと\nこれまで動作していた呼び出し側で意図しないオーバーロード解決されてしまうことになりかねないので注意する。</p>\n<h4 id=\"エイリアス宣言\">エイリアス宣言</h4>\n<p>長ったらしい型宣言を簡略化する際のtypedefの上位互換としてエイリアス宣言が実装された。</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">typedef</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&#x3C;</span>std<span class=\"token double-colon punctuation\">::</span>unordered_map<span class=\"token operator\">&#x3C;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">>></span> UPtrMapSS<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> UPtrMapSS <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span>unique_ptr<span class=\"token operator\">&#x3C;</span>std<span class=\"token double-colon punctuation\">::</span>unordered_map<span class=\"token operator\">&#x3C;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">>></span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>FP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&#x26;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> FP <span class=\"token operator\">=</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&#x26;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>typedefはテンプレート化に対応していないが、エイリアス宣言は対応しているため、気持ちの悪いネストをする必要がなくなった。</p>\n<p>また、エイリアステンプレートを用いれば、「::type」や「typename」を排除できる。</p>\n<h4 id=\"scoped-enum\">scoped enum</h4>\n<p>C++98まではenum型はスコープを持たなかった。\nC++11ではこれが是正され、スコープを持つenum型が導入された。\nscoped enumの宣言は <code>enum class</code> と表記する。</p>\n<p>単にスコープを持ち名前空間を汚さないようになっただけでなく、\n列挙子が暗黙に他の型に変換されることもなくなった。\nこれまでのように列挙子を数値等と比較したい場合はキャストを利用する。</p>\n<p>enumでは基礎とする方の指定が可能である。\nスコープを持つenumの基礎とする型のdefaultはintである。\nスコープを持たないenumはdefaultが存在しない。\nenumの前方宣言は基礎とする型が存在する場合可能である。</p>\n<h4 id=\"未定義private関数の撲滅\">未定義private関数の撲滅</h4>\n<p>未定義の関数を呼び出し側に使用されたくない際、C++98ではprivateな関数とすることで秘匿にしていた。\nC++11以降ではprivateとして間接的に使用を禁止するのではなく <strong>deleteされた関数 (deleted function)</strong>\nとすることで上記の要件を満たすことができる。\n加えて、deleteを利用した場合はコンパイル時に不正なアクセスを検知できる。\nprivate宣言のものをfriend関数内から利用しようとした際などはリンク時まで不正なアクセスを発見できない。</p>\n<p>また、非メンバ関数、テンプレートのインスタンス化も含め、どんな関数でもdeleteできる。</p>\n<p>以上より、使用を禁止したい関数に対してはdeleteを使用する。</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">bool</span> <span class=\"token function\">isLucky</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4 id=\"overrideの宣言\">overrideの宣言</h4>\n<p>オーバーライドを実装したい場合、オーバーライドを満たす様にクラスおよびメンバ関数を実装すれば\n自動的にメンバ関数がオーバーライドされる。\nしかしこの仕様には問題点もあり、\n大きなものの一つがオーバーライドしたつもりができていない場合があることだ。\nしかもその誤りをコンパイラは教えてくれない。</p>\n<p>上述の問題点を回避するためにC++11以降ではオーバーライドしたい関数には明示的に <code>override</code> 宣言を用いる。</p>\n<p>override宣言にはコンパイラ、実装者へのオーバーライドの明示化以外に、\nメンバ関数の参照修飾子を用いると左辺値オブジェクトと右辺値オブジェクトを\n区別することができるというメリットもある。</p>\n<h4 id=\"const_iterator\">const_iterator</h4>\n<p>一般に可能な場面ではtuneniconstを使用せよと言われており、iteratorでもそれは例外ではない。\nconst_iteratorとはSTLが用意したconstをさすポインタ相当のiteratorであり\n可能な場面ではこれを使用すべきである。</p>\n<p>C++98でもC++11でも上記のルールは適用されるが、C++98でのconst_iteratorは扱いが煩雑だ。\nC++11ではこれが大幅に改良されており現実的に上述のルールに従うことが可能になった。</p>\n<p>よって常にiteratorよりもconst_iteratorを優先して使用する。</p>\n<h4 id=\"noexcept-constexpr\">noexcept, constexpr</h4>\n<h5 id=\"noexcept\">noexcept</h5>\n<p>C++11では、関数が例外を発生させないことをnoexceptにより明示できる。</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">noexcept</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>C++11からプログラムの仕様が変更され、<code>noexcept</code> を指定することでコンパイラが最適化する機会が生まれる。</p>\n<h5 id=\"constexpr\">constexpr</h5>\n<p>ある変数がコンパイル時定数を必要とする場面で使用可能なことをコンパイラに保証してもらうために\nconstexprが存在する。</p>\n<p>可能な場面では常にconstexprを使用することで実行時ではなくコンパイル時に可能な範囲の演算が行われ、\n処理が軽やかになる。</p>\n<p>注意点はconstexprの宣言を解除すると呼び出し側で大量のエラーが発生する可能性があることだ。\nconstexprを宣言した後は以降constexpr宣言を削除しないと断ぜられる様にすることに留意する。</p>\n<h4 id=\"要素の挿入-直接配置\">要素の挿入, 直接配置</h4>\n<p>std::vectorに要素を追加する時、一般的に使用される関数はpush_backである。\nしかし、emplace_backを使用した方が効率良い場面がある。</p>\n<p>原則として挿入関数と比べ、同等機能の直接配置関数が効率性に優れることはあるが劣ることはない。\nただし、挿入関数なら拒否する様な型変換でも直接配置関数は実行する場合がある。</p>\n<p>直接配置関数が実際に高速に実行されるのは下記の場合である。</p>\n<ul>\n<li>追加する値がコンテナ内に代入ではなくコンストラクトされる</li>\n<li>実引数の型がコンテナ要素の型とは異なる</li>\n<li>コンテナが重複すを理由に値の追加を拒否しない</li>\n</ul>","ogImage":{"url":"/assets/blog/dynamic-routing/cover.jpg"},"coverImage":"/assets/blog/dynamic-routing/cover.jpg"}},"__N_SSG":true}