{"pageProps":{"post":{"title":"GitHub ActionsでCHANGELOG駆動Release","date":"2021-03-07","slug":"2021-03-07-github_actions_tag_release_changelog","author":{"name":"JJ Kasper","picture":"/assets/blog/authors/jj.jpeg"},"content":"<h1 id=\"目次\">目次</h1>\n<ul>\n<li><a href=\"#%E6%A6%82%E8%A6%81\">概要</a></li>\n<li><a href=\"#%E6%89%8B%E6%B3%95\">手法</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#changelog\">CHANGELOG</a></li>\n<li><a href=\"#action%E5%AE%9A%E7%BE%A9%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB\">Action定義ファイル</a></li>\n<li><a href=\"#%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88\">ポイント</a>\n<ul>\n<li><a href=\"#%E5%9F%BA%E6%9C%AC%E6%88%A6%E7%95%A5\">基本戦略</a></li>\n<li><a href=\"#git-fetch---unshallow\">git fetch --unshallow</a></li>\n<li><a href=\"#outputs-%E3%81%A8-\">outputs と <code>*</code></a></li>\n<li><a href=\"#%E8%AA%B2%E9%A1%8C\">課題</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">まとめ</a></li>\n</ul>\n<h1 id=\"概要\">概要</h1>\n<p>GitHub Actionsというサービスがある。\nサービス自体の説明についてはここでは触れない。\n本ポストのテーマはタイトルの通り、CHANGELOGを用いたリリースおよびタグの管理だ。</p>\n<p>タグがpushされたタイミングで、それまでのcommitを自動で読み取りCHANGELOG.mdおよびReleaseを発行してくれるという\n至れり尽くせりなGitHub Actionsの例は各所で見受けられるが、\n正直自分としてはcommitログそのままReleaseに書かれるとか嫌だし、\ntagをpushするよりもReleaseの履歴がわかりやすくあってほしい。\n要するに、tagが発行されたタイミングではなくCHANGELOGを修正したタイミングで、\nCHANGELOGに応じた諸々のリリースフローを行ってほしいわけである。</p>\n<p>まとめると</p>\n<ul>\n<li>CHANGELOG.mdが修正されたcommitがmasterにpushされたタイミングでActionが起動</li>\n<li>CHANGELOG.mdに記載されているVersionのtagを発行</li>\n<li>CHANGELOG.mdに記載されている内容のReleaseを発行</li>\n</ul>\n<p>というGitHub Actionsを作るぞという話。</p>\n<h1 id=\"手法\">手法</h1>\n<h3 id=\"changelog\">CHANGELOG</h3>\n<p>下記のようなCHANGELOG.mdを想定している。</p>\n<pre><code>## Version 0.1.0\n* akanechan kawaii yatta-\n* add choco mint ices\n\n## Version 0.0.2\n* fix release flow\n\n## Version 0.0.1\n* initial application version\n</code></pre>\n<h3 id=\"action定義ファイル\">Action定義ファイル</h3>\n<p>上記のCHANGELOG.mdに対してのAction定義ファイル。\n<code>Extract CHANGELOG</code> stepを適当にいじれば大体のCHANGELOG.mdの書き方に対応できると思われる。</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Release\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> master <span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'CHANGELOG.md'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Release\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Check out\n      <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2\n\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Extract CHANGELOG\n      <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> versioning\n      <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n        VERSION=$(head -1 CHANGELOG.md | sed -e 's/^.*Version //g')\n        git fetch --prune --unshallow\n        PRETAG=$(git describe --tags --abbrev=0)\n        git diff $PRETAG..${{ github.sha }} -- CHANGELOG.md | grep -E '^\\+' | grep -v '+++' | sed -e 's/^\\+//g' > diff-changelog.txt\n        echo ::set-output name=version::$VERSION</span>\n\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Tag\n      <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> tag_version\n      <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> mathieudutour/github<span class=\"token punctuation\">-</span>tag<span class=\"token punctuation\">-</span>action@v5.2\n      <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">custom_tag</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> steps.versioning.outputs.version <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">github_token</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.GITHUB_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Release\n      <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> softprops/action<span class=\"token punctuation\">-</span>gh<span class=\"token punctuation\">-</span>release@v1\n      <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">files</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          CHANGELOG.md\n          LICENSE</span>\n        <span class=\"token key atrule\">tag_name</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> steps.tag_version.outputs.new_tag <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">body_path</span><span class=\"token punctuation\">:</span> diff<span class=\"token punctuation\">-</span>changelog.txt\n      <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">GITHUB_TOKEN</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.GITHUB_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"ポイント\">ポイント</h3>\n<h4 id=\"基本戦略\">基本戦略</h4>\n<ul>\n<li>1行目の文字列から <code>Version </code> 以降の文字列を抽出しversionとする</li>\n<li>前回のtagとの差分をReleaseのdescriptionとする</li>\n</ul>\n<h4 id=\"git-fetch---unshallow\">git fetch --unshallow</h4>\n<p>GitHub Actionsを使用していれば大概の場合使うであろう <code>actions/checkout</code> actionだが、\nこちらでcloneしているリポジトリは <em>shallow repository</em> である。\n履歴情報がないので、そのままでは <code>git diff</code> やら <code>git describe --tags</code> をしても空振りに終わってしまう。</p>\n<pre><code>git fetch --unshallow\n</code></pre>\n<p>をしてあげることで過去の変更履歴を取得して、前回のtagからの変更履歴が参照できるようにする。</p>\n<h4 id=\"outputs-と-\">outputs と <code>*</code></h4>\n<pre><code>echo ::set-output name=version::$VERSION\n</code></pre>\n<p>という構文を用いれば、stepから情報を出力できる。\n基本的にはこの手法を用いてstep間で情報の授受をすれば問題ないと思われる。</p>\n<p>しかし、CHAGELOGの情報をoutputsに宣言した際、 <code>*</code> がファイル名に展開されてしまっていた。\nいまいち原因は調べきれていないので、詳しい方いたら理由を教えていただけると幸いである。</p>\n<p>対応策として、CHANGELOGの差分情報はファイルに書き出して、ファイル経由で情報の伝播を行うようにした。</p>\n<h4 id=\"課題\">課題</h4>\n<p>validation等は一切していないので、1行目が前と同じversionの状態でmasterへマージしてしまったりすると、\ntagの上書きが発生してしまうと思われるのでCHANGELOGの修正には注意が必要。(一敗)</p>\n<h1 id=\"まとめ\">まとめ</h1>\n<p>CHANGELOGの修正をトリガーとし、CHANGELOGの内容に従ったtagとReleaseを発行することができた。\ntagやReleaseの発行は外部Actionを使用しており、正直どこまで外部Actionに頼っていいかは疑問だし、不安の種でもある。\nまあ、GitHub自体が破壊的なAPIの変更等を加えない限り同様のバージョンを使い続けていれば不慮の事故は起こらないと信じたい。</p>","ogImage":{"url":"/assets/blog/dynamic-routing/cover.jpg"},"coverImage":"/assets/blog/dynamic-routing/cover.jpg"}},"__N_SSG":true}