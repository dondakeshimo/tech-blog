{"pageProps":{"post":{"title":"マイクロサービスアーキテクチャのざっくりまとめ","date":"2020-12-19","slug":"2020-12-19-microservice_architecture","author":{"name":"JJ Kasper","picture":"/assets/blog/authors/jj.jpeg"},"content":"<h1 id=\"目次\">目次</h1>\n<ul>\n<li><a href=\"#%E3%83%9E%E3%82%A4%E3%82%AF%E3%83%AD%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3\">マイクロサービスアーキテクチャ</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%E3%83%9E%E3%82%A4%E3%82%AF%E3%83%AD%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%82%92%E7%94%A8%E3%81%84%E3%82%8B%E5%88%A9%E7%82%B9\">マイクロサービスを用いる利点</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%E6%8A%80%E8%A1%93%E7%95%B0%E8%B3%AA%E6%80%A7\">技術異質性</a></li>\n<li><a href=\"#%E5%9B%9E%E5%BE%A9%E6%80%A7resilience\">回復性(Resilience)</a></li>\n<li><a href=\"#%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%AA%E3%83%B3%E3%82%B0\">スケーリング</a></li>\n<li><a href=\"#%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%AE%E5%AE%B9%E6%98%93%E6%80%A7\">デプロイの容易性</a></li>\n<li><a href=\"#%E7%B5%84%E7%B9%94%E9%9D%A2%E3%81%AE%E4%B8%80%E8%87%B4\">組織面の一致</a></li>\n<li><a href=\"#%E5%90%88%E6%88%90%E5%8F%AF%E8%83%BD%E6%80%A7\">合成可能性</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E3%83%9E%E3%82%A4%E3%82%AF%E3%83%AD%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%82%92%E7%94%A8%E3%81%84%E3%82%8B%E3%83%87%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88\">マイクロサービスを用いるデメリット</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AE%E3%83%A2%E3%83%87%E3%83%AB%E5%8C%96\">サービスのモデル化</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%E5%84%AA%E3%82%8C%E3%81%9F%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9\">優れたサービス</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%E7%96%8E%E7%B5%90%E5%90%88\">疎結合</a></li>\n<li><a href=\"#%E9%AB%98%E5%87%9D%E9%9B%86%E6%80%A7\">高凝集性</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E5%A2%83%E7%95%8C\">境界</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%E3%83%93%E3%82%B8%E3%83%8D%E3%82%B9%E7%9A%84%E5%A2%83%E7%95%8C\">ビジネス的境界</a></li>\n<li><a href=\"#%E6%8A%80%E8%A1%93%E7%9A%84%E5%A2%83%E7%95%8C\">技術的境界</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E5%85%B1%E6%9C%89%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9%E3%81%AF%E7%B5%B6%E5%AF%BE%E3%81%AB%E3%83%80%E3%83%A1\">共有データベースは絶対にダメ</a></li>\n<li><a href=\"#%E3%82%AA%E3%83%BC%E3%82%B1%E3%82%B9%E3%83%88%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%A8%E3%82%B3%E3%83%AC%E3%82%AA%E3%82%B0%E3%83%A9%E3%83%95%E3%82%A3\">オーケストレーションとコレオグラフィ</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%E3%82%AA%E3%83%BC%E3%82%B1%E3%82%B9%E3%83%88%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3\">オーケストレーション</a></li>\n<li><a href=\"#%E3%82%B3%E3%83%AC%E3%82%AA%E3%82%B0%E3%83%A9%E3%83%95%E3%82%A3\">コレオグラフィ</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#rest%E3%81%A8rpc%E3%81%AE%E3%83%88%E3%83%AC%E3%83%BC%E3%83%89%E3%82%AA%E3%83%95\">RESTとRPCのトレードオフ</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#rest\">REST</a></li>\n<li><a href=\"#rpc\">RPC</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E9%9D%9E%E5%90%8C%E6%9C%9F%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%83%99%E3%83%BC%E3%82%B9%E9%80%A3%E6%90%BA\">非同期イベントベース連携</a></li>\n<li><a href=\"#%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA\">クライアントライブラリ</a></li>\n<li><a href=\"#%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%8B%E3%83%B3%E3%82%B0\">バージョニング</a></li>\n<li><a href=\"#%E3%83%A6%E3%83%BC%E3%82%B6%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9\">ユーザインタフェース</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4\">デプロイ</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#cicd\">CI/CD</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%E7%B6%99%E7%B6%9A%E7%9A%84%E3%82%A4%E3%83%B3%E3%83%86%E3%82%B0%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3\">継続的インテグレーション</a></li>\n<li><a href=\"#ci%E3%81%A8%E3%83%9E%E3%82%A4%E3%82%AF%E3%83%AD%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AE%E3%83%9E%E3%83%83%E3%83%94%E3%83%B3%E3%82%B0\">CIとマイクロサービスのマッピング</a></li>\n<li><a href=\"#%E7%B6%99%E7%B6%9A%E7%9A%84%E3%83%87%E3%83%AA%E3%83%90%E3%83%AA\">継続的デリバリ</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E6%88%90%E6%9E%9C%E7%89%A9\">成果物</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E5%9B%BA%E6%9C%89%E3%81%AE%E6%88%90%E6%9E%9C%E7%89%A9\">プラットフォーム固有の成果物</a></li>\n<li><a href=\"#os%E6%88%90%E6%9E%9C%E7%89%A9\">OS成果物</a></li>\n<li><a href=\"#%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%E3%81%AE%E6%88%90%E6%9E%9C%E7%89%A9\">カスタムイメージの成果物</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E6%A7%8B%E6%88%90\">サービス構成</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#1%E3%83%9B%E3%82%B9%E3%83%88%E3%81%AB%E8%A4%87%E6%95%B0%E3%81%AE%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9\">1ホストに複数のサービス</a></li>\n<li><a href=\"#%E3%83%9B%E3%82%B9%E3%83%88%E3%81%94%E3%81%A8%E3%81%AB%E4%B8%80%E3%81%A4%E3%81%AE%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9\">ホストごとに一つのサービス</a></li>\n<li><a href=\"#%E7%89%A9%E7%90%86%E3%81%A8%E4%BB%AE%E6%83%B3%E5%8C%96\">物理と仮想化</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E3%83%86%E3%82%B9%E3%83%88\">テスト</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E3%81%AE%E7%A8%AE%E9%A1%9E\">テストの種類</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#maric%E3%81%AE4%E8%B1%A1%E9%99%90\">Maricの4象限</a></li>\n<li><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E3%81%AE%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%97\">テストのスコープ</a></li>\n<li><a href=\"#%E5%8D%98%E4%BD%93%E3%83%86%E3%82%B9%E3%83%88\">単体テスト</a></li>\n<li><a href=\"#%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%83%86%E3%82%B9%E3%83%88\">サービステスト</a></li>\n<li><a href=\"#end-to-end%E3%83%86%E3%82%B9%E3%83%88\">End to Endテスト</a></li>\n<li><a href=\"#%E3%82%B3%E3%83%B3%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%9E%E9%A7%86%E5%8B%95%E3%83%86%E3%82%B9%E3%83%88\">コンシューマ駆動テスト</a></li>\n<li><a href=\"#%E3%82%B9%E3%83%A2%E3%83%BC%E3%82%AF%E3%83%86%E3%82%B9%E3%83%88\">スモークテスト</a></li>\n<li><a href=\"#%E6%A9%9F%E8%83%BD%E6%A8%AA%E6%96%AD%E3%83%86%E3%82%B9%E3%83%88\">機能横断テスト</a></li>\n<li><a href=\"#%E6%80%A7%E8%83%BD%E3%83%86%E3%82%B9%E3%83%88\">性能テスト</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E7%9B%A3%E8%A6%96\">監視</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E3%82%A2%E3%83%89%E3%83%90%E3%82%A4%E3%82%B9\">サービスについてのアドバイス</a></li>\n<li><a href=\"#%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E3%82%A2%E3%83%89%E3%83%90%E3%82%A4%E3%82%B9\">システムについてのアドバイス</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3\">セキュリティ</a></li>\n<li><a href=\"#%E3%83%9E%E3%82%A4%E3%82%AF%E3%83%AD%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E7%95%99%E6%84%8F%E7%82%B9\">マイクロサービスにおける留意点</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%E6%8C%87%E6%A8%99\">指標</a></li>\n<li><a href=\"#%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E9%9A%9C%E5%AE%B3%E3%81%B8%E3%81%AE%E5%AF%BE%E5%87%A6%E6%B3%95\">システム障害への対処法</a></li>\n<li><a href=\"#cap%E5%AE%9A%E7%90%86\">CAP定理</a></li>\n<li><a href=\"#%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%83%AC%E3%82%B8%E3%82%B9%E3%83%88%E3%83%AA\">サービスレジストリ</a></li>\n<li><a href=\"#%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AE%E6%96%87%E6%9B%B8%E5%8C%96\">サービスの文書化</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E3%83%9E%E3%82%A4%E3%82%AF%E3%83%AD%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AE%E5%8E%9F%E5%89%87\">マイクロサービスの原則</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%E3%83%93%E3%82%B8%E3%83%8D%E3%82%B9%E6%A6%82%E5%BF%B5%E3%81%AB%E6%B2%BF%E3%81%A3%E3%81%9F%E3%83%A2%E3%83%87%E3%83%AB%E5%8C%96\">ビジネス概念に沿ったモデル化</a></li>\n<li><a href=\"#%E8%87%AA%E5%8B%95%E5%8C%96%E3%81%AE%E6%96%87%E5%8C%96%E3%81%AE%E6%8E%A1%E7%94%A8\">自動化の文化の採用</a></li>\n<li><a href=\"#%E5%86%85%E9%83%A8%E5%AE%9F%E8%A3%85%E8%A9%B3%E7%B4%B0%E3%81%AE%E9%9A%A0%E8%94%BD\">内部実装詳細の隠蔽</a></li>\n<li><a href=\"#%E5%85%A8%E3%81%A6%E3%81%AE%E5%88%86%E6%95%A3%E5%8C%96\">全ての分散化</a></li>\n<li><a href=\"#%E7%8B%AC%E7%AB%8B%E3%81%97%E3%81%9F%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4\">独立したデプロイ</a></li>\n<li><a href=\"#%E9%9A%9C%E5%AE%B3%E3%81%AE%E5%88%86%E9%9B%A2\">障害の分離</a></li>\n<li><a href=\"#%E9%AB%98%E5%BA%A6%E3%81%AA%E8%A6%B3%E6%B8%AC\">高度な観測</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"マイクロサービスアーキテクチャ\">マイクロサービスアーキテクチャ</h1>\n<p><a href=\"https://www.amazon.co.jp/%E3%83%9E%E3%82%A4%E3%82%AF%E3%83%AD%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3-Sam-Newman/dp/4873117607\">マイクロサービスアーキテクチャ</a></p>\n<p>上記の書籍をもとに学んだことをまとめていく。\nまずマイクロサービスについての定義だが、</p>\n<blockquote>\n<p>マイクロサービスは、協調して動作する小規模で自律的なサービスです。</p>\n</blockquote>\n<p>とのことである。\nかなり曖昧であるが、サービス群に対してどこからがマイクロなサービスのような具体的な線引くのは難しい。\n本書で説明しているマイクロサービスの特徴としては</p>\n<ul>\n<li>一つの機能に専念していること</li>\n<li>独立したデプロイが可能なこと</li>\n</ul>\n<p>の2点が担保されていることがマイクロサービスの条件となっているようである。</p>\n<h3 id=\"マイクロサービスを用いる利点\">マイクロサービスを用いる利点</h3>\n<h5 id=\"技術異質性\">技術異質性</h5>\n<p>モノリシックなサービスに対し、技術選択の自由度が格段に上がる。\nrailsを使用して全てを管理しているアプリケーションにおいてrubyとJS以外のプログラミング言語を導入するのは容易ではないが、\n適切にマイクロサービスに分割し機械学習分野に定評のあるPythonを推測部分に用いたり、\n課金周りの処理には信頼と安定のJavaを使用したりなどといった選択が可能になる。</p>\n<h5 id=\"回復性resilience\">回復性(Resilience)</h5>\n<p>システムのあるコンポーネントに障害が発生しても、その障害が連鎖しなければ、\n問題を分離してシステムの残りの部分は機能し続けることができる。\nモノリシックサービスでは一つの障害が全体に波及しやすい。</p>\n<h5 id=\"スケーリング\">スケーリング</h5>\n<p>モノリシックサービスと違い、処理の重いサービスに集中的にリソースを割くということが可能になる。\nそのため、一般的に柔軟なスケーリングが可能となりコストを制御することが容易になる。</p>\n<h5 id=\"デプロイの容易性\">デプロイの容易性</h5>\n<p>大きなモノリシックサービスの軽微な変更に対してデプロイを行おうとすると、\n変更量と釣り合わない長いビルド時間やリリース時間と戦う羽目になる。\nまた、リリースの失敗やバグ、障害の発生があると一気に全体に影響が出るため高頻度のリリースに精神的な障壁が生まれる。\nサービスを分割した場合上記の懸念事項が軽減される。</p>\n<h5 id=\"組織面の一致\">組織面の一致</h5>\n<p>1チームはピザ2枚で足りる人数が良い。\nそのような小規模チームで巨大なモノリシックサービスを見切るのは至難の技である。\n一つのサービスと一つのチームを結びつけられるように分割することで、効率よくマネジメントが可能になる。</p>\n<h5 id=\"合成可能性\">合成可能性</h5>\n<p>分割されたサービスを再利用することが容易になる。\n例えば、シューズストアサービスが参照していたユーザサービスを\n新たに開発するブックストアサービスも参照するようにするといったことが簡単にできる。</p>\n<h3 id=\"マイクロサービスを用いるデメリット\">マイクロサービスを用いるデメリット</h3>\n<p>明確に書籍には記述されていないがざっと思いつくものをまとめる。</p>\n<ul>\n<li>結局コストパフォーマンスが悪くなることがありそう</li>\n<li>技術の自由度からチーム間の異動の際に学習コストが上がりそう</li>\n<li>インタフェースが増えるのでその分事故も起きやすそう</li>\n<li>理想のマイクロサービスの状態を全員が共有できていないとすぐにどこかで密結合が起こりそう</li>\n</ul>\n<h1 id=\"サービスのモデル化\">サービスのモデル化</h1>\n<h3 id=\"優れたサービス\">優れたサービス</h3>\n<h5 id=\"疎結合\">疎結合</h5>\n<p>あるサービスを変更しても別のサービスを変更する必要がない状態。</p>\n<h5 id=\"高凝集性\">高凝集性</h5>\n<p>関連するビジネスロジックが一つのサービスに収まっている状態。\n一つのロジックの振る舞いを変更したい時に、複数サービスにまたがって変更する必要がない状態。</p>\n<h3 id=\"境界\">境界</h3>\n<h5 id=\"ビジネス的境界\">ビジネス的境界</h5>\n<p>大きなビジネスロジックを分解し、一つのビジネスロジックに着目した際外部との通信が必要な部分と必要のない部分に分割する。</p>\n<h5 id=\"技術的境界\">技術的境界</h5>\n<p>分割の第一条件はビジネス境界であることを念頭に置く。技術的に分割できる部分は性能的な問題等を鑑みて分けても良い。</p>\n<h3 id=\"共有データベースは絶対にダメ\">共有データベースは絶対にダメ</h3>\n<p>疎結合性と凝集性の真逆をいくプラクティスであるのでいかなる代償を払っても避けるべきである。</p>\n<h3 id=\"オーケストレーションとコレオグラフィ\">オーケストレーションとコレオグラフィ</h3>\n<p>通信モードにおいて、リクエスト/レスポンスとイベントベースの二つが存在する。\nサービス間の関係性として\nリクエスト/レスポンスを用いたオーケストレーションと\nイベントベースの通信を用いたコレオグラフィがある。\n一般に、コレオグラフィ手法に向かう傾向が強いシステムの方が疎結合で柔軟性がある。\nリクエスト/レスポンスを使用する際にも非同期にするように心がければ、疎結合性がある程度担保できる。</p>\n<h5 id=\"オーケストレーション\">オーケストレーション</h5>\n<p>オーケストラの指揮者のように中枢部のサービスに頼ってプロセスを推進する。\n指揮者サービスが各マイクロサービスとリクエスト/レスポンスを行い、\nデータを集めて最終的なレスポンスを形成するというようなモデルがオーケストレーションである。\nメリットとしてはモデルが非常に分かりやすいこと、問題の特定が容易なこと。\nデメリットは、指揮者サービスが中央監督機関になりすぎること。\n中央集約しすぎるとほとんどのロジックをその部分で行うことが効率的となり、\n結果的にモノリシックなサービスが出来上がってしまう方向に引力が働く可能性がある。</p>\n<h5 id=\"コレオグラフィ\">コレオグラフィ</h5>\n<p>コレオグラフィはオーケストレーションとは違い中枢サービスがない。\n代わりに入り口となっているサービスがイベントを発行し、\nそれらをサブスクライブしている各マイクロサービスがイベントをトリガーにプロセスを開始する。\n一般的に問題特定やエラーハンドリングを行うことがオーケストレーションよりも難しくなる。</p>\n<h3 id=\"restとrpcのトレードオフ\">RESTとRPCのトレードオフ</h3>\n<p>リクエスト/レスポンス方式の通信の代表的なものとしてREST(REpresentational State Transfer)とRPC(Remote Process Call)がある。\nこれら二つのトレードオフについて考える。</p>\n<h5 id=\"rest\">REST</h5>\n<p>RESTの考え方とHTTPプロトコルは非常に相性が良いため、ここでは主にHTTPにおけるRESTについて考える。\nHTTPリクエストを送ることによってリモートサーバに処理を依頼する。\nハイパーメディアコントロールにより、リソースにアクセスして次の操作を決定することが容易となり、サーバとクライアントの分離が進む。\n欠点としては性能面や複雑さ、開発工数の増大などがある。</p>\n<h5 id=\"rpc\">RPC</h5>\n<p>クライアントが単なる関数呼び出しを行うようにリモートサーバにリクエストを送れる手法である。\nいくつかの問題として、クライアントサイドとサーバサイドの技術選択に制限がかかることや、\nリモート呼び出しを抽象化しすぎた結果リモートサーバへのリクエストと気づかずに修正を入れてしまい事故につながるといったことがある。\n最新のProtocol BuffersやThriftのような機構はこのようなデメリットを軽減している。</p>\n<h3 id=\"非同期イベントベース連携\">非同期イベントベース連携</h3>\n<p>イベントベースの手法としてはメッセージキューを使用するものが代表的だろう。\nHTTPを使用してAtomのような手法を使うことも可能である。\nメッセージキューのインフラを整えるために追加の工数が大量に必要になるが、\n完成した暁には大いなる疎結合性が得られる。</p>\n<h3 id=\"クライアントライブラリ\">クライアントライブラリ</h3>\n<p>クライアントライブラリを使用する場合はクライアントサイドでアップグレードのタイミングを管理できるようにする。</p>\n<h3 id=\"バージョニング\">バージョニング</h3>\n<p>バージョニングが必要な場合はセマンティックバージョニングを使用するのが良い。\n2.1.5のように <code>MAJOR.MINOR.PATCH</code> と数字に意味を持たせる。\nこれによりアップグレードした際に破壊的な変更が行われているかどうかを察知することが可能となる。</p>\n<p>その他の方式としては新旧のバージョンを共存させることが挙げられる。\nどちらの方式も選べるような状態にし、旧バージョンを誰も参照しなくなった際に削除する。</p>\n<p>前者は頻繁なアップデートを行うインターフェースに、後者はそれほど頻繁でないものに使用することができると考えられる。</p>\n<h3 id=\"ユーザインタフェース\">ユーザインタフェース</h3>\n<p>合成レイヤと考え、レイヤと接続する各サービスがそのレイヤに対して責任を持つのが好ましい。\nBFF(Backends for Frontends)を使用することでサービス呼び出しの管理が容易になるが、\nBFFの層で中間ロジックを入れると複雑さが増すので注意が必要。</p>\n<h1 id=\"デプロイ\">デプロイ</h1>\n<p>相互依存するマイクロサービスにおいてデプロイを適切に行うことは非常に重要である。\n本章ではデプロイに関するテクニックや技術について言及する。</p>\n<h3 id=\"cicd\">CI/CD</h3>\n<h5 id=\"継続的インテグレーション\">継続的インテグレーション</h5>\n<p>CI(Continuous Integration)は、新たにチェックインされたコードが既存コードと適切に統合されるようにする。\n実際にCIを行っているかどうかの質問として</p>\n<ul>\n<li>1日に一度はメインラインにチェックインしているか</li>\n<li>変更を検証するテストスイートがあるか</li>\n<li>ビルドが壊れた時に、素rを修正するのがチームの最優先事項か</li>\n</ul>\n<p>というのがある。</p>\n<h5 id=\"ciとマイクロサービスのマッピング\">CIとマイクロサービスのマッピング</h5>\n<p>CIを考える際に</p>\n<ul>\n<li>ソースコードリポジトリ</li>\n<li>CIビルドジョブ</li>\n<li>ビルド生成物</li>\n</ul>\n<p>の3つについてマッピングを考える必要がある。\n最終的な生成物が3つ出来上がると考えた時に、CIビルドジョブまで3つに分割するか、ソースコードリポジトリまで3つに分割するかで\n3パターン考えることができます。\n一般にCIビルドジョブを一気にやる手法は考えることが少ないことをメリットとして捉えられるかもしれないが無駄捉えられるかもしれないが\nCIビルドジョブを分割し、ソースコードリポジトリを分割しない場合はリポジトリが一つなので、\nチェックイン/チェックアウトのプロセスが容易になる。\nしかし、独立すべき複数のサービスを同時にレビューする習慣がつくため、密結合なコードに気付きづらくなるという欠点は抱えている。\nソースコードリポジトリまで分割した場合、リポジトリの所有権がチーム単位で明確になり、独立したレビューを行うことができるが、\nリポジトリをまたがる変更が難しくなるというデメリットがある。</p>\n<h5 id=\"継続的デリバリ\">継続的デリバリ</h5>\n<p>継続的デリバリ(CD: COntinuous Delivery)とはチェックインするたびに本番環境への準備状況に関する\nフィードバックを常に得られ、さらに各チェックインを全てリリース候補として扱う手法である。\n準備状況についてはビルドパイプラインによってステップに分けられて実行され、その成否において状況が判断できる。</p>\n<h3 id=\"成果物\">成果物</h3>\n<p>リリースまで考えた際にソースコードの成果物として出力されるものの種類とそれらの特徴について考える。</p>\n<h5 id=\"プラットフォーム固有の成果物\">プラットフォーム固有の成果物</h5>\n<p>Javaの場合はjarファイルとwarファイル、Pythonの場合はEggのようなプログラミング言語に対する成果物が生成される。\nしかし、それを稼働させるためにはそれぞれの成果物を実行するための環境を整える必要がある。\n環境を整えるためにはchefのような自動構成管理ツールが役に立つ。</p>\n<h5 id=\"os成果物\">OS成果物</h5>\n<p>Red HatにおけるRPMやUbuntuにおけるdebのようなOS固有の成果物を生成する手法もある。\nこの場合、プラットフォーム固有の環境構築に依存する必要がなくなる。\nしかし、OS固有の成果物の生成は一般に難易度が高いことや複数のOSにデプロイする場合には逆に手間がかかる可能性があるなどの欠点もある。</p>\n<h5 id=\"カスタムイメージの成果物\">カスタムイメージの成果物</h5>\n<p>Puppet, Chef, Ansibleといった自動構成管理ツールの欠点は構成処理に時間がかかることである。\nそのため、予め仮想マシンイメージを生成物とすることで各サーバへのデプロイ時間を軽減することができる。\nまた、イミュータブルサーバの概念を実現するのにも役に立つ。\nこの概念は端的にいうと、稼働中のサーバ郡は常に同じ状態にさせるために各々に対する変更は行わないようにするといったものである。\nイメージを作成することで、SSH接続を不可にしてサーバを稼働させることが可能になり、概念としてのイミュータブルサーバを\nより現実的なものとすることができる。</p>\n<h3 id=\"サービス構成\">サービス構成</h3>\n<p>ホストとサービスをどのようにマッピングするかを考える。</p>\n<h5 id=\"1ホストに複数のサービス\">1ホストに複数のサービス</h5>\n<p>スケールが難しい。\n管理するホストが一つなのが楽。</p>\n<h5 id=\"ホストごとに一つのサービス\">ホストごとに一つのサービス</h5>\n<p>スケールアウトが容易。管理するホストが複数になるので監視等のコストがかかる。</p>\n<h5 id=\"物理と仮想化\">物理と仮想化</h5>\n<p>仮想化に対するキーワードを記載する。\n最新の仮想化ではオーバーヘッドがかなり軽減され、進めるにつれて柔軟性や再現性が上がるという恩恵を得られる。</p>\n<ul>\n<li>Docker</li>\n<li>Linuxコンテナ</li>\n<li>Vagrand</li>\n<li>ハイパーバイザ</li>\n</ul>\n<h1 id=\"テスト\">テスト</h1>\n<h3 id=\"テストの種類\">テストの種類</h3>\n<h5 id=\"maricの4象限\">Maricの4象限</h5>\n<p>Marickの4象限の派生系というものがある。\n図を書くのが面倒なので、言葉で記載すが、4象限なので軸が二つあり、それぞれ <code>ビジネス &#x3C;-> 技術</code> , <code>プログラミングのサポートの大小</code> である。</p>\n<ul>\n<li>ビジネス、プログラミングのサポート小: 探索的テスト</li>\n<li>ビジネス、プログラミングのサポート大: 受け入れテスト</li>\n<li>技術、プログラミングのサポート小    : 性質テスト</li>\n<li>技術、プログラミングのサポート大    : 単体テスト</li>\n</ul>\n<h5 id=\"テストのスコープ\">テストのスコープ</h5>\n<p>テストのスコープについては単体テストが最も狭く、End to Endテストが最も広い。\nテストのスコープが大きくなるにつれてコードに対する自信が向上する。\nテストのスコープが小さくなるにつれて実行時間が短くなり、分離性が向上する。</p>\n<h5 id=\"単体テスト\">単体テスト</h5>\n<p>機能が適切かどうかに関して高速なフィードバックを得られることが単体テストの目的である。\nコードのリファクタリングを支援するために非常に重要になる。</p>\n<h5 id=\"サービステスト\">サービステスト</h5>\n<p>1マイクロサービスのみを対象としたテスト。\n可動部がマイクロサービス単体に限定されているためテストの脆弱性が小さくなる。</p>\n<h5 id=\"end-to-endテスト\">End to Endテスト</h5>\n<p>サービス全体を対象としたテスト。\nテストの脆弱性は大きくなり問題箇所の特定も難しくなるが、成功した際に最も大きな自信が得られる。\nその他にテストの責任者が曖昧になりやすいという組織上の欠点があったり、実行時間が大きくなりやすかったりとくつかの問題点を抱えている。</p>\n<h5 id=\"コンシューマ駆動テスト\">コンシューマ駆動テスト</h5>\n<p>コンシューマ/クライアントがプロデューサ/サーバの試験を行う。\nこれにより確実にインタフェースの整合性が担保でき、End to Endテストよりも遥かに高速に試験が行える。\nコンシューマ駆動テストを助けるツールとしてPactというものがある。</p>\n<h5 id=\"スモークテスト\">スモークテスト</h5>\n<p>新たにデプロイしたソフトウェアに対して実行し、そのデプロイが正常に機能していることを確認する。\nこれを行うためにデプロイとリリースを分離する必要がある。</p>\n<p><strong>ブルーグリーンデプロイメント</strong><br>\n必要なサーバの倍量を準備しておき、半分に分割、片方にのみリクエストが流れる状態にする。\nリクエストが来ていない側のサーバに新しいバージョンを行い、スモークテストを実施する。\nスモークテストが成功したら、新しいバージョンにリクエストを流す。</p>\n<p><strong>カナリアリリース</strong><br>\n本番環境の一部に新しいバージョンをリリースする。\n様々な観点から新しいバージョンに問題ないことを確認し、新しいバージョンの割合を最終的に100%にする。</p>\n<h5 id=\"機能横断テスト\">機能横断テスト</h5>\n<p>非機能要件と呼ばれる通常の機能のように実装できないシステムの特性を表す用語があるが、その用語と同様のものとして機能横断要件というものを定義する。\n多くの機能横断要件は本番環境のみでしか検証することができず、4象限で大別すると性質テストに当てはまる。\nこれらに関しては極力自動化できるようにするが不可能な部分は手動になり、臨機応変な対応が求められる。\n多くの場合機能横断要件に関して検討されるのが遅いので、早めに考えるよう提案されている。</p>\n<h5 id=\"性能テスト\">性能テスト</h5>\n<p>上記の機能横断要件の一部性能面を満たしているか確認するテストである。\n性能テスト環境は本番環境と近しいものを用意する必要があり、努力が必要な場合が多いがボトルネックの特定など有意義な結果が得られる。</p>\n<h1 id=\"監視\">監視</h1>\n<h3 id=\"サービスについてのアドバイス\">サービスについてのアドバイス</h3>\n<ul>\n<li>最低でもインバウンド応答時間を追跡する。続いてエラー率、アプリケーションレベルのメトリクス。</li>\n<li>全ての下流のレスポンスの健全性を追跡する。最低でも下流呼び出しの応答時間を追跡し、可能ならエラー率も追跡する。</li>\n<li>メトリクスを収集する方法と場所を標準化する。</li>\n<li>可能なら標準的な場所に標準形式でログを記録する。</li>\n<li>基板となるOSを監視し、不正なプロセスを探し出して、キャパシティプランニングを実行できるようにする。</li>\n</ul>\n<h3 id=\"システムについてのアドバイス\">システムについてのアドバイス</h3>\n<ul>\n<li>CPU使用率のようなホストレベルメトリクスはアプリケーションレベルのメトリクスと一緒に集約する。</li>\n<li>メトリクス格納ツールを使用し、システムレベルまたはサービスレベルで集約、掘り下げができるようにする。</li>\n<li>メトリクス格納ツールでシステムの傾向を把握するのに十分な期間のデータを保持できるようにする。</li>\n<li>ログの集約と格納用にクエリ可能なツールを一つは導入する。</li>\n<li>相関IDの標準化を検討する。</li>\n<li>対応が必要な条件を理解し、アラートやダッシュボードを作成する。</li>\n</ul>\n<h1 id=\"セキュリティ\">セキュリティ</h1>\n<p>マイクロサービスを利用するとモノリシックサービスと比較して強固なセキュリティを築ける可能性が得られ、\nセキュリティの手法に関する自由度も上がる。\nSAMLやSSOなどの統合的な認証方法についてはさらに学ぶ必要があるが、その他は基本的なセキュリティ法則を遵守する。</p>\n<h1 id=\"マイクロサービスにおける留意点\">マイクロサービスにおける留意点</h1>\n<h3 id=\"指標\">指標</h3>\n<ul>\n<li>応答時間/遅延</li>\n<li>可溶性</li>\n<li>データの耐久性/損失性</li>\n</ul>\n<h3 id=\"システム障害への対処法\">システム障害への対処法</h3>\n<ul>\n<li>タイムアウト</li>\n<li>サーキットブレーカー</li>\n<li>隔壁</li>\n<li>分離</li>\n</ul>\n<h3 id=\"cap定理\">CAP定理</h3>\n<p>整合性(Consistency)、可用性(availability)、分断耐性(partition tolerance)の中で、\n故障モードでは二つを得る。三つ全てを保証することはできない。\n分断耐性を犠牲にすることはできないため、APシステムかCPシステムかで故障モードを考える必要がある。\nただし、どちらか一方に振り切る必要はない。</p>\n<h3 id=\"サービスレジストリ\">サービスレジストリ</h3>\n<ul>\n<li>DNS</li>\n<li>ZooKeeper</li>\n<li>Consul</li>\n<li>Eureka</li>\n<li>自作</li>\n</ul>\n<h3 id=\"サービスの文書化\">サービスの文書化</h3>\n<ul>\n<li>Swagger</li>\n<li>HALとHALブラウザ</li>\n</ul>\n<h1 id=\"マイクロサービスの原則\">マイクロサービスの原則</h1>\n<h3 id=\"ビジネス概念に沿ったモデル化\">ビジネス概念に沿ったモデル化</h3>\n<p>ビジネスで境界づけられたコンテキストを技術概念に基づいたインタフェースよりも優先する。</p>\n<h3 id=\"自動化の文化の採用\">自動化の文化の採用</h3>\n<p>管理するものが多く、複雑なマイクロサービスにおいて、</p>\n<ul>\n<li>自動テストは必須</li>\n<li>CI/CDは必須</li>\n<li>カスタムイメージ/環境定義/イミュータブルサーバは推奨</li>\n</ul>\n<h3 id=\"内部実装詳細の隠蔽\">内部実装詳細の隠蔽</h3>\n<p>境界づけられたコンテキストをモデル化し、共有すべきモデルと隠すべきモデルを調べる。\nサービスはデータベースを隠蔽し、データポンプや、イベントデータポンプを用いて\nレポートのために複数のサービスからのデータを集約する。</p>\n<h3 id=\"全ての分散化\">全ての分散化</h3>\n<p>チームにサービスを所有させる。\nオーケストレーションではなくコレオグラフィとダムミドルウェアを選び、高度なエンドポイントを持たせる。</p>\n<h3 id=\"独立したデプロイ\">独立したデプロイ</h3>\n<p>破壊的な変更が必要な時でもバージョン付けされたエンドポイントを共存させてコンシューマに対して後方互換性を持たせるべきである。\nホストごとに一つのサービスを持つようにするとブルーグリーンやカナリアといったリリーステクニックを使用できる。\nコンシューマ駆動契約を用いて、破壊的変更が起こる前にそれについて察知する。\nコンシューマが自ら更新のタイミングを決められるようにする。</p>\n<h3 id=\"障害の分離\">障害の分離</h3>\n<p>リモート呼び出しをローカル呼び出しのように扱ってはいけない。\n障害がどこでも起こりうることを念頭に対処法を施す。</p>\n<h3 id=\"高度な観測\">高度な観測</h3>\n<p>セマンティック監視を利用して、ログと統計データは集約する。</p>","ogImage":{"url":"/assets/blog/dynamic-routing/cover.jpg"},"coverImage":"/assets/blog/dynamic-routing/cover.jpg"}},"__N_SSG":true}