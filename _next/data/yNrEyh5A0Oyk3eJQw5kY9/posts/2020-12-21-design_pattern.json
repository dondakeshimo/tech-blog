{"pageProps":{"post":{"title":"デザインパターンについてまとめる","date":"2020-12-21","slug":"2020-12-21-design_pattern","author":{"name":"JJ Kasper","picture":"/assets/blog/authors/jj.jpeg"},"content":"<h1 id=\"目次\">目次</h1>\n<ul>\n<li><a href=\"#%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3\">デザインパターン</a>\n<ul>\n<li><a href=\"#iterator\">Iterator</a></li>\n<li><a href=\"#adapter\">Adapter</a>\n<ul>\n<li>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%E7%B6%99%E6%89%BF%E3%82%92%E7%94%A8%E3%81%84%E3%81%9F%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3\">継承を用いたパターン</a></li>\n<li><a href=\"#%E5%A7%94%E8%AD%B2%E3%82%92%E7%94%A8%E3%81%84%E3%81%9F%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3\">委譲を用いたパターン</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#template-method\">Template Method</a></li>\n<li><a href=\"#factory-method\">Factory Method</a></li>\n<li><a href=\"#singleton\">Singleton</a></li>\n<li><a href=\"#prototype\">Prototype</a></li>\n<li><a href=\"#builder\">Builder</a></li>\n<li><a href=\"#abstract-factory\">Abstract Factory</a></li>\n<li><a href=\"#bridge\">Bridge</a></li>\n<li><a href=\"#strategy\">Strategy</a></li>\n<li><a href=\"#composite\">Composite</a></li>\n<li><a href=\"#decorator\">Decorator</a></li>\n<li><a href=\"#visitor\">Visitor</a></li>\n<li><a href=\"#chain-of-responsibility\">Chain of Responsibility</a></li>\n<li><a href=\"#facade\">Facade</a></li>\n<li><a href=\"#mediator\">Mediator</a></li>\n<li><a href=\"#observer\">Observer</a></li>\n<li><a href=\"#memento\">Memento</a></li>\n<li><a href=\"#state\">State</a></li>\n<li><a href=\"#flyweight\">Flyweight</a></li>\n<li><a href=\"#proxy\">Proxy</a></li>\n<li><a href=\"#command\">Command</a></li>\n<li><a href=\"#interpreter\">Interpreter</a></li>\n</ul>\n</li>\n<li><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">まとめ</a></li>\n</ul>\n<h1 id=\"デザインパターン\">デザインパターン</h1>\n<h2 id=\"iterator\">Iterator</h2>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>上記のような基本的なループは集合体のスキャンを行っている。\n上記において一時変数 <code>i</code> の働きを抽象化し、一般化したものをIteratorパターンと呼ぶ。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Iterator</span> it <span class=\"token operator\">=</span> <span class=\"token class-name\">SampleAggregate</span><span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Sample</span> sample <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Sample</span><span class=\"token punctuation\">)</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>sample<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Iteratorインタフェースによって終了条件と「次」の要素の抽出を抽象化している。\nこのことで、Sampleクラスの実装とスキャンを独立させることができている。\nSampleAggregateがどのようなコンテナを使用しても上記のコードに手を加える必要がない。</p>\n<h2 id=\"adapter\">Adapter</h2>\n<p>「すでに提供されているもの」と「必要なもの」のズレを埋めるためのデザインパターン。\n知られている実装方法として継承を用いたものと以上を用いたものがある。\n「すでに提供されているもの」をTarget、「必要なもの」をAdaptee、「ズレを埋めるもの」をAdapterとする。</p>\n<h5 id=\"継承を用いたパターン\">継承を用いたパターン</h5>\n<p>Targetをインターフェースとしたパターン。\nこの場合、単一継承のみ可能なJavaでもAdapteeを継承できる。\n特にひねりもなくAdapterパターンを使用する時はこちらのパターンで十分と考えられる。\nAdapterの宣言が下記のようになる。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Adapter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Adaptee</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Target</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5 id=\"委譲を用いたパターン\">委譲を用いたパターン</h5>\n<p>Targetをクラスとしたパターン。\nTargetにstatic functionが必要な場合や、Adapteeを継承すると可読性が落ちるような場合は\nAdapteeを委譲することでAdapterパターンを使用することができる。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Adapter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Target</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Adaptee</span> adaptee<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">targetFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        adaptee<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>既にある十分に時の試練に耐えた実用的なクラスがあった時、そのクラスを利用したいと考えるのは自然である。\nその際に、既にあるクラスと今必要なメソッドの小さなズレを解消するために\n既にあるクラスを修正してしまった場合、既にあるクラスはまた十分なテストを行う必要が生まれる。\nAdapterパターンを用いて既にあるクラスに何も手を加えずに利用した場合は、何かバグが発生しても基本的には\nAdapter, Targetのみを疑えば良いことになる。\nまた、互換性を生み出す際にもAdapterパターンを使用することは有用であり、\nこの場合は旧バージョンにAdapterパターンを適用することでVersionが異なりインターフェースが変わっても動作するようにできる。</p>\n<h2 id=\"template-method\">Template Method</h2>\n<p>抽象クラスを用いて必要なメソッドと、その利用方法のロジックを先に定義する手法。\n抽象クラスにはサブクラスに実装を任せるための抽象メソッドと、抽象クラスから提供するfinalメソッドがある。\nサブクラスは抽象メソッド実装し、clientコードは抽象クラスを型としたサブクラスをインスタンス化することで、\n同様のfinalメソッドから異なるロジックを引き出すことができる。\nこのパターンの最も大きな恩恵はfinalメソッドを抽象クラスで定義することで生まれる。\nfinalメソッド内のロジックはどのサブクラスをインスタンス化しても共通のため、\nバグが生まれた箇所を見つけやく、もしfinalメソッドのロジックにバグがあったとしても一箇所中傷メソッドを書き換えればよい。</p>\n<h2 id=\"factory-method\">Factory Method</h2>\n<p>Template Methodパターンの応用である。\nインスタンスの生成についてTemplate Methodパターンを用いることで、インスタンス生成時のロジックを一様化できる。\nインスタンスの生成を担うクラスをFactory、生成されるインスタンスをProductと置くと</p>\n<pre class=\"language-java\"><code class=\"language-java\">pacakge framework<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Product</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">framework</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Factory</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Product</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> owner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Product</span> p <span class=\"token operator\">=</span> create <span class=\"token class-name\">Product</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">registerProduct</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">Product</span> <span class=\"token function\">createProduct</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> owner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">registerProduct</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Product</span> product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>上記のように記述することで、</p>\n<ul>\n<li>インスタンス生成のために <code>create</code> を用いること</li>\n<li>Stringを引数と取るコンストラクタをProductに記載すること</li>\n<li>Factoryのサブクラスは <code>createProduct</code>, <code>registerProduct</code> を実装すること</li>\n</ul>\n<p>がわかる。\n実際にこれらの抽象クラスを適用するサブクラスについてはpackageレベルで独立させることが可能となる。</p>\n<h2 id=\"singleton\">Singleton</h2>\n<ul>\n<li>指定したクラスのインスタンスが絶対に一つしか存在しないことを保証したい</li>\n<li>インスタンスが一つしか存在しないことをプログラム上で表現したい</li>\n</ul>\n<p>時に使用されるパターンがSingletonパターンである。\nコンストラクタをprivateにして、staticフィールドに自クラスのインスタンスを生成し、\nそのインスタンスを返却するstatic publicな関数を定義することで実現できる。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"インスタンスを生成しました。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> singleton<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>上記のFactory MethodパターンにおけるFactoryなどもこのようにSingletonとして記述されることが多い。</p>\n<h2 id=\"prototype\">Prototype</h2>\n<ul>\n<li>種類が多すぎてクラスにまとめられない場合</li>\n<li>クラスからのインスタンス生成が難しい場合</li>\n<li>フレームワークと生成するインスタンスを分けたい場合</li>\n</ul>\n<p>このような場合、クラス名を指定してインスタンスを生成することが困難となる。\nインスタンスから別のインスタンスを生成するパターンをPrototypeパターンと呼び、上記のような課題を解決することができる。</p>\n<p>図形エディタアプリケーションを作成することを想定する。\n三角や四角などオブジェクトをObjectインタフェースとして定義し、\n個々のオブジェクトの詳細実装をTriangleObject, RectangleObjectなどとする。\nまた、それらのインスタンスを管理するクラスをManager、メインの処理系を記述するクラスをMainクラスとする。</p>\n<p>Objectインタフェースは <code>java.lang.Cloneable</code> インタフェースを継承する。\n上記インタフェースを継承することで、インスタンスのコピー生成が可能になる。</p>\n<p>Managerクラスで個々のインスタンスを管理するが、ここでTriangleObjectについて色の情報を付与する必要があるとしよう。\nManagerクラスで行えることはインスタンスのコピーと登録である。\nManagerクラス内のmapにインスタンスの名称(String)とインスタンスを格納している。\nさて、色情報についてだがTriangleObjectのコンストラクタに渡して色情報を付与することが自然であろう。\nMainクラスでManagerクラスに機械的に色情報を付与したインスタンスを生成し格納していく。\n事前に色情報を付与したインスタンスを生成しておくことで、コピーの下準備が完了する。</p>\n<p>マウスを用いた図形エディタを考えると、\n図形の座標、スケール、回転角、アスペクト比などが必要になると考えられ、\nそれらのコピーをエディタ上でを行う際に\n1からコンストラクタやセッターに図形の座標などの情報を引き渡すよりも\nインスタンスを丸ごとクローンできた方が圧倒的に楽である。</p>\n<p>説明が紆余曲折した気がするが、これは私がこのパターンの利点を理解するまでに時間がかかったためである。\nこのパターンの主な利点はコピー可能性であり、\nインスタンスを動的に作成する必要がある時に発揮されると考えている。</p>\n<h2 id=\"builder\">Builder</h2>\n<p>ビルを建てる時のように基盤から段階的に組み立てていき最終的なインスタンスを生成するパターンである。</p>\n<p>登場するクラスは4つであり、\nメインプロセスを担当するClient, 実際に組み立てを行うDirector, 組み立ての手順を規定するBuilder,\n手順に従って実質的な処理を記載したConcreteBuilderとなる。</p>\n<p>Builderは抽象クラスで必要となるすべての手順を先んじて記載しておく必要がある。\nDirectorは抽象クラスBUilderを用いて構築手順の通りメソッドを呼ぶ。\nConcreteBuilderは実際に使用されるクラスであり、Builderを継承した後に必要な処理を記載する。\n以上を踏まえた上でClientのコードを下記に示す。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ConcreteBuilder</span> concreteBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcreteBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Director</span> director <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Director</span><span class=\"token punctuation\">(</span>concreteBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        director<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> concreteBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Builderパターンは交換可能性について大きなアドバンテージを得ることができる。\nその反面、Builderクラスには必要十分なメソッド群をあらかじめ定義しておく必要があり、\n設計の難易度が高いパターンや、修正の難しいパターンとも言える。</p>\n<p><em>私見: クラスメソッドのたびに自分のインスタンスを返すことでメソッドチェーンができるようになっているクラスを\nよくBuilderクラスと呼んでいることが多い気がするのだが、それとは別のパターンのようである。</em></p>\n<h2 id=\"abstract-factory\">Abstract Factory</h2>\n<p>Factoryパターンが決められた手順で製品単体を生み出すパターンだとすれば、\nAbstract Factoryパターンは複数の製品群を組み合わせるパターンである。</p>\n<p>メインプロセスを担当するClientの他に、Factoryの動作を定義するAbstractFactory抽象クラス、\n製品のAPIを規定するAbstractProduct抽象クラス、\n実際のFactory動作を記述したConcreteFactoryクラス、\n実際の製品の挙動を記したConcreteProductクラスが必要なクラスとなる。\nここで、Productクラスについては複数ある方が自然である。</p>\n<p>Factoryクラスでは各Productのインスタンスを作成し返す関数を定義する。\nまた、依存関係を減らすためにAbstractFactoryクラスにはstatic関数として</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Factory</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Factory</span> <span class=\"token function\">getFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> classname<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Factory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            factory <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Factory</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>classname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"クラス \"</span> <span class=\"token operator\">+</span> classname <span class=\"token operator\">+</span> <span class=\"token string\">\" が見つかりません。\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> factory<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">ProductA</span> <span class=\"token function\">createProductA</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">ProductB</span> <span class=\"token function\">createProductB</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProductA</span> productA<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Amount</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">ProductC</span> <span class=\"token function\">createProductC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>のようにクラス名をStringで渡してインスタンスを生成できるようにしておくとよい。</p>\n<p>これらを踏まえた上でMain関数は下記のようになる。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">factory<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Factory</span> factory <span class=\"token operator\">=</span> <span class=\"token class-name\">Factory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFactory</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">ProductA</span> productA1 <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">createProductA</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ProductA</span> productA2 <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">createProductA</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">ProductB</span> productB1 <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">createProductB</span><span class=\"token punctuation\">(</span>productA1<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ProductB</span> productB2 <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">createProductB</span><span class=\"token punctuation\">(</span>productA2<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">ProductC</span> productC <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">createProductC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        productC<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>productB1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        productC<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>productB2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        productC<span class=\"token punctuation\">.</span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Abstract Factoryパターンにおいて、ConcreteFactoryの種類を増やすことは容易である。\nただし、組み立てに必要な部品(製品)を増やすことは抽象クラスから書き換える必要があるため、面倒である。\nそれぞれのConcreteFactory, ConcreteProductの単位でパッケージングを行えばより再利用が容易なものができるが、\n機械学習においてパイプラインを構築する際に使用する場合は、部品をすべて同一のパッケージに入れておき、\nFactoryで各組み合わせを試していく実装を大量に用意するなどの書き方が良さそう。</p>\n<h2 id=\"bridge\">Bridge</h2>\n<ul>\n<li>機能の追加</li>\n<li>機能の実装</li>\n</ul>\n<p>のどちらかを行うために一般にサブクラスは実装される。\nただし、どちらも同様にスーバークラスから派生したサブクラスを作るだけのためこれらの意図は混在してしまう。\nうまくこれらの階層を分離するためのパターンがBridgeパターンである。</p>\n<p>ここでは実装が必要な部分とクラスのAPIを分離して考え、\nAPIを定義したAbstraction抽象クラスを作成し、実質的な実装の必要な箇所をImplementor抽象クラスに委譲する。\nこのように実装が必要な箇所とAPIを定義する箇所に分離しておけば、</p>\n<ul>\n<li>機能の追加を行う場合はAbstractionクラスを継承してクラス作成</li>\n<li>機能の実装を行う場合はImplementorクラスを継承してクラス作成</li>\n</ul>\n<p>と言うようにサブクラスを作成する際の意図を明確にクラス図として示せるようになる。</p>\n<h2 id=\"strategy\">Strategy</h2>\n<p>ソースコードのうち、アルゴリズムの部分のみを抽出しモジュール化する考え方。\nアルゴリズムに必要なAPIとシグネチャのみ先に定めてしまい、実際にそれを利用するクラスでは\nアルゴリズムを委譲して使用する。\n委譲によって複数のアルゴリズムを切り替えることが容易になっている。</p>\n<p>Abstract Factoryパターンなどとの主な差別化は着目しているものがアルゴリズムであることであろう。\nこれまではオブジェクト指向におけるオブジェクトの共有化等について考えてきたが、\nアルゴリズムの分離については考えてこなかった。\nアルゴリズムについてもオブジェクトと捉えることでプログラムの再利用性や疎結合性、テスト可能性が広がっていく。</p>\n<h2 id=\"composite\">Composite</h2>\n<p>端的に言うとマトリョーシカのようなパターンである。\n代表的にファイルシシテムが挙げられ、「ディレクトリ」の中に「ディレクトリ」を入れることが可能である。\nこのような入子構造について表現する際に使えるのがCompositeパターンとなる。</p>\n<p>中身を表すLeafクラス、容器を表すCompositeクラス、LeafとCompositeを同一視するためのComponentクラスの3つを定義する必要がある。</p>\n<p>上記でほとんど説明が済んだようなものだが、容器と中身を同一視することで入子構造が容易に表現できるようになる。</p>\n<p>ファイルシステムを考えた場合、Componentの追加を行う関数をどこで実装するかはいくつかのパターンに分けられる。</p>\n<ul>\n<li>Componentクラスに実装しエラーを発生させる。Compositeクラスではoverrideを行う。</li>\n<li>Componentクラスに実装しエラーにしない。Leafクラスにも実装せずファイルの場合何も起こらない。</li>\n<li>Componentクラスで宣言し実装はCompositeクラス、Leafクラスで行う。</li>\n<li>Componentクラスには何も書かず、Compositeクラスにのみ定義する。使用する際はCompositeクラスへのキャストを毎回試みる。</li>\n</ul>\n<p>再起的な構造を表現する際に一考するとよい。</p>\n<h2 id=\"decorator\">Decorator</h2>\n<p>あるクラスについて外側から何かを追加し、また追加されたものも含めて元のクラスと同一視するクラスである。</p>\n<p>Componentクラスは上記のCompositeパターンと同様、同一視する元となるクラスを表す。\nConcreteComponentクラスは最も大元となるComponentクラスの実装者である。\nDecoratorクラスはComponentクラスと同様のAPIを持ち、Componentクラスをメンバーとして保持する。\nConcreteDecoratorクラスはDecoratorクラスの実装であり、メンバーであるComponentクラスのメソッドを用いて、\n付加価値をつけながら同一APIを提供する。</p>\n<p>このように元のComponentクラスにいくつかの衣装を着せるように機能を追加していくことで、\n中身を変えずに機能の追加が行えたり、動的な機能追加を実現することができる。</p>\n<p>ただし、問題点としてはよく似た小さいクラスが幾つも生まれてしまうと言うものがある。</p>\n<h2 id=\"visitor\">Visitor</h2>\n<p>処理と構造を分離するためのパターンである。\nCompositeパターンに代表されるように構造化されたクラス群を扱う際に、\nそのクラスに直接処理を書き込むことはいたずらに修正箇所を増やすことにつながりかねない。\nそのため、処理を構造から分離しVisitorという形で構造に沿って再帰的に呼び出させることで実装する。</p>\n<p>Visitorではvisitメソッドを構造における要素の種類分overloadして定義する。\nConcreteVisitorでは実際の処理を定義する。ここで、再帰的に処理を実現する必要があるが、\nIteratorパターンや、ダブルディスパッチをうまく利用して実現する。\nElementはVisitorの訪問先である。Visitorのためのダブルディスパッチ用関数として <code>public void accept(visitor)</code> を用意しておくとよい。\nObjectStructureは構造が定義されているクラスである。Elementのサブクラスとなることが多い。Iterator等、構造において次に繋がる処理を記述しておく必要がある。</p>\n<p>基本的にはVisitorクラスのvisitメソッドに構造データを渡せば、再帰的にvisitメソッドとacceptメソッドが相互依存して呼び出され、最終的なnode, leafにたどり着く。</p>\n<p>一般にConcreteVisitorを増やすことは容易だが、Elementの種類を増やすことは面倒である。</p>\n<h2 id=\"chain-of-responsibility\">Chain of Responsibility</h2>\n<p>効率的にたらい回しを行うためのパターンである。</p>\n<p>処理者を規定するHandler抽象クラス、実装されたConcreteHandlerクラスが主なクラスである。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Handler</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Handler</span> next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Handler</span> <span class=\"token function\">setNext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Handler</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Event</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">done</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            next<span class=\"token punctuation\">.</span><span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">fail</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Event</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Event</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>event <span class=\"token operator\">+</span> <span class=\"token string\">\" is resolved by \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Event</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>event <span class=\"token operator\">+</span> <span class=\"token string\">\" cannot be resolved.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>上記のようにsetNextメソッドなどで次のたらい回し先を決めておくことで、処理を順繰りに行っていく。\n直接的なswitch-caseなどよりは処理が遅くなるが、処理内容や条件の独立性が担保される。</p>\n<h2 id=\"facade\">Facade</h2>\n<p>Facadeは「建物の正面」という意味を持った言葉であり、実質的に必要な処理に対してユースケースが限られ、\n外部に提供するAPIを絞ることが可能なときにその処理の窓口としてFacadeクラスを提供することで、\nClient目線でプログラムの可読性を上げるパターンである。</p>\n<p>複数クラスに処理がまたがっている場合でも、それらをまとめて行う決まった手順などがあり、\n外部から必要な引数などが限られている場合は、全てをラッピングして新しいFacadeクラスを作ることで\n単純な呼び出しによって処理を完遂することが可能になる。</p>\n<h2 id=\"mediator\">Mediator</h2>\n<p>多数のオブジェクトの間の調整を行わなければならない時に、Mediatorパターンは役に立つ。</p>\n<p>Mediatorインタフェースは調整の中心であり、\n全てのColleagueクラスをメンバーとして保持していることを前提としたそれらの振る舞いについて規定するメソッドを定義している。\nConcreteMediatorクラスは実際に全てのColleagueクラスをメンバにもち処理について実装する。\nColleague抽象クラスはメンバーとしてMediatorインタフェースを所有し、自インスタンスの振る舞いについてのメソッドが定義され、\nConcreteColleagueクラスにより実装される。\nこの際、メソッドには他のインスタンスとの協調部分については書かず、あくまで自インスタンスの振る舞いの範疇で記述する。</p>\n<p>上記のようにすることで、複雑な複数のオブジェクトの協調処理を中央集中的に管理することができ、\n複雑な処理のデバッグ箇所を大幅に減らすことができる。</p>\n<h2 id=\"observer\">Observer</h2>\n<p>このパターンは状態の管理を監視するためのパターンである。</p>\n<p>主要なクラスは4つであり、</p>\n<ul>\n<li>Subject</li>\n<li>ConcreteSubject</li>\n<li>Observer</li>\n<li>ConcreteObserver</li>\n</ul>\n<p>となる。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Observer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Subject</span> subject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Iterator</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Subject</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ArrayList</span> observers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addObserver</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Observer</span> observer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        observers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deleteObserver</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Observer</span> observer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        observers<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">notifyObservers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Iterator</span> it <span class=\"token operator\">=</span> observers<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Observer</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Observer</span><span class=\"token punctuation\">)</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            o<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>上記のようにSubjectは自分に必要な観察者を自身で保有し、\n必要なタイミングで通知を飛ばすようにする。\nObserverはupdateに記載された処理を行う。</p>\n<h2 id=\"memento\">Memento</h2>\n<p>状態の保存を行う時に考えられるパターンである。</p>\n<p>OrigiatorクラスがMementoクラスを作成することで、Origiatorクラスのある状態を保存する。\nこの時、Mementoクラスにアクセスできるのは基本的にOrigiatorクラスに制限され、\n外部へのAPIとしてはnarrow interfaceのみを提供するようにする。\nnarrow interfaceではMementoクラスの状態を操作することはできず、\n可能なことは公開データの取得程度にとどまる。\nOrigiatorクラスにその状態を保存しろと指示し、保存されたMementoクラスを管理するクラスとしてCaretakerクラスも定義するとよい。\nこうすることで、Mementoクラスの管理、操作に関する処理をOrigiatorクラスから分離し、複雑になりがちな\nMementoクラスの保存条件や、保存期間などを独立して考えることができる。</p>\n<h2 id=\"state\">State</h2>\n<p>状態をクラスとして保持するパターンである。\nこれまではオブジェクトや処理について着目していたが、今回は状態について着目する。</p>\n<p>このパターンに当然必要になるのがStateクラスである。ここでは状態に依存した振る舞いをするメソッドを定義する。\nConcreteStateクラスは実際の状態ごとに定義される。状態の数だけConcreteStateクラスが実装されることとなる。\nContextクラスは現在の状態を表すConcreteStateクラスを保持し、ダックタイピングを使用して必要なメソッドを引き出す。</p>\n<p>状態に依存した処理をダックタイピングで捌けることが最大のメリットである。</p>\n<p>このパターンにおいて、状態遷移を誰が管理するのかは非常に重要である。\nContextクラスからConcreteStateクラスの実態を分離する場合は状態遷移を行うのはConcreteStateクラス内が良い。\nこの場合は、状態遷移に変更を加える必要が出てきた際に変更範囲が各ConcreteStateクラスになるというデメリットを受容する。\n逆にContextクラスにおいて全ての状態遷移を管理するという方法もあるが、この場合はConcreteStateクラスと密結合になる。\nその他に状態遷移のテーブルを使用する方法や、独立したクラスをさらに用意する方法などが考えられる。</p>\n<h2 id=\"flyweight\">Flyweight</h2>\n<p>flyweightはご想像の通り「フライ級」のことであり、メモリ量を節約するためのデザインパターンである。\nメモリ量の削減をFlyweightパターンはインスタンスの共有によって実現する。</p>\n<p>Flyweightクラスは共有したいプログラムである。\n基本的には複雑な状態を持たず、放っておけば何度も新規インスタンスが作成されるものが対象となる。\nFlyweightFactoryクラスはFlyweightクラスのインスタンスを作成し、自身のインスタンスの中に保持する。\n2回目以降、Flyweightクラスが必要になった際はすでに作成して保持してあるインスタンスを返却する。</p>\n<p>Flyweightクラスが複数箇所に共有して持たせるクラスとなるため、本当に共有して問題ないかを吟味する必要がある。\n一行の改変で思いもよらない場所に影響を与える可能性がある。</p>\n<h2 id=\"proxy\">Proxy</h2>\n<p>proxyは「代理人」を意味する英単語で、このパターンでは実際に処理を行うクラスの前段に代理のクラスを立てる。</p>\n<p>このパターンは単純でSubject抽象クラスあるいはインタフェースが対象の振る舞いを規定する。\nその上で、ProxyクラスとRealSubjectクラスが実装され、ClientはProxyクラスを呼び出す。\n例えば、Proxyクラスには重たい処理をおかずに軽い処理のみを記述し、思い処理が必要になった場合のみ、\nRealSubjectクラスのインスタンスを作成し処理を委譲する。\nこの仕組みよって、可能な限り軽い動作で処理を行うことができる。\nまた、HTTPにおいて有名なキャッシュ機能をProxyクラスに持たせることも可能である。\n頭の片隅においておく必要があることはRealSubjectクラスはProxyクラスに依存せず、\n逆にProxyクラスはRealSubjectクラスに依存することである。</p>\n<h2 id=\"command\">Command</h2>\n<p>オブジェクト、処理、状態のクラスを紹介したが、今回は命令のクラス化である。\nCommandパターンはEventパターンと呼ばれることもあり、特にGUIの開発では「イベント」がよく登場する。</p>\n<p>Commandクラスは命令のインタフェースを定義し、これを実装するのがConcreteCommandクラスである。\nCommandクラスの処理の対象となるクラスをReceiverクラスとし、Commandクラスの命令実行インタフェースを起動するのがInvokerクラスとなる。</p>\n<p>命令をクラス化することで履歴の保存が容易になる。\n命令が持つ情報量には気を使う必要がある。不要な情報まで持たせることはよくない。</p>\n<h2 id=\"interpreter\">Interpreter</h2>\n<p>このパターンではプログラムが解決しようとしている問題を簡単な「ミニ言語」で表現する。\n正規表現などがこれにあたる。\n詳細がややこしすぎるので踏み込まないが、文字列に対して構文解析を行いややこしい処理を文字列で起こすことを可能にする。\nあるいはパターン化された処理の簡潔な表現を生み出すことが目的である。</p>\n<h1 id=\"まとめ\">まとめ</h1>\n<ul>\n<li>何を主眼に置くかが重要\n<ul>\n<li>一番拡張したい場所に注目\n<ul>\n<li>種類の増えるクラス</li>\n<li>足していきたい機能群</li>\n</ul>\n</li>\n<li>一番修正の多い箇所に注目\n<ul>\n<li>クラスのデータ構造</li>\n<li>メソッドを呼び出す手順</li>\n</ul>\n</li>\n<li>一番複雑な箇所に注目\n<ul>\n<li>アルゴリズム</li>\n<li>データ構造</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>拡張したい場所はなるだけ疎結合に</li>\n<li>修正の多い箇所はなるだけ一箇所に</li>\n<li>一番複雑な箇所はなるだけ一箇所で独立させて</li>\n</ul>","ogImage":{"url":"/assets/blog/dynamic-routing/cover.jpg"},"coverImage":"/assets/blog/dynamic-routing/cover.jpg"}},"__N_SSG":true}