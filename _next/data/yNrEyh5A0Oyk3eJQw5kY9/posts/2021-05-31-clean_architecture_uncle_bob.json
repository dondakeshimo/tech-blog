{"pageProps":{"post":{"title":"クリーンアーキテクチャをまとめる","date":"2021-05-31","slug":"2021-05-31-clean_architecture_uncle_bob","author":{"name":"JJ Kasper","picture":"/assets/blog/authors/jj.jpeg"},"content":"<h1 id=\"目次\">目次</h1>\n<ul>\n<li><a href=\"#%E5%8B%95%E6%A9%9F\">動機</a></li>\n<li><a href=\"#%E8%A8%AD%E8%A8%88%E3%81%AE%E5%8E%9F%E5%89%87\">設計の原則</a>\n<ul>\n<li><a href=\"#%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%83%91%E3%83%A9%E3%83%80%E3%82%A4%E3%83%A0\">プログラミングパラダイム</a>\n<ul>\n<li><a href=\"#%E6%A7%8B%E9%80%A0%E5%8C%96%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0\">構造化プログラミング</a></li>\n<li><a href=\"#%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%8C%87%E5%90%91%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0\">オブジェクト指向プログラミング</a></li>\n<li><a href=\"#%E9%96%A2%E6%95%B0%E5%9E%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0\">関数型プログラミング</a></li>\n<li><a href=\"#%E3%83%91%E3%83%A9%E3%83%80%E3%82%A4%E3%83%A0%E3%81%AE%E3%81%BE%E3%81%A8%E3%82%81\">パラダイムのまとめ</a></li>\n</ul>\n</li>\n<li><a href=\"#solid%E5%8E%9F%E5%89%87\">SOLID原則</a>\n<ul>\n<li><a href=\"#%E5%8D%98%E4%B8%80%E8%B2%AC%E4%BB%BB%E3%81%AE%E5%8E%9F%E5%89%87-srp-single-responsibility-principle\">単一責任の原則 (SRP: Single Responsibility Principle)</a></li>\n<li><a href=\"#%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3%E3%83%BB%E3%82%AF%E3%83%AD%E3%83%BC%E3%82%BA%E3%83%89%E3%81%AE%E5%8E%9F%E5%89%87-ocp-open-closed-principle\">オープン・クローズドの原則 (OCP: Open-Closed Principle)</a></li>\n<li><a href=\"#%E3%83%AA%E3%82%B9%E3%82%B3%E3%83%95%E3%81%AE%E7%BD%AE%E6%8F%9B%E5%8E%9F%E5%89%87-lsp-liskov-substitution-principle\">リスコフの置換原則 (LSP: Liskov Substitution Principle)</a></li>\n<li><a href=\"#%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%95%E3%82%A7%E3%82%A4%E3%82%B9%E5%88%86%E9%9B%A2%E3%81%AE%E5%8E%9F%E5%89%87-isp-interface-segregation-principle\">インターフェイス分離の原則 (ISP Interface Segregation Principle)</a></li>\n<li><a href=\"#%E4%BE%9D%E5%AD%98%E9%96%A2%E4%BF%82%E9%80%86%E8%BB%A2%E3%81%AE%E5%8E%9F%E5%89%87-dip-dependency-inversion-principle\">依存関係逆転の原則 (DIP: Dependency Inversion Principle)</a></li>\n</ul>\n</li>\n<li><a href=\"#%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E5%8E%9F%E5%89%87\">コンポーネントの原則</a>\n<ul>\n<li><a href=\"#%E5%86%8D%E5%88%A9%E7%94%A8%E3%83%BB%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E7%AD%89%E4%BE%A1%E3%81%AE%E5%8E%9F%E5%89%87-rep\">再利用・リリース等価の原則 (REP)</a></li>\n<li><a href=\"#%E9%96%89%E9%8E%96%E6%80%A7%E5%85%B1%E9%80%9A%E3%81%AE%E5%8E%9F%E5%89%87-ccp\">閉鎖性共通の原則 (CCP)</a></li>\n<li><a href=\"#%E5%85%A8%E5%86%8D%E5%88%A9%E7%94%A8%E3%81%AE%E5%8E%9F%E5%89%87-crp\">全再利用の原則 (CRP)</a></li>\n<li><a href=\"#rep-ccp-crp%E3%81%AE%E9%96%A2%E4%BF%82\">REP, CCP, CRPの関係</a></li>\n<li><a href=\"#%E9%9D%9E%E5%BE%AA%E7%92%B0%E4%BE%9D%E5%AD%98%E9%96%A2%E4%BF%82%E3%81%AE%E5%8E%9F%E5%89%87-adp\">非循環依存関係の原則 (ADP)</a></li>\n<li><a href=\"#%E5%AE%89%E5%AE%9A%E4%BE%9D%E5%AD%98%E3%81%AE%E5%8E%9F%E5%89%87-sdp\">安定依存の原則 (SDP)</a></li>\n<li><a href=\"#%E5%AE%89%E5%AE%9A%E5%BA%A6%E3%83%BB%E6%8A%BD%E8%B1%A1%E5%BA%A6%E7%AD%89%E4%BE%A1%E3%81%AE%E5%8E%9F%E5%89%87-sap\">安定度・抽象度等価の原則 (SAP)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3\">アーキテクチャ</a>\n<ul>\n<li><a href=\"#%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0\">システム</a>\n<ul>\n<li><a href=\"#%E9%96%8B%E7%99%BA\">開発</a></li>\n<li><a href=\"#%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4\">デプロイ</a></li>\n<li><a href=\"#%E9%81%8B%E7%94%A8\">運用</a></li>\n<li><a href=\"#%E4%BF%9D%E5%AE%88\">保守</a></li>\n</ul>\n</li>\n<li><a href=\"#%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%88%E3%81%AE%E6%80%9D%E8%80%83\">アーキテクトの思考</a>\n<ul>\n<li><a href=\"#%E9%81%B8%E6%8A%9E%E8%82%A2\">選択肢</a></li>\n<li><a href=\"#%E5%88%87%E3%82%8A%E9%9B%A2%E3%81%97\">切り離し</a></li>\n<li><a href=\"#%E5%A2%83%E7%95%8C%E7%B7%9A\">境界線</a>\n<ul>\n<li><a href=\"#%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%95%E3%82%A7%E3%82%A4%E3%82%B9%E3%81%A8%E7%B6%99%E6%89%BF\">インターフェイスと継承</a></li>\n<li><a href=\"#%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88\">デプロイコンポーネント</a></li>\n<li><a href=\"#%E3%82%B9%E3%83%AC%E3%83%83%E3%83%89\">スレッド</a></li>\n<li><a href=\"#%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9\">ローカルプロセス</a></li>\n<li><a href=\"#%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9\">サービス</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3-1\">アーキテクチャ</a>\n<ul>\n<li><a href=\"#%E6%96%B9%E9%87%9D%E3%81%A8%E3%83%AC%E3%83%99%E3%83%AB\">方針とレベル</a></li>\n<li><a href=\"#%E3%83%93%E3%82%B8%E3%83%8D%E3%82%B9%E3%83%AB%E3%83%BC%E3%83%AB\">ビジネスルール</a>\n<ul>\n<li><a href=\"#%E3%82%A8%E3%83%B3%E3%83%86%E3%82%A3%E3%83%86%E3%82%A3\">エンティティ</a></li>\n<li><a href=\"#%E3%83%A6%E3%83%BC%E3%82%B9%E3%82%B1%E3%83%BC%E3%82%B9\">ユースケース</a></li>\n<li><a href=\"#%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%81%A8%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B9%E3%81%AE%E3%83%A2%E3%83%87%E3%83%AB\">リクエストとレスポンスのモデル</a></li>\n<li><a href=\"#%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%A8%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3\">フレームワークとアーキテクチャ</a></li>\n</ul>\n</li>\n<li><a href=\"#%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3\">クリーンアーキテクチャ</a>\n<ul>\n<li><a href=\"#%E5%84%AA%E3%82%8C%E3%81%9F%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3%E3%81%AE%E7%89%B9%E6%80%A7\">優れたアーキテクチャの特性</a></li>\n<li><a href=\"#%E4%BE%9D%E5%AD%98%E6%80%A7%E3%81%AE%E3%83%AB%E3%83%BC%E3%83%AB\">依存性のルール</a></li>\n<li><a href=\"#%E5%A2%83%E7%95%8C%E7%B7%9A%E3%81%AE%E8%B6%8A%E3%81%88%E6%96%B9\">境界線の越え方</a></li>\n<li><a href=\"#%E5%A2%83%E7%95%8C%E7%B7%9A%E3%82%92%E8%B6%8A%E3%81%88%E3%82%8B%E3%83%87%E3%83%BC%E3%82%BF\">境界線を越えるデータ</a></li>\n</ul>\n</li>\n<li><a href=\"#%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%95%E3%82%A7%E3%82%A4%E3%82%B9%E3%82%A2%E3%83%80%E3%83%97%E3%82%BF%E3%83%BC\">インターフェイスアダプター</a>\n<ul>\n<li><a href=\"#humble-object\">Humble Object</a></li>\n<li><a href=\"#presenter%E3%81%A8view\">PresenterとView</a></li>\n<li><a href=\"#%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9%E3%81%A8%E3%82%B2%E3%83%BC%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A4\">データベースとゲートウェイ</a></li>\n<li><a href=\"#%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%83%AA%E3%82%B9%E3%83%8A%E3%83%BC\">サービスリスナー</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%A2%83%E7%95%8C\">境界</a></li>\n<li><a href=\"#%E3%83%A1%E3%82%A4%E3%83%B3%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88\">メインコンポーネント</a></li>\n<li><a href=\"#%E8%A9%B3%E7%B4%B0\">詳細</a></li>\n<li><a href=\"#%E8%A8%AD%E8%A8%88%E6%89%8B%E9%A0%86\">設計手順</a>\n<ul>\n<li><a href=\"#%E3%82%A2%E3%82%AF%E3%82%BF%E3%83%BC%E3%81%A8%E3%83%A6%E3%83%BC%E3%82%B9%E3%82%B1%E3%83%BC%E3%82%B9%E3%81%AE%E6%B4%97%E3%81%84%E5%87%BA%E3%81%97\">アクターとユースケースの洗い出し</a></li>\n<li><a href=\"#%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3\">コンポーネントアーキテクチャ</a></li>\n<li><a href=\"#%E4%BE%9D%E5%AD%98%E6%80%A7%E7%AE%A1%E7%90%86\">依存性管理</a></li>\n</ul>\n</li>\n<li><a href=\"#%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%83%B3%E3%82%B0\">パッケージング</a>\n<ul>\n<li><a href=\"#%E3%83%AC%E3%82%A4%E3%83%A4%E3%83%BC%E3%81%AB%E3%82%88%E3%82%8B%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%83%B3%E3%82%B0\">レイヤーによるパッケージング</a></li>\n<li><a href=\"#%E6%A9%9F%E8%83%BD%E3%81%AB%E3%82%88%E3%82%8B%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%83%B3%E3%82%B0\">機能によるパッケージング</a></li>\n<li><a href=\"#%E3%83%9D%E3%83%BC%E3%83%88%E3%81%A8%E3%82%A2%E3%83%80%E3%83%97%E3%82%BF%E3%83%BC%E3%81%AB%E3%82%88%E3%82%8B%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%83%B3%E3%82%B0\">ポートとアダプターによるパッケージング</a></li>\n<li><a href=\"#%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AB%E3%82%88%E3%82%8B%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%83%B3%E3%82%B0\">コンポーネントによるパッケージング</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">まとめ</a></li>\n</ul>\n<h1 id=\"動機\">動機</h1>\n<p>業務にて設計に携わることがあり、何度か聞いていたクリーンアーキテクチャというものを調べてみた。\nブログ記事や解説記事を漁っているうちに、これは原本を呼んだ方が早そうだと思い書籍を購入した。\n(後から気づいたが、本人のブログ記事が原点だったが説明が最小限なので流石にあれだけでは理解が難しい。)</p>\n<p><a href=\"https://www.amazon.co.jp/dp/B07FSBHS2V/ref=dp-kindle-redirect?_encoding=UTF8&#x26;btkr=1\">Clean Architecture 達人に学ぶソフトウェアの構造と設計</a></p>\n<blockquote>\n<p>崩壊したコードを書くほうがクリーンなコードを書くよりも常に遅い</p>\n</blockquote>\n<p>素晴らしい本だったのだが、幾分情報量が多いのでここにまとめることで頭を整理しようと思う。\n崩壊した脳内で設計を行うよりもクリーンにした頭で設計をする方が常に早いのだ。</p>\n<h1 id=\"設計の原則\">設計の原則</h1>\n<h2 id=\"プログラミングパラダイム\">プログラミングパラダイム</h2>\n<h3 id=\"構造化プログラミング\">構造化プログラミング</h3>\n<p>goto文の使用がプログラミングにおいて有害であることが示された。\nあらゆるプログラムは「順次」「選択」「反復」の3つの構造で構築できることが特定され、それぞれが数学的に証明された。\n全てのモジュールは証明可能な単位に再帰的に分割することが可能であるとしたのが構造化プログラミングであり、\n機能によりモジュールは分割できる。\n全てのモジュールに対して数学的に正しいことを証明することはできないが、科学的にそれをテストで補うことが可能である。\n言い換えればテスト可能な単位までモジュールを分割することが構造化プログラミングのパラダイムにおいてのベストプラクティスである。</p>\n<h3 id=\"オブジェクト指向プログラミング\">オブジェクト指向プログラミング</h3>\n<p>「カプセル化」「継承」「ポリモーフィズム」に代表されるパラダイムである。\nただし、カプセル化と継承についてはパラダイムシフトが行われる前のC言語から普通に使用されていた概念である。\nここで重要になるのがポリモーフィズムとなる。\nポリモーフィズムの概念がC言語時代になかったわけではないが、安全に使用することはできなかった。\nポリモーフィズムを使用することで依存性を逆転させることが可能になり、ソースコードの依存関係を制御の流れから逆転させることができる。\n依存関係逆転を用いることで処理の中核にある重要なビジネスルールをその他の依存関係から独立させることが可能になる。\nまとめると、オブジェクト指向プログラミングの登場によって、ポリモーフィズムを用いることで、\nシステムにある全てのソースコードの依存関係を絶対的に制御する能力を人類は手に入れた。</p>\n<h3 id=\"関数型プログラミング\">関数型プログラミング</h3>\n<p>関数型プログラミングでは再代入をすることができない。\n全ての変数は不変であることで、競合状態、デッドロック状態、並行更新の問題が発生しなくなる。</p>\n<h3 id=\"パラダイムのまとめ\">パラダイムのまとめ</h3>\n<ul>\n<li>構造化プログラミングは、直接的な制御の移行に規律を課すものである。</li>\n<li>オブジェクト指向プログラミングは、間接的な制御の移行に規律を課すものである。</li>\n<li>関数型プログラミングは、代入に規律を課すものである。</li>\n</ul>\n<h2 id=\"solid原則\">SOLID原則</h2>\n<p>関数やクラスの設計原則をまとめたSOLID原則を紹介する。</p>\n<h3 id=\"単一責任の原則-srp-single-responsibility-principle\">単一責任の原則 (SRP: Single Responsibility Principle)</h3>\n<p>システムに対しある変更を望むグループのことを <strong>アクター</strong> と呼ぶこととする。\n単一責任の原則とは対象のアクターが複数あるコードは分割するべきであるという原則である。\n分割することで増えてしまう関数やクラスはFacadeパターンを使用することでインターフェイスを統一することができる。</p>\n<h3 id=\"オープン・クローズドの原則-ocp-open-closed-principle\">オープン・クローズドの原則 (OCP: Open-Closed Principle)</h3>\n<blockquote>\n<p>ソフトウェアの構成要素は拡張に対しては開いていて、修正に対して閉じていなければならない\n『アジャイルソフトウェア開発の奥義 第2版』 (SBクリエイティブ) より引用</p>\n</blockquote>\n<p>依存性をコントロールし情報を隠蔽することで、各々の変更の影響を最小限に機能追加については容易にするという原則である。</p>\n<h3 id=\"リスコフの置換原則-lsp-liskov-substitution-principle\">リスコフの置換原則 (LSP: Liskov Substitution Principle)</h3>\n<p>リスコフの置換原則とは派生型に対する定義である。\nT型がS型の派生型となるにはS型で定義されたプログラムPで、\nS型のオブジェクトの代わりにT型のオブジェクトを使用してもPの振る舞いが変わらない必要がある。\nこれはアーキテクチャのレベルでも適用され、派生型と捉えられるあらゆる設計は厳密に置き換え可能でなければならない。</p>\n<h3 id=\"インターフェイス分離の原則-isp-interface-segregation-principle\">インターフェイス分離の原則 (ISP Interface Segregation Principle)</h3>\n<p>別のモジュール、コンテキスト、技術を使用する際は分離されたインターフェイスを使用すること。\n直接依存してしまうと、密結合が生まれてしまいコンパイルの時間が伸び、障害に対してロバストでなくなる。</p>\n<h3 id=\"依存関係逆転の原則-dip-dependency-inversion-principle\">依存関係逆転の原則 (DIP: Dependency Inversion Principle)</h3>\n<p>コードの変化のしやすさを考えると、 <code>具象クラス > 抽象クラス > インタフェース</code> となる、なるべきである。\nそのため、具象クラスへの依存は可能な限り減らす、参照、継承、オーバーライドどれも御法度である。\n具象インスタンスの作成をする際は <strong>Abstract Factoryパターン</strong> を利用することで、直接具象を参照しなくてもよくなる。\nこのように具象への参照を忌避していくと、最終的には全ての具象を扱う関数が唯一存在することとなり、\nこれはmainコンポーネントと呼ばれることが多い。</p>\n<h2 id=\"コンポーネントの原則\">コンポーネントの原則</h2>\n<h3 id=\"再利用・リリース等価の原則-rep\">再利用・リリース等価の原則 (REP)</h3>\n<p>再利用のためのグループ化を行う。\nひとつのコンポーネントを形成するクラスやモジュールは、まとめてリリース可能でなければならない。\n同じバージョン番号を共有し、同じリリースプロセスを経て、同じリリースドキュメントを持っている状態は合理的であり、あるべき姿である。</p>\n<h3 id=\"閉鎖性共通の原則-ccp\">閉鎖性共通の原則 (CCP)</h3>\n<p>保守性のためのグループ化を行う。\n単一責任の原則をコンポーネントのために言い換えたもの。\nコンポーネントを変更する理由が複数あるべきではない。</p>\n<h3 id=\"全再利用の原則-crp\">全再利用の原則 (CRP)</h3>\n<p>不要なリリース作業を減らすための分割を行う。\n一緒に用いられることが多いクラスやモジュールはひとまとめにすること。\n密結合なクラスやモジュールも同様である。\n逆に、同時に使用されることがほとんどないクラスは分離されるべきである。</p>\n<h3 id=\"rep-ccp-crpの関係\">REP, CCP, CRPの関係</h3>\n<p>REPとCCPは包含関係にあり、どちらもコンポーネントを大きくする方向に働くものである。\n一方、CRPはコンポーネントを小さくする方向に働く原則であり、これら3つの原則のバランスをうまくとる必要がある。\nREPとCCPのみを守るとリリース頻度が増加する。\nCCPとCRPのみを守ると再利用性が低下する。\nCPRとREPのみを守ると変更すべきコンポーネントが増大する。\nプロジェクト初期はREPを軽視する傾向にあり、プロジェクトの成熟に連れて、徐々にREPへ重心を寄せていくことが多い。</p>\n<h3 id=\"非循環依存関係の原則-adp\">非循環依存関係の原則 (ADP)</h3>\n<p>コンポーネント間の依存は循環してはならないという名前通りの原則。</p>\n<h3 id=\"安定依存の原則-sdp\">安定依存の原則 (SDP)</h3>\n<p>変更しやすいコンポーネントは変更しにくいコンポーネントから依存されてはならない。</p>\n<h3 id=\"安定度・抽象度等価の原則-sap\">安定度・抽象度等価の原則 (SAP)</h3>\n<p>コンポーネントの抽象度はその安定度と同程度んでなければならない。</p>\n<h1 id=\"アーキテクチャ\">アーキテクチャ</h1>\n<p>アーキテクチャとはシステムに与えられた形状である。\nアーキテクチャの目的はシステムの開発、デプロイ、運用、保守を容易にすることである。</p>\n<blockquote>\n<p>それらを容易にするための戦略は、できるだけ長い期間、できるだけ多く選択肢を残すことである。</p>\n</blockquote>\n<h2 id=\"システム\">システム</h2>\n<h3 id=\"開発\">開発</h3>\n<p>マイクロサービスアーキテクチャでも読んだ通り、1チームが1コンポーネントを担当するべきであるため、\n形状は自ずとチームに寄り添う形で決まっていくはずである。</p>\n<h3 id=\"デプロイ\">デプロイ</h3>\n<p>デプロイの文脈でアーキテクチャが目指すべきことは単一のアクションでデプロイが行えることである。\n単に自動デプロイ環境が整っていることを指すのではなく、対象のコンポーネントが独立してデプロイできることを指す。</p>\n<h3 id=\"運用\">運用</h3>\n<p>アーキテクチャの運用における仕事はシステムへの理解の手助けとなることだ。\n形状がシステムを端的に表せているならば、システムへの理解は容易となる。</p>\n<h3 id=\"保守\">保守</h3>\n<p>保守のコストとは既存のコードを掘り起こし、新しい機能の追加や欠陥の修正に最適な場所や戦略を見つけるコストである。\n正しいアーキテクチャは上記コストを大幅に削減でき、人的リソースの増大を防ぐ。</p>\n<h2 id=\"アーキテクトの思考\">アーキテクトの思考</h2>\n<h3 id=\"選択肢\">選択肢</h3>\n<p>システムは大きく「方針」と「詳細」の二つに分割できる。\nこの時、アーキテクトは方針とは無関係に詳細を決めながら重要でない詳細については選択肢を残してアーキテクチャを構築していく。</p>\n<h3 id=\"切り離し\">切り離し</h3>\n<ul>\n<li>水平方向の分割としてレイヤー分割</li>\n<li>垂直方向の分割としてユースケース分割</li>\n</ul>\n<p>上記の分割を行う規模として</p>\n<ul>\n<li>ソースレベル</li>\n<li>デプロイ(バイナリ)レベル</li>\n<li>サービス(実行単位)レベル</li>\n</ul>\n<p>などが考えられる。</p>\n<h3 id=\"境界線\">境界線</h3>\n<p>1つのクラス、モジュール、コンポーネントにとって重要なものと重要でないものの間には境界線を引く。</p>\n<h4 id=\"インターフェイスと継承\">インターフェイスと継承</h4>\n<p>インターフェイスとその継承の間には境界線が発生する。\n対象の単位内でインターフェイスが定義さえされていれば、インターフェイスの実装部分については無関心でいられるためである。</p>\n<h4 id=\"デプロイコンポーネント\">デプロイコンポーネント</h4>\n<p>動的リンクライブラリはデプロイレベルの切り離しとして理解でき、それぞれの動的リンクライブラリには境界がある。</p>\n<h4 id=\"スレッド\">スレッド</h4>\n<p>モノリスでも動的リンクライブラリでもスレッドでの分割も行うことができる。</p>\n<h4 id=\"ローカルプロセス\">ローカルプロセス</h4>\n<p>スレッドよりも明確な境界線としてローカルプロセスもある。</p>\n<h4 id=\"サービス\">サービス</h4>\n<p>現状最も強い境界線はサービスである。\n同じプロセッサやマルチコアの環境で同時に動作させることも可能だが、そのような物理的な制約は特に問題にならない。\nあらゆる通信はネットワークを経由して行われることが前提となる。</p>\n<h2 id=\"アーキテクチャ-1\">アーキテクチャ</h2>\n<h3 id=\"方針とレベル\">方針とレベル</h3>\n<p>プログラムは入力を出力に変換する <strong>方針</strong> を詳細に記述したものである。\nこの方針は細分化され、入力の検証や、出力のフォーマット設定の記述をしている方針がある。\nこれらの方針には <strong>レベル</strong> が存在する。</p>\n<p>「レベル」の定義は「入力と出力からの距離」である。\n上述の入力の検証や、出力のフォーマット設定などは入出力に限りなく近いため下位のレベルに位置する。\n逆に上位のレベルとしては受け取った入力に対して行う変換作業などが挙げられる。</p>\n<p><em>ソースコードの依存性はデータフローから切り離し、レベルと結びつけるべきである。</em>\nどのような場合も、下位レベルのコンポーネントが上位レベルのコンポーネントに依存するように設計する。</p>\n<p>方針のグルーピングについてはSRPやCCPに基づいて行うが、\nその際に重要なのは上位レベルの方針は下位レベルの方針よりも変更の頻度が低く、変更の理由が重要である。</p>\n<h3 id=\"ビジネスルール\">ビジネスルール</h3>\n<h4 id=\"エンティティ\">エンティティ</h4>\n<p>最重要ビジネスルールのことをエンティティと呼ぶ。\nエンティティは最上位のレベルに位置することとなる。</p>\n<hr>\n<p><a href=\"/tech-blog/blog/evans-eric-ddd\">エリック・エヴァンスのドメイン駆動設計をまとめる</a>\nにて扱ったエンティティとは別の概念であり、ドメイン駆動設計でいうところのコアドメインにあたる。</p>\n<hr>\n<h4 id=\"ユースケース\">ユースケース</h4>\n<p>ユースケースはアプリケーション固有のビジネスルールを記述する。\nアプリケーション固有のビジネスルールとはエンティティをいつ・どこで呼び出すかを規定することである。</p>\n<p>ユースケースでは実際の入出力の詳細を知ることはなく、エンティティはユースケースを知ることがない。\nここからユースケースがエンティティと入出力の詳細の中間のレベルに位置していることがわかる。</p>\n<hr>\n<p><a href=\"/tech-blog/blog/evans-eric-ddd\">エリック・エヴァンスのドメイン駆動設計をまとめる</a>\nでいうところのドメイン層のサービス、特に粒度を大きくとるために使用するサービスに近いものであると考えている。</p>\n<hr>\n<h4 id=\"リクエストとレスポンスのモデル\">リクエストとレスポンスのモデル</h4>\n<p>ユースケースは入力データを期待し、出力データを生成するが具体的な入出力の詳細に触れてはいけない。\nそのため、入力データ、出力データは双方入出力の詳細に依存していないデータである必要がある。\nここで、SRPから、これらのデータ構造にエンティティへの参照を含めてはならない。</p>\n<h4 id=\"フレームワークとアーキテクチャ\">フレームワークとアーキテクチャ</h4>\n<p>はっきりさせておく必要があるのは、フレームワークはアーキテクトによって選択肢が残されるべき詳細であるということである。\nフレームワークによってアーキテクチャが規定されることはなく、あくまでツールに過ぎないことを認識する必要がある。\nまた、テストについてもフレームワークに依存することなくユニットテストが実行できることが望ましい。</p>\n<h3 id=\"クリーンアーキテクチャ\">クリーンアーキテクチャ</h3>\n<p><img src=\"./CleanArchitecture.jpeg\" alt=\"Clean Architecture\"></p>\n<blockquote>\n<p>https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html より引用</p>\n</blockquote>\n<h4 id=\"優れたアーキテクチャの特性\">優れたアーキテクチャの特性</h4>\n<ul>\n<li>フレームワーク非依存: フレームワークをツールとして扱える</li>\n<li>テスト可能: ビジネスルールはUI、データベース、ウェブサーバー、その他の外部要素がなくてもテストできる</li>\n<li>UI非依存: UIはシステムの他の部分の変更と独立して変更できる</li>\n<li>データベース非依存: ビジネスルールの変更なしにデータベースを自由に変更できる</li>\n<li>外部エージェント非依存: ビジネスルールは外部のインターフェイスについて何も知らない</li>\n</ul>\n<h4 id=\"依存性のルール\">依存性のルール</h4>\n<p>円の中心に近づくほどレベルが上がっていることを表している。\nつまり、 <strong>ソースコードの依存性は、内側岳に向かっていなければならない。</strong></p>\n<h4 id=\"境界線の越え方\">境界線の越え方</h4>\n<p>ユースケースからプレゼンターを呼び出したい時など、上記のルールからユースケースがプレゼンターを直接呼び出し、\nプレゼンターに依存することは許されていない。\n内側から外側の層を使用する必要がある場合はDIPを利用する。</p>\n<h4 id=\"境界線を越えるデータ\">境界線を越えるデータ</h4>\n<ul>\n<li>構造体</li>\n<li>データ転送オブジェクト</li>\n<li>関数呼び出しの引数</li>\n</ul>\n<p>など選択肢はいくつもあるが、独立した単純なデータ構造であることが重要である。\nエンティティオブジェクトやデータベースの行をそのまま渡すようなことをしてはいけない。</p>\n<h3 id=\"インターフェイスアダプター\">インターフェイスアダプター</h3>\n<h4 id=\"humble-object\">Humble Object</h4>\n<p>Humble Objectパターンは振る舞いをユニットテストがしやすいように二つに分割するパターンである。\n一つのモジュールは控えめ(Humble)で、ここにはテストが難しい振る舞いのみが記述される。\n例としてはGUIが挙げられる。GUIにおいて画面に表示されているものの確認の自動化は極めて難しいが、\nその他の振る舞いの大部分は簡単にテストできる。</p>\n<h4 id=\"presenterとview\">PresenterとView</h4>\n<p>上述のHubmle Objectパターンで登場したGUIにおける表示とその他の部分を指す。\n表示の部分をView, その他の部分をPresenterと言う。\nViewはテストが難しいため、表示だけに専念して、データの移動や取得などのロジックは含まないようにする。\n代わりにテスト可能な部分の全てはPresenterに含まれる。\nPresenterで全てのデータを取得、処理した後にViewが解釈でき、\n<strong>そのまま表示できる</strong> ViewModelと呼ばれるようなデータ構造体として受け渡す。\nViewがやるべきことはViewModelからデータを読み込み画面に表示する以外なく、Humbleに保たれる。</p>\n<h4 id=\"データベースとゲートウェイ\">データベースとゲートウェイ</h4>\n<p>ユースケースインタラクターとデータベースの間にあるのがゲートウェイである。\nゲートウェイはアプリケーションのビジネスルールとは格別され、データのCRUDの実際の操作にのみ焦点を当てる。\nゲートウェイはデータベースと指定されたやりとりをしているだけなのでHumble Objectと言える。\nまた、データベースとのやりとりの部分、例えばSQL文の記述になると思われるが、ゲートウェイに隔離しておくことで、\nユースケースインタラクターが独立してテスト可能になる。</p>\n<p>さて、ここでデータマッパーに代表されるマッピング処理はどこに含まれるかだが、\n当然ユースケースインタラクターではなく、ゲートウェイに含まれる。\nゲートウェイの中でもデータベースとゲートウェイの境界に位置する技術がデータマッパーである。</p>\n<h4 id=\"サービスリスナー\">サービスリスナー</h4>\n<p>アプリケーションが他のサービスと通信する必要がある場合も、Hubmle Objectパターンを意識する。\n境界を越える際はシンプルなデータ構造を持ってアプリケーションに渡すことや、詳細の情報をアプリケーション層が扱わないことを意識する。</p>\n<h3 id=\"境界\">境界</h3>\n<blockquote>\n<p>You Aren't Going to Need It.</p>\n</blockquote>\n<p>通称YAGNIから必要に迫られる前の抽象化は悪だとされてきた。\nしかし、アーキテクトは時に変化を予測してYAGNIを違反する必要がある。</p>\n<p>部分的な境界を利用することで、完全な境界は形成せずに境界を作成する準備だけすることもできるが、\nそのような境界は不完全なため、境界の維持は実装者のモラルに頼らざるを得ない。</p>\n<p>アーキテクトは実装する境界と無視する境界を決定する必要があり、\nそれはプロジェクトの初期から運用に至るまでで何度も考察されるべきである。</p>\n<h3 id=\"メインコンポーネント\">メインコンポーネント</h3>\n<blockquote>\n<p>Mainコンポーネントは、究極的な詳細（最下位レベルの方針）である。</p>\n</blockquote>\n<p>全てのシステムでは少なくとも一つ、その他のコンポーネントを作成・調整・監督するコンポーネントが必要になる。\nそのようなコンポーネントをメインコンポーネントと呼ぶ。\n依存関係の注入や、設定ファイルのパス指定などコードの本体で把握したくない文字列を読み込む。</p>\n<p>Mainは、初期状態や構成を設定して、外部リソースを集め、アプリケーションの上位レベルの方針に制御を渡すプラグインである。\n例えば、開発用、テスト用、本番用のMainを用意することもできる。</p>\n<h3 id=\"詳細\">詳細</h3>\n<ul>\n<li>データベース</li>\n<li>ウェブ</li>\n<li>フレームワーク</li>\n</ul>\n<p>これらは全て決定を最後まで遅らせるべき詳細にあたる。\nどれもビジネスルールと密結合させるべきではない。</p>\n<h3 id=\"設計手順\">設計手順</h3>\n<h4 id=\"アクターとユースケースの洗い出し\">アクターとユースケースの洗い出し</h4>\n<blockquote>\n<p>システムの最初のアーキテクチャを決めるための第一歩は、アクターとユースケースを見つけることだ。</p>\n</blockquote>\n<p>システムに変更を要求する可能性のあるアクターを探しだす。\n単一責任の原則からあるアクターへの変更が他のアクターに影響を与えないようにしたい。</p>\n<p>次に、アクターごとに考えられるユースケースを洗い出す。\nユースケースにもレベルが存在し、上位の概念ほど抽象化が高い。\n例えば、家具のカタログを閲覧すると言うユースケースはアクターが複数いる場合には抽象ユースケースとなる。\n管理者としてカタログを閲覧するのか、購入者としてカタログを購入するのかは本質的に異なるが、上位のレベルでは同じものであるため、\nカタログを閲覧すると言う抽象ユースケースを継承したユースケースと考えることができる。</p>\n<h4 id=\"コンポーネントアーキテクチャ\">コンポーネントアーキテクチャ</h4>\n<p>コンポーネントアーキテクチャについてはここまでで議論されてきたように、詳細になるに従って具象化させていくように切り分けていく。\n切り分け方としては伝統的なビュー、プレゼンター、インタラクター、コントローラー、ユーティリティーなどが考えられるが、\nこここそがアーキテクトの腕の見せ所であると考えられるので、それぞれのプロジェクトごとに考えていくしかない。</p>\n<h4 id=\"依存性管理\">依存性管理</h4>\n<p>依存性についても先述の通り、制御の流れと逆向きに、抽象化の向きに沿って、管理していく。\nここで一つ重要なのが、アクターごとに独立に変更や機能追加ができるようにしておくことである。</p>\n<h3 id=\"パッケージング\">パッケージング</h3>\n<h4 id=\"レイヤーによるパッケージング\">レイヤーによるパッケージング</h4>\n<ul>\n<li>web</li>\n<li>service</li>\n<li>data</li>\n</ul>\n<p>などのレイヤーの名称によってパッケージを分割する方法。\n特に考えることなくパッケージングができるため簡単ではあるが、\nプロジェクトが大きくなるとこれらの分割だけでは可読性が大きく損なわれる。\nまた、アーキテクチャがドメイン知識について何か提示してくれることがない。</p>\n<h4 id=\"機能によるパッケージング\">機能によるパッケージング</h4>\n<p>レイヤーによるパッケージングを水平方向での分割とすると、機能による分割は垂直方向の分割である。\nドメイン駆動設計の用語で言うところの集約ルートに基づいて分割する。\nこちらの方がアーキテクチャがドメイン知識についてのヒントとなるだろう。</p>\n<h4 id=\"ポートとアダプターによるパッケージング\">ポートとアダプターによるパッケージング</h4>\n<p>クリーンアーキテクチャのレイヤー図のうちビジネスルールを表す、「Entities」「Use Cases」はドメイン層にあたる。\nその外側はインフラストラクチャ層であり、この二つは確実に分割されている必要がある。\n基本的には上記のことを踏まえたレイヤーによるパッケージングになる。</p>\n<h4 id=\"コンポーネントによるパッケージング\">コンポーネントによるパッケージング</h4>\n<blockquote>\n<p>関連する機能をよくできたクリーンなインターフェイスの向こう側に閉じ込めて、アプリケーションなどの実行環境の内側に置いたもの</p>\n</blockquote>\n<p>とコンポーネントを定義する。\nコンポーネントに従ってパッケージを分割していくことになるが、\n上記の考え方と違うのは永続化のコードがドメインのコードと同様のパッケージに属することだ。\n当然、パッケージ内で依存性のコントロールは行われるため、分割の箇所が変わるだけで原則に違反するわけではない。\nこうすることで、コントローラ層から直接インフラストラクチャ層を呼び出すようなヤンチャができなくなる。\nまた、コンポーネントと言う単位で分割することによってパッケージの責務がわかりやすくなるので、\nコード利用者も管理者もコードの把握が楽になると言う利点もある。</p>\n<h1 id=\"まとめ\">まとめ</h1>\n<p>自分の解釈では下記を満たしていればクリーンアーキテクチャである。</p>\n<ul>\n<li>安定度が大きくなるほど抽象度を上げる</li>\n<li>依存性逆転の法則を利用して下位のコンポーネントを上位のコンポーネントに依存させない</li>\n<li>コアドメインのビジネスルールは独立させる</li>\n<li>アプリケーション固有のビジネスルールはコアドメインのビジネスルールにのみ依存する</li>\n<li>変更の多い箇所はHumble Objectパターンで分離する</li>\n<li>テストが難しい箇所もHumble Objectパターンで分離する</li>\n<li>境界を越えるデータは単純なデータ構造を使用する (エンティティオブジェクトを渡したりしない)</li>\n<li>ビジネスルールはWeb, UI, DB, フレームワークなどの外部要素と独立してテストができる</li>\n</ul>\n<p>上記事項をきれいに守るためのテクニックは多岐にわたる。\nクリーンアーキテクチャの図として出回っている、かの有名な同心の図も一つの具体例に過ぎない。\nパッケージングの方法についても同心円図の命名規則に合わせる必要はなく、\n最後に言及があるようにドメイン駆動設計を念頭に分割していく方が理にかなっていると思う\n(し、これはクリーンアーキテクチャに違反しているわけでもない)。</p>\n<p>上記を満たすための設計の切り口があることと切り口にしてはいけないものがあることも学べた。\n切り口は</p>\n<ul>\n<li>アクターとユースケース (垂直方向)\n<ul>\n<li>アクターごとに独立して変更できるよう</li>\n<li>ユースケースがドメインオブジェクトで表現できるよう</li>\n</ul>\n</li>\n<li>レイヤーレベル (水平方向)</li>\n</ul>\n<p>であり、切り口にしてはいけないものは詳細であるフレームワークやデータベースである。</p>\n<p>クリーンアーキテクチャはドメイン駆動設計を念頭においたアーキテクチャであると私は考えているが、\n用いられる用語はそれぞれで幾分か違ってしまっている。\n<a href=\"https://qiita.com/takasek/items/70ab5a61756ee620aee6\">お前らがModelと呼ぶアレをなんと呼ぶべきか。近辺の用語(EntityとかVOとかDTOとか)について整理しつつ考える</a> にてかなり詳しくまとめてくれているので参照されたい。</p>\n<p>最後に、クリーンアーキテクチャを学んだところで設計の「正解」が判明するわけではないとわかった。\nただし、書籍に大量に記述されている原則と照らし合わせることで何が「間違えている」かの知識を多く得ることができたのではないかと感じている。\nクリーンアーキテクチャを採用した設計という言葉を使っていたがこれからは避けよう。\nあぁ、アーキテクチャなんもわからん。</p>","ogImage":{"url":"/assets/blog/dynamic-routing/cover.jpg"},"coverImage":"/assets/blog/dynamic-routing/cover.jpg"}},"__N_SSG":true}