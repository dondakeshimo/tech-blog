{"pageProps":{"post":{"title":"Pythonの環境構築奮闘記 あるいは降参の反省文","date":"2019-06-16","slug":"2019-06-16-python_env","author":{"name":"JJ Kasper","picture":"/assets/blog/authors/jj.jpeg"},"content":"<h1 id=\"目次\">目次</h1>\n<ul>\n<li><a href=\"#%E3%83%A2%E3%83%81%E3%83%99%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3\">モチベーション</a></li>\n<li><a href=\"#%E7%8F%BE%E7%8A%B6%E3%81%AE%E8%80%83%E5%AF%9F\">現状の考察</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89%E3%83%84%E3%83%BC%E3%83%AB\">環境構築ツール</a></li>\n<li><a href=\"#%E5%BF%85%E8%A6%81%E4%BA%8B%E9%A0%85\">必要事項</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#python%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%81%AE%E4%BD%BF%E3%81%84%E5%88%86%E3%81%91\">Pythonバージョンの使い分け</a></li>\n<li><a href=\"#python%E4%BB%AE%E6%83%B3%E7%92%B0%E5%A2%83%E3%81%AE%E7%8B%AC%E7%AB%8B%E6%80%A7\">Python仮想環境の独立性</a></li>\n<li><a href=\"#python%E4%BB%AE%E6%83%B3%E7%92%B0%E5%A2%83%E3%81%AE%E5%86%8D%E7%8F%BE%E6%80%A7%E5%8F%8A%E3%81%B3%E6%89%8B%E8%BB%BD%E3%81%95\">Python仮想環境の再現性及び手軽さ</a></li>\n<li><a href=\"#%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%E3%81%AE%E3%82%B9%E3%83%88%E3%83%AC%E3%82%B9%E3%83%95%E3%83%AA%E3%83%BC\">開発環境のストレスフリー</a></li>\n<li><a href=\"#%E6%AC%B2%E3%81%97%E3%81%84%E7%92%B0%E5%A2%83%E3%81%AE%E3%81%BE%E3%81%A8%E3%82%81\">欲しい環境のまとめ</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E3%83%99%E3%82%B9%E3%83%88%E3%83%97%E3%83%A9%E3%82%AF%E3%83%86%E3%82%A3%E3%82%B9%E3%81%AE%E8%80%83%E5%AF%9F\">ベストプラクティスの考察</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#atom-hydrogen%E3%81%8C%E5%A5%BD%E3%81%8D%E3%81%A7%E3%81%99%E3%83%9D%E3%82%A8%E3%83%A0%E5%BC%B7%E3%82%81\">Atom(+ Hydrogen)が好きです(ポエム強め)</a></li>\n<li><a href=\"#pipenv-venv-virtualenv-pyenv-vritualenv-%E3%81%A0%E3%81%A8%E3%82%84%E3%81%AF%E3%82%8A\">pipenv, venv, virtualenv, pyenv-vritualenv だとやはり...</a></li>\n<li><a href=\"#anaconda%E3%81%AB%E5%A7%94%E3%81%AD%E3%82%8B\">anacondaに委ねる</a></li>\n<li><a href=\"#docker%E7%AD%89%EF%BC%8C%E4%B8%8A%E4%BD%8D%E3%81%AE%E4%BB%AE%E6%83%B3%E7%92%B0%E5%A2%83%E3%81%A7%E6%88%A6%E3%81%86\">docker等，上位の仮想環境で戦う</a></li>\n<li><a href=\"#pyenv--pyenv-virtualenv-%E3%81%AF%E3%82%84%E3%81%A3%E3%81%B1%E3%82%8A%E3%81%82%E3%82%8A%E3%81%A7%E3%81%AF\">pyenv + pyenv-virtualenv はやっぱりありでは</a></li>\n<li><a href=\"#pyenv--pipenv-%E3%81%AF%E6%AC%A1%E4%B8%96%E4%BB%A3%E3%81%BF%E3%81%8C%E3%81%82%E3%82%8B\">pyenv + pipenv は次世代みがある</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">まとめ</a></li>\n</ul>\n<h1 id=\"モチベーション\">モチベーション</h1>\n<p>Pythonは最高だ！\nコードの見た目は綺麗で，3rdパーティモジュールも豊富，\n何よりもiPython kernelの存在が大きいと思う．\nもっというとJupyterだ．\nあるいばHydrogen(Atom package)だ．\nブラウザでもお好きなブラウザでもコードを書きながら即時実行できる強みは計り知れない．</p>\n<p>しかし，Pythonの環境構築周辺はとっちらかっている．\n議論もベストプラクティスもハゲ散らかっている．\nPythonの環境構築について思い悩んだ挙句，\n一旦思考をまとめるのと思考の記録を残す目的で本ログを残す．\n(注: ほぼポエム)</p>\n<h1 id=\"現状の考察\">現状の考察</h1>\n<h3 id=\"環境構築ツール\">環境構築ツール</h3>\n<p>下記サイトなど色々なサイトでまとめられているため，まとめのまとめレベルで記述する．</p>\n<p>[https://qiita.com/KRiver1/items/c1788e616b77a9bad4dd#pipenv:title]</p>\n<p>| |Pythonバージョン切り替え|パッケージ切り替え|\n|:---|---|---|\n|pyenv|◯||\n|pyenv-virtualenv||◯|\n|venv||◯|\n|virtualenv||◯|\n|pipenv||◯|\n|anaconda|◯|◯|\n|docker|◯|◯|</p>\n<h3 id=\"必要事項\">必要事項</h3>\n<ul>\n<li>Pythonバージョンの使い分け</li>\n<li>Python仮想環境の独立性</li>\n<li>Python仮想環境の再現性及び手軽さ</li>\n<li>開発環境のストレスフリー</li>\n</ul>\n<p>ここでPython仮想環境とはvirtual envやpipenvで作成した環境を指す．</p>\n<h5 id=\"pythonバージョンの使い分け\">Pythonバージョンの使い分け</h5>\n<p>絶対に必要がどうかは疑わしいという議論もある．\nしかし，導入自体はツールさえインストールしてしまえば簡単にでき，\ntensorflowなどのPythonバージョンに依存するモジュール(知識が古かったらすみません)\nも容易に使えるようになることや，\n実行環境のPythonバージョンが固定されている時のことなども考えると\nあって損はない機能というか，やっぱり必要機能だと感じる．</p>\n<h5 id=\"python仮想環境の独立性\">Python仮想環境の独立性</h5>\n<p>これはどこまで仮想環境を切り分けるかという話である．\n例えば，pyenvのみを用いた場合はバージョン毎の切り分けは可能だが，\nプロジェクト単位での環境の切り分けはできない．\nしかし，プロジェクトの依存関係がはっきりしないプロジェクトというのは，\n個人開発の域を出た瞬間になんとも言えない不安感を煽る．\nイケてないと感じるし，イケてない人だと苦笑いされるのは最悪の気分だ．</p>\n<h5 id=\"python仮想環境の再現性及び手軽さ\">Python仮想環境の再現性及び手軽さ</h5>\n<p>上述の独立性を担保する上で，留意しておきたい点がこの二つである．\n独立性を担保し，依存関係がはっきりしていることは非常に好ましいが，\nさらにその仮想環境を違うマシン，環境でも簡単にサクッと再現できる必要がある．\n著者は古くからの <code>requirements.txt</code> はとても好きだ．\nSimple is best だ．\n逆に自分にとって手軽だろうが，自前のシェルスクリプトなどは再現性が下がるので論外となる．</p>\n<h5 id=\"開発環境のストレスフリー\">開発環境のストレスフリー</h5>\n<p>ざっくり分けて環境には2種類あり，\nそれぞれ開発環境と実行環境に分けられる．\nここで議論している環境は実行環境を大きく意識した開発環境を整えることである．\nしかし，実行環境のために開発環境の便利さをトレードオフさせることは避けたい，いやだ，ありえない．</p>\n<h5 id=\"欲しい環境のまとめ\">欲しい環境のまとめ</h5>\n<p>実行環境を意識した上で，バージョンと依存関係がプロジェクト単位で独立しており，\nその仮想環境を他の環境でも容易に再構築できるが，\nそれら全ては開発環境の機能を損なうものであってはならない．</p>\n<h1 id=\"ベストプラクティスの考察\">ベストプラクティスの考察</h1>\n<ul>\n<li>Atom(+ Hydrogen)が好きです</li>\n<li>pipenv, venv, virtualenv, pyenv-virtualenv だとやはり...</li>\n<li>anacondaに委ねる</li>\n<li>docker等，上位の仮想環境で戦う</li>\n<li>pyenv + pyenv-virtualenv はやっぱりありでは</li>\n<li>pyenv + pipenv は次世代みがある</li>\n</ul>\n<h3 id=\"atom-hydrogenが好きですポエム強め\">Atom(+ Hydrogen)が好きです(ポエム強め)</h3>\n<p>いきなり個人の趣向が入ってきて，ベストプラクティス(笑)になってしまった．\nAtom + HydrogenはAtomエディタ上でiPythonを用い，\n各行実行や，セクション実行が可能なプラグインである．\n布教が目的とかではないけど是非使ってみてほしい．惚れると思う．</p>\n<p>さて，このプラグインを実行するためにはJupyter環境が必要になるのだが，これが曲者である．\nJupyter入れるだけでしまいやん！とはならない．\n上記の必要事項にプロジェクト毎の独立性と書いたが，\nその要件を満たした場合，Hydrogenの実行カーネルを\nそれぞれのプロジェクトに対して変更する必要がある．\n...だが，無理だ．\nそのような機能は，ない．\n管理手法がそれぞれ異なるのにそのような出すぎた要求はできない．</p>\n<p>そのため，筆者はどのプロジェクトでも使える共通の，なんでも入りの仮想環境を一つ作り，\nそのカーネルをHydrogenに登録して用いている．\nどう考えても，実行環境と開発環境に乖離が生じているためダメだろうという構成である．\n仮想環境は最後にその構成で動くかどうか確認し，他人と共有する為のものと化してしまっている．</p>\n<p>Jupyterで開発している人もどうしているのだろうか．\n全てのプロジェクトにJupyter入れているんだろうか？</p>\n<p>Hydrogenを諦めればなんでも綺麗にまとまる気がしてきた．\nしかし，必要事項の開発環境のストレスフリーに反する為，\n結局筆者はこのような環境を現状使い続けるだろう．\nHydrogenのカーネルを仮想環境毎に割り振るツールでも作れば良いのだろうが...\nあれ，それで解決するのでは？\n来週の予定，埋まりました．</p>\n<h3 id=\"pipenv-venv-virtualenv-pyenv-vritualenv-だとやはり\">pipenv, venv, virtualenv, pyenv-vritualenv だとやはり...</h3>\n<blockquote>\n<p>pipenv，ナウいんだろう，知らんけど．</p>\n</blockquote>\n<p>という所感を環境構築のリサーチ中に受けた．\nこれら4つはPythonのバージョン管理は機能として持っておらず，\nPython仮想環境の構築にのみ特化したものである．\n基本的な機能はどれも同じで，少し前までのデファクトがvirtualenv，\n最近評価をあげているのがpipenvという印象である．\n正直どれでも良い気もするし，venvには触ったことがないしおすすめ出てこないしで一旦スルーする．</p>\n<p>pipenvはnpm(JavaScriptの似たような機能のやつ)などの影響を受けているらしい？\n必要パッケージだけでなくその依存モジュールまで記録してくれる．\nnpmのようにその環境独自のコマンドを用意することもできる．\n最も後発で，機能としては最も完璧に近いと思う．\nただ，遅い．依存関係の記録が異常に遅い．ついでに毎回最初に\n<code>pipenv run</code> つけるの面倒くさい．\n<code>pipenv shell</code> はわかりづらい．</p>\n<p>virtualenvやpyenv-virtualenvは再現性がpipenvと比べて低い．\npipenvでは <code>pipenv install</code> の1コマンドで済むところを\nそれぞれの開発者がrequests.txtに応じて開発環境を構築することが必要となる．\n逆に開発者それぞれにpipenvの依存関係が軽減されるということでもある．\npyenv-virtualenvの方が手軽だが，\n多数のプロジェクトを抱える場合，環境の中央集中の一括管理であるため取っ散らかる．\nvirtualenvはactivateするのが面倒だったり，環境の使い回しができないデメリットがある．</p>\n<p>やはり...とかなかった．\n一長一短だった．\n最初はpipenvに落ち着けるつもりだったけど，\n書き始めたらむしろ愚痴の方が出てきたため保留．</p>\n<h3 id=\"anacondaに委ねる\">anacondaに委ねる</h3>\n<p>anacondaは全部やってくれる．\nマジで全部．本当に全部．全然全部．\n以前はWindows環境の場合，その他のツールが動かないため，\nanaconda以外の選択肢がなかったし，\n実際これさえあればかなりほぼ全ての要求に答えることができる．\nじゃあ，これでええやん！とならないのがややこしいところである．</p>\n<p>anacondaそのものの是非について</p>\n<p>[https://team-6.hatenablog.jp/entry/2017/08/24/040451]</p>\n<p>この辺に議論が書いてある．\n多分批判点(メリット)をざっくりまとめると</p>\n<ul>\n<li>権限周りの危険が危ない説がある</li>\n<li>大量のパッケージを入れられて容量とかうざい(大量のパッケージ美味しい)</li>\n<li>pipと競合する(condaの方が楽にインストールできるものも存在する(した))</li>\n</ul>\n<p>この辺に突っ込むと長くなりそうだし，完全に把握しているわけではないからこの辺で飛ばす．\n現状，anacondaを使うなら全てをanacondaに委ねる覚悟が必要そう．\n何かと共存させるのはどうなんだろうという状態らしい．\n筆者はpyenvでanacondaをインストールして使っていたが，\nこれは大量のパッケージが事前に入っていて便利だったからである．\nその程度の理由ならとっととanacondaから撤退した方が吉だろうと思い，全部捨てた．</p>\n<h3 id=\"docker等，上位の仮想環境で戦う\">docker等，上位の仮想環境で戦う</h3>\n<p>docker最高！Vagrandとかでも全然あり！\n速度のオーバーヘッドはあまりないし，ここまで仮想化したら実行環境への意識という点では完璧だ．\n...だが，弊環境では難しい．\n一つ大きな理由がマシンの容量が怖いところである．\nメインマシンがストレージ256GBのMacなのが全部悪い．\nもう一つ運用できないため実際にぶち当たったことはないのだが，\n開発環境でストレスが出るのではないかという懸念もある．\nできればAtomで開発したいのだが，この場合ボリュームを結合するか，\n何かの都度書いたスクリプトをdocker環境にコピーする必要がある．\njupyterサーバを立てる手もあるため，\nそこで下書きをしながらスクリプトを書いてコピーという流れが良いのだろうか．\nマシンをアップグレードすれば非常に興味のある構成なので是非ご教授願いたい．</p>\n<h3 id=\"pyenv--pyenv-virtualenv-はやっぱりありでは\">pyenv + pyenv-virtualenv はやっぱりありでは</h3>\n<p>筆者が最近環境を再考するまで使用していた構成である．\nそしてこの投稿を書きながら，Hydrogenを使うに最も適当な構成であると気づき．\n再度この構成に落ち着かんとしている．\n問題としては環境の再現性が大きいと思うし，\n実際のところpipenvの方がイケてる感は否めないので他人に勧めるようなものでもない．</p>\n<h3 id=\"pyenv--pipenv-は次世代みがある\">pyenv + pipenv は次世代みがある</h3>\n<p>目下ネット上の第一おすすめ候補だろう．\nかっこいいし，いいと思う．\n遅い問題については <code>--skip lock</code> オプションをつけることで大きく軽減されるらしい．\nそれでもどこかのタイミングでlockせざるを得ないが．\nこの問題についてはpipenvの開発者も認識しているらしく，近い将来改善されることが期待される．\nもう一つの仮想環境に入るの面倒あるいわかりづらい問題は，\n自分のターミナルを適応させることでなんとかなると思う．\nというかそういうの考えるのは割と好き．</p>\n<h1 id=\"まとめ\">まとめ</h1>\n<ul>\n<li>開発環境さえ整えばdockerが最高！(と思う)</li>\n<li>パッケージ管理特化のツールはpipenvが一つ抜けている気もするが，(まだ)五十歩百歩</li>\n<li>anacondaは好き嫌い分かれてる</li>\n<li>開発環境を完璧に整えるのはdockerに限らず難しい</li>\n</ul>","ogImage":{"url":"/assets/blog/dynamic-routing/cover.jpg"},"coverImage":"/assets/blog/dynamic-routing/cover.jpg"}},"__N_SSG":true}