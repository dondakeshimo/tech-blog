{"pageProps":{"post":{"title":"GoでCLIのTODOリストを作成した時の振り返り","date":"2021-07-23","slug":"2021-07-23-how_to_develop_todo_cli","author":{"name":"JJ Kasper","picture":"/assets/blog/authors/jj.jpeg"},"content":"<h1 id=\"目次\">目次</h1>\n<ul>\n<li><a href=\"#%E6%A6%82%E8%A6%81\">概要</a></li>\n<li><a href=\"#%E9%96%8B%E7%99%BA%E7%AE%A1%E7%90%86%E3%82%84%E9%96%8B%E7%99%BA%E3%83%AB%E3%83%BC%E3%83%AB\">開発管理や開発ルール</a>\n<ul>\n<li><a href=\"#github\">GitHub</a></li>\n<li><a href=\"#github-flow\">GitHub Flow</a></li>\n<li><a href=\"#github-projects\">GitHub Projects</a></li>\n<li><a href=\"#%E8%8B%B1%E8%AA%9E\">英語</a></li>\n<li><a href=\"#cicd-github-actions\">CI/CD GitHub Actions</a></li>\n</ul>\n</li>\n<li><a href=\"#%E8%A8%AD%E8%A8%88\">設計</a>\n<ul>\n<li><a href=\"#%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E6%A7%8B%E9%80%A0\">ディレクトリ構造</a></li>\n<li><a href=\"#%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3\">クリーンアーキテクチャ</a></li>\n<li><a href=\"#%E3%83%86%E3%82%B9%E3%83%88\">テスト</a></li>\n</ul>\n</li>\n<li><a href=\"#%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0\">コーディング</a>\n<ul>\n<li><a href=\"#makefile\">Makefile</a></li>\n<li><a href=\"#value-object\">Value Object</a></li>\n<li><a href=\"#godoc\">GoDoc</a></li>\n<li><a href=\"#table-driven-test\">Table Driven Test</a></li>\n<li><a href=\"#%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E9%81%B8%E5%AE%9A\">ライブラリ選定</a>\n<ul>\n<li><a href=\"#cli%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AF-cobra-vs-urfavecli\">CLIフレームワーク cobra vs urfave/cli</a></li>\n<li><a href=\"#writer%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA\">writerライブラリ</a></li>\n</ul>\n</li>\n<li><a href=\"#golangci-lint\">golangci-lint</a></li>\n<li><a href=\"#%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF-vs-%E5%80%A4\">ポインタ vs 値</a></li>\n<li><a href=\"#%E3%82%B9%E3%82%B1%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AA%E3%83%B3%E3%82%B0\">スケジューリング</a>\n<ul>\n<li><a href=\"#launchd\">launchd</a></li>\n<li><a href=\"#cron\">cron</a></li>\n</ul>\n</li>\n<li><a href=\"#%E9%80%9A%E7%9F%A5%E6%96%B9%E6%B3%95\">通知方法</a>\n<ul>\n<li><a href=\"#ossascript\">ossascript</a></li>\n<li><a href=\"#slack\">slack</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">まとめ</a></li>\n</ul>\n<h1 id=\"概要\">概要</h1>\n<p>CLIでのTODO管理ツールをGoで実装しました。</p>\n<p><a href=\"https://dondakeshimo.github.io/tech-blog/blog/introduce-todo-cli/\">https://dondakeshimo.github.io/tech-blog/blog/introduce-todo-cli/</a></p>\n<p><a href=\"https://github.com/dondakeshimo/todo-cli\">https://github.com/dondakeshimo/todo-cli</a></p>\n<p>その際に得た知見ややっていて良かったこと、やって失敗だったと思うことなどを振り返っていこうと思います。</p>\n<h1 id=\"開発管理や開発ルール\">開発管理や開発ルール</h1>\n<h2 id=\"github\">GitHub</h2>\n<p>デファクトスタンダードなので特に説明することもないかもしれませんが、GitHubを用いてコード管理を行いました。\nコード管理だけではなく、後述するようにCI/CDやプロジェクト管理もGitHubで完結させました。</p>\n<p>(最近知ったのですがGitLabってオンプレ以外に普通のWebアプリケーションも提供されているんですね。\n特に比較とかはしていないです。)</p>\n<h2 id=\"github-flow\">GitHub Flow</h2>\n<p>ブランチ戦略というものがあります。\nよく知られているものとしてGit FlowとGitHub Flowがあります。\n私はGitHub Flowしか利用したことがないので、Git Flowの詳細は他サイトに譲ります<a href=\"https://www.atlassian.com/ja/git/tutorials/comparing-workflows/gitflow-workflow\">(参考)</a>。\nGitHub Flowを要約すると変更をmasterに反映するときはPR経由で行えよ、ということになります。\nGitHub Flowに準じた開発を行うと決めたので、個人開発ではありますが、masterに直接マージするようなことはせずにPRを毎回作成して開発を行いました。</p>\n<p>良かった点は</p>\n<ul>\n<li>masterは常にテストが通った状態になる</li>\n<li>管理しているチケットと紐付けができる</li>\n<li>行った変更を自分で追いやすくなる</li>\n<li>作業の中断ステータスがわかりやすい</li>\n</ul>\n<p>悪かった点は</p>\n<ul>\n<li>単純に面倒臭い</li>\n<li>個人リポジトリだとmasterへのpush禁止をGitHubがしてくれないので2, 3回 masterにpushしてしまった</li>\n</ul>\n<p>次回個人開発を行うことがあれば、最初はmaster pushで整えて</p>\n<ul>\n<li>test</li>\n<li>CI/CD パイプライン</li>\n</ul>\n<p>が整ったタイミングでPRを出すようにしようかと思います。\nただ、後で反省するように上記二つともプロジェクトの最初期に整えるべきものだと考えているので、実質最初からPRを出すつもりです。</p>\n<p>また、masterへのpush防止策としてはgit hookに何かしら突っ込んでおく必要があるかなと思っています。</p>\n<h2 id=\"github-projects\">GitHub Projects</h2>\n<p>プロジェクト管理は GitHub Projectsを利用しました。</p>\n<ul>\n<li><a href=\"https://github.com/dondakeshimo/todo-cli/projects/1\">https://github.com/dondakeshimo/todo-cli/projects/1</a></li>\n<li><a href=\"https://github.com/dondakeshimo/todo-cli/projects/2\">https://github.com/dondakeshimo/todo-cli/projects/2</a></li>\n</ul>\n<p>欲しい機能は最初からほとんど決まっていたので、メモ書き以下の要件を最初に記載していたようです。</p>\n<p><a href=\"https://github.com/dondakeshimo/todo-cli/issues/1\">https://github.com/dondakeshimo/todo-cli/issues/1</a></p>\n<p>IssueとPRは紐付けができるので機能の作成さえしておけば、Kanbanでの移動はそこまで必要ないです。\n調査系のタスクが入った時にIssueがあると自分の進捗がわかりやすいのとドキュメントが勝手に出来上がっていくのでとても良かったです。</p>\n<p><a href=\"https://github.com/dondakeshimo/todo-cli/issues/33\">https://github.com/dondakeshimo/todo-cli/issues/33</a></p>\n<p>メリットはやはりコード管理ツールと統合されていることに尽きると思います。今後もGitHubで何かしらのプロジェクトを行うときは重宝すると思います。</p>\n<h2 id=\"英語\">英語</h2>\n<p>コードのコメントや使い方などは全て英語にしようと決めていました。\n英語の勉強をしたかったという部分と、日本語が入ったコードはダサいと思ったのと、ゆくゆくは外国の方にもcommitしてもらえるようなプロダクトにしたいという野望があったからです。</p>\n<p>2人の知人にcontributerをしていただいたのですが、その際にPRを英語で出していただいてハッとさせられました。\n海外の方にcommitしてもらうためにはIssueやPRも全て英語で行う必要があったのでは？？と。\nちょっとそこまで英語にリソース割けないなと思い妥協しています。個人リポジトリですしね...</p>\n<h2 id=\"cicd-github-actions\">CI/CD GitHub Actions</h2>\n<p>CI/CDツールとしてはGitHub Actionsを使用しました。\nツールで行いたかったことは下記になります。</p>\n<ul>\n<li>PRに対して\n<ul>\n<li>コードフォーマットのチェック</li>\n<li>test</li>\n</ul>\n</li>\n<li>master commitに対して\n<ul>\n<li>バイナリのビルド</li>\n<li>Releasesの作成</li>\n</ul>\n</li>\n</ul>\n<p>コードフォーマットのチェックやtestは比較的簡単に設定できました <a href=\"https://github.com/dondakeshimo/todo-cli/blob/master/.github/workflows/go.yml\">(設定ファイル)</a>。\nReleasesの作成についてはそれなりに苦闘したので、<a href=\"https://dondakeshimo.github.io/tech-blog/blog/github-actions-changelog/\">別記事</a>にまとめています。</p>\n<h1 id=\"設計\">設計</h1>\n<h2 id=\"ディレクトリ構造\">ディレクトリ構造</h2>\n<p>ディレクトリ構造について初期は <a href=\"https://github.com/golang-standards/project-layout\">golang-standards/project-layout</a> を模倣して設計していました。\nところが、 <a href=\"https://github.com/golang-standards/project-layout/issues/117\">this is not a stndard Go project layout</a> というIssueがGo開発者から立てられ、これは標準ではないし、Goの思想としては標準レイアウトのようなものは存在しない、なんでも好きなように作れば良いのだよということが公言されていました。\n特に問題となっていたのは <code>pkg</code> ディレクトリのようで、慣例として作られていた <code>vendor</code> との差分がよくわからないなどの意見が見られました。思考停止で利用していましたが、このIssueを受けて <code>internal</code> ディレクトリは <code>pkg</code> ディレクトリに<a href=\"https://github.com/dondakeshimo/todo-cli/pull/78\">まとめました</a>。</p>\n<p>結果的には以下のような構成にしました。</p>\n<pre class=\"language-makefile\"><code class=\"language-makefile\">.\n├── Makefile\n├── README.md\n├── cmd\n│   └── todo\n│       └── main.go\n├── go.mod\n├── go.sum\n├── pkg\n│   ├── commands\n│   ├── domain\n│   │   ├── notifier\n│   │   ├── scheduler\n│   │   └── task\n│   ├── gateways\n│   │   └── json\n│   └── usecases\n├── scripts\n│   └── uninstall.sh\n└── test\n    └── scenario\n        └── crud_test.go\n</code></pre>\n<p><code>pkg</code> の中のディレクトリはそのままパッケージ名となります。\nこちらは次節にて詳しく述べる予定ですが、クリーンアーキテクチャのレイヤ名を随所に使用しています。</p>\n<h2 id=\"クリーンアーキテクチャ\">クリーンアーキテクチャ</h2>\n<p><a href=\"https://dondakeshimo.github.io/tech-blog/blog/clean-architecture-uncle-bob/\">https://dondakeshimo.github.io/tech-blog/blog/clean-architecture-uncle-bob/</a></p>\n<p>にてまとめているクリーンアーキテクチャを念頭に設計しています。というよりは開発していくうちにクリーンアーキテクチャっぽく修正していきました。</p>\n<p>CLIフレームワークを変更したタイミングがあったのですが、CLIフレームワークとアプリケーションルールがそのタイミングでは絡み付いており、変更が非常に重たいタスクになってしまいました。これを嫌って、先にusecase層とcontroller層(commandsディレクトリ)を分割しました。これによってフレームワークに依存しているのはcontroller層のみとなり変更を容易に行うことができました。(分割は簡単ではなかったです。)</p>\n<p>このことから、これからはフレームワークやインプットアウトプットが少しでも変わる可能性がある場合は常にクリーンアーキテクチャを最初から意識して設計していこうと心に誓いました。</p>\n<p>逆にクリーンアーキテクチャを意識したアーキテクチャになっていた部分で良かったのは、後述するスケジューリングや通知の詳細実装を追加していくのが非常に容易だったことです。最初にインタフェースを決めておく難易度はありましたが、今回の場合は最初から要件がある程度固まっていたのでそこまで悩まずに済みました。</p>\n<h2 id=\"テスト\">テスト</h2>\n<p>今回の場合二つのテストが必要と考えていました。</p>\n<ul>\n<li>domain/taskの単体テスト</li>\n<li>e2eテスト</li>\n</ul>\n<p>逆にそれ以外の部分は手を抜いています。\nただし、結構アプリケーションロジックにバグが紛れたりするので、usecase層もテストするべきだったなと思っています。\nこれは今後追加するかもしれません。</p>\n<p>最初にテストスコープを決めていて良かったのはdomain層に入れるべきものがはっきりとしたことです。\nこのロジックにはテスト必要そうだぞというものは大抵domain層にいるべきものなので、ビジネスロジックがusecaseに紛れ込むのを防ぐことができました。</p>\n<p>テストの実装時期ですが、プロトタイプのタイミングから単体テストは実装しておくべきだと感じました。\n後からやるのは辛いというのが主な理由ですが、先述の通りテストを念頭においた実装をすることでかなりすっきりとした設計になりがちですなので、気づいたらスパゲッティを錬成していたということを防ぐためにも最初からテストを書くべきです。</p>\n<p>逆にe2eテストについてはある程度までは放置しておいて良いと感じました。\nテスト項目だけ決めておいて毎回手作業で確認していくくらいで良いかなと。\n結構テストの実装自体が手間ですし、その手間をかけて自動化するならまずは満足できるレベルのプロダクトを作るのが先だろというのが今の思いです。</p>\n<h1 id=\"コーディング\">コーディング</h1>\n<h2 id=\"makefile\">Makefile</h2>\n<p>Makefileは最初に用意しておくと良いと思います。GoのMakefileは毎回ほとんど同じものになると思うので、ここに自分が使っているものでテンプレとなりそうな部分を貼っておきます。</p>\n<pre><code>GOBUILD=go build\nGOCLEAN=go clean\nGOTEST=go test\nGOGET=go get\nGOFMT=gofmt\nGOGEN=go generate\nGOIMPORTS=goimports\nGOLINT=golangci-lint\nBINARY_NAME=todo\nCMD_PKG=./cmd/todo\nSCENARIO_DIR=./test/scenario\n\nall: help\n\n.PHONY: init\ninit: ## initilize developer environment\n  # mockを利用する場合\n\tgo install github.com/golang/mock/mockgen@latest\n\n.PHONY: get\nget: ## go get dependencies\n\t$(GOGET) -u -v -t -d ./...\n\n.PHONY: build\nbuild: ## build go binary\n\t$(GOBUILD) -o $(BINARY_NAME) -v $(CMD_PKG)\n\n.PHONY: mockgen\nmockgen: ## generate mock\n\t$(GOGEN) ./...\n\n.PHONY: test\ntest: build ## go test\n\t$(GOTEST) -v ./...\n\n.PHONY: scenario-test\nscenario-test: build ## run scenario test\n\t$(GOTEST) -v $(SCENARIO_DIR) -tags scenario\n\n.PHONY: clean\nclean: ## remove go binary\n\t$(GOCLEAN)\n\trm -f $(BINARY_NAME)\n\n.PHONY: fmt\nfmt: ## format go files\n\t$(GOFMT) -l -w -s .\n\t$(GOIMPORTS) -w .\n\n.PHONY: lint\n# need docker to run this command\n# this command just run golangci-lint\n# so, if you hate docker, you can run equivalent this installing golangci-lint locally\nlint: ## check lint, format\n\tdocker run --rm -v $(shell pwd):/app -w /app golangci/golangci-lint:v1.41.0 golangci-lint run -v\n\n.PHONY: help\nhelp: ## DIsplay this help screen\n\t@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[36m%-20s\\033[0m %s\\n\", $$1, $$2}'\n</code></pre>\n<p>プロジェクトの最初期から置いておくと良いと思います。最初期は <code>go run</code> とかを結局たくさん使いますが...</p>\n<h2 id=\"value-object\">Value Object</h2>\n<p><a href=\"https://dondakeshimo.github.io/tech-blog/blog/evans-eric-ddd/\">https://dondakeshimo.github.io/tech-blog/blog/evans-eric-ddd/</a></p>\n<p>で説明している値オブジェクトを利用できる場面では利用することを意識しました。\n具体的にはタスクに紐付けられる時間などが値オブジェクトとして定義されています。</p>\n<p>時間については基本的にただの文字列なのですが、値オブジェクトとすることで文字が時間を表現するのに有効かどうかや、時間としての加算減算に対応できるようになっています。ビルドに通ればランタイムでのエラーがほとんど起きなくなったので、値オブジェクトは利用できるシーンでは積極的に利用すべきだと感じています。</p>\n<h2 id=\"godoc\">GoDoc</h2>\n<p><a href=\"https://qiita.com/shibukawa/items/8c70fdd1972fad76a5ce\">チョットできるGoプログラマーになるための詳細GoDoc</a> で詳細に述べられていますが、Goではドキュメント自動生成のためのコメントお作法があります。このお作法の通りにコメントを書けばIDEがメソッドの説明とかを出して来れたりします。</p>\n<p>コードは大体最初に思い描いたものよりも長く、複雑になるので最初からGoDocを書くことを忘れずにしておくと、エディタの力を最大限に生かすことができます。(ただ本当に面倒くさい)。次回以降もちゃんと書けるかは心の余裕によると思います。</p>\n<h2 id=\"table-driven-test\">Table Driven Test</h2>\n<p>Table Driven Testをご存知でしょうか？\nテストの可読性が飛躍的に向上し、DRYなテストを実現できる手法になります。\n自分が参考にしたサイトを見つけることができなかったので、お好きなサイトをGoogle先生の書庫から選んで参照いただければと思います。</p>\n<p>これを知って実装できたことでテストがかなり書きやすかったのでここで取り上げています。\nしばらくはTable Driven Testを使ってテストを書き続けるでしょう。</p>\n<h2 id=\"ライブラリ選定\">ライブラリ選定</h2>\n<p>ライブラリの選定はしっかりとするべきだという話です。</p>\n<p>ライブラリを利用するということは依存が一つ増えるということです。\n依存が一つ増えたらメンテナンスのための改修が必要になるリスクが一つ増えるということです。\nまずはライブラリを使うか自前で実装するべきかという部分を真剣に考えた方が良いというのが最近の考えです。</p>\n<p>ライブラリを選定するタイミングで確認するべきは</p>\n<ul>\n<li>Star数</li>\n<li>最終更新日</li>\n<li>更新頻度</li>\n</ul>\n<p>あたりだと考えていますが、実際に使ってみないとわからない部分も多々あると思うので参考程度に。</p>\n<p>todo-cliではtodoリストの表示と、CLIフレームワークにおいて外部ライブラリを使用しています。\nそれぞれについて少し解説します。</p>\n<h3 id=\"cliフレームワーク-cobra-vs-urfavecli\">CLIフレームワーク cobra vs urfave/cli</h3>\n<p>初期段階では <a href=\"https://github.com/urfave/cli\">urfave/cli</a> を利用していました。\n最初からcobraも選択肢には入っていたのですが、同等の人気である urfave/cliが先に検索にヒットしたのでなんとなくで使っていました。</p>\n<p>結果としては<a href=\"https://github.com/spf13/cobra\">cobra</a>に途中で乗り換えており、これからもCLIフレームワークを利用するならcobra一択だろうと考えています。</p>\n<p>urfave/cliのよくない点は大きく二つです。</p>\n<ul>\n<li><a href=\"https://twitter.com/campuscodi/status/1371227524127199241?s=19\">twitter</a> で指摘されているが、謎の情報を送る処理が実装されていた</li>\n<li>必ず <code>todo [option] [args]</code> の順番でコマンドを叩く必要があり、タスクの内容の後にオプションをつけるといったことができなかった</li>\n</ul>\n<p>その他にも細かい点でcobraの方が気が利いている部分が多く、紹介記事やStar数だけでは実際の使用感は判断できないのだなと感じました。\nこのことから私が得られる教訓は、導入ハードルを恐れずにどんどん知らないツールを触っていけ、ということです。</p>\n<h3 id=\"writerライブラリ\">writerライブラリ</h3>\n<p>初期段階ではGoの標準パッケージにある <a href=\"https://pkg.go.dev/text/tabwriter\">tabwriter</a> を利用していました。\n表示がリッチである必要はないと考えていたので、これで十分と考えていたのですが、知人が触って来れている時に日本語で表記がずれるという課題を共有いただき更に解決策となるパッケージもご提示していただきました。</p>\n<p>途中で乗り換えたライブラリが <a href=\"https://github.com/olekukonko/tablewriter\">tablewriter</a> になります。 CJKに対応しており、リッチな表を書くこともできます。</p>\n<p>表示系のライブラリではCJK(China, Japan, Korea)言語に対応しているかどうかを気にかける必要があるのだということを学べました。</p>\n<h2 id=\"golangci-lint\">golangci-lint</h2>\n<p>Goのフォーマッターやリンターは複数のパッケージ、ツールに別れておりそれを統合したツールもいくつかありますが、自分が調べた範囲で2021/07時点では <a href=\"https://github.com/golangci/golangci-lint\">golangci-lint</a> を用いるのが良さそうだと感じました。\n使い方等はREADMEや紹介記事も多数あるのでここでは省略します。</p>\n<h2 id=\"ポインタ-vs-値\">ポインタ vs 値</h2>\n<p>(この節の内容はうろ覚えなので100%信用しないでください。)</p>\n<p>Goではポインタがヒープ領域に割り当てられます。\nそのため、軽量な値に関してはポインタでの受け渡しよりも値渡しを行った方が良いです。\n具体的にはプリミティブ型で関数内で値を変更しない場合は値渡しで良いと言えると思います。</p>\n<p>これはメソッドのレシーバにも同様のことが言えます。\n軽量な構造体に対するメソッドの場合はポインタを指定するよりも値を渡した方が早くなります。</p>\n<p>また、ポインタの利用を消極的にすることで関数型言語のように副作用のない(少ない)関数を書くことが意識できます。</p>\n<h2 id=\"スケジューリング\">スケジューリング</h2>\n<p>この節ではスケジューリング機能をどのように実装したかを説明します。</p>\n<p>スケジューリング機能とググると <a href=\"https://github.com/robfig/cron\">robfig/cron</a> がヒットするのではないかと思います。\n当然の話ではありますが、スケジューリングを行うプログラムはプロセスとして常駐する必要があります。\nGoのみでこれを行おうとすると、プロセスを走り続ける必要があり軽さや使いやすさという点で疑問が生じる設計しか思いつきませんでした。</p>\n<p>よって、基本戦略としてはOSに備わったスケジューリング機能を使用する方針としています。</p>\n<h3 id=\"launchd\">launchd</h3>\n<p>MacOSではcronを使用するのは非推奨とされており、代わりにLauncdというプロセスをスケジューラとして利用するように言われています。\n<a href=\"https://qiita.com/rsahara/items/7d37a4cb6c73329d4683\">launchdで定期的にスクリプトを実行</a> にて詳細に開設されているので、利用に際して困るというようなことはなかったです。\n指定箇所に指定フォーマットのXMLファイルを配置するだけなので実装難易度もそこまで高くないです。</p>\n<h3 id=\"cron\">cron</h3>\n<p>Linuxではcronがおおよそインストールされていると信じてcronを用いたスケジューリングもできるようにしました。</p>\n<p>こちらについてはタスクの登録方法が複数あるのですが、課題となったのは権限です。\nlaunchdと同様の方針で、cronファイルを <code>/etc/cron.d</code> に配置するだけで済むと考えていたのですが、配置するためにはroot権限が必要であり、またcronファイルもroot権限である必要があることがわかりました。\nroot権限をアプリケーションに与える方針はユーザビリティやセキュリティの観点でありえない選択肢であると感じたので、ファイルを配置する方針は諦めました。</p>\n<p><a href=\"https://dondakeshimo.github.io/tech-blog/blog/how-to-use-cron/\">諸々調べた結果</a> もまとめてあるので見ていただければと思いますが、結局 <code>crontab [file]</code> でスケジュール登録する方針としました。</p>\n<p>しかし、こちらの方針にも問題点があり、指定したcronファイルで全てのジョブが上書きされてしまうのです。そのため、ユーザがもともとcrontabを使用していた場合は利用するべきではないですし、自分の登録したジョブも注意を払わなければ最新の一件しかスケジュール登録されないということになってしまいます。詳細な実装についてはリポジトリの方を参照いただければと思います。</p>\n<h2 id=\"通知方法\">通知方法</h2>\n<p>理想はポップアップを出すことだと考えていました。MacにおいてはシンプルにポップアップをCLIから呼び出すインタフェースが搭載されており、容易に実装することができましたが、linuxについてのポップアップはまだ特に考えられていないです。Slackに投げられればそれで良いだろうと甘えました。</p>\n<h3 id=\"ossascript\">ossascript</h3>\n<p>遊んでもらえれば楽しいと思うのですが、</p>\n<pre><code>osascript -e 'display notification \"通知したいメッセージ\"'\n</code></pre>\n<p>とターミナルで打っていただければ通知センターにメッセージが届きます。\n似たような方法で、<a href=\"https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/reference/ASLR_cmds.html#//apple_ref/doc/uid/TP40000983-CH216-SW12\">色々な制御ができる</a> のでこれらを用いてポップアップ通知を実現しています。</p>\n<p>実装としては <code>os/exec</code> によって外部コマンドを呼び出す形になっています。</p>\n<h3 id=\"slack\">slack</h3>\n<p>SlackではIncomming Webhookを利用すればHTTP POSTリクエストを送ることでメッセージを送信することができます。\nIncoming Webhookの導入はユーザに委ねるしかありませんが、その他の解決策もないと思ったので妥協しました。\nLINEラブな方のためにLINE Botインタフェースを用意するとかも面白そうではありますね。</p>\n<h1 id=\"まとめ\">まとめ</h1>\n<p>GoでCLIを作るのは非常に楽しかったです。cobraというフレームワークが最高です。kubectlとかを参考にできたところも良かったですね。\n開発途中でドメイン駆動設計やクリーンアーキテクチャについて勉強していたので、プロトタイプからどんどん設計周りの改善案が出てきたというのも面白かったポイントです。</p>\n<p>今後も開発は続けますし、よければ追加機能や機能修正のPRをお待ちしています。</p>","ogImage":{"url":"/assets/blog/dynamic-routing/cover.jpg"},"coverImage":"/assets/blog/dynamic-routing/cover.jpg"}},"__N_SSG":true}