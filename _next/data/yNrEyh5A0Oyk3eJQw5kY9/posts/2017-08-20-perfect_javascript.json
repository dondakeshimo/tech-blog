{"pageProps":{"post":{"title":"JavaScriptの勉強始めました","date":"2017-08-20","slug":"2017-08-20-perfect_javascript","author":{"name":"JJ Kasper","picture":"/assets/blog/authors/jj.jpeg"},"content":"<h1 id=\"目次\">目次</h1>\n<ul>\n<li><a href=\"#javascript%E5%A7%8B%E3%82%81%E3%81%BE%E3%81%97%E3%81%9F\">JavaScript始めました</a></li>\n<li><a href=\"#javascript%E3%81%AE%E6%A6%82%E8%A6%81\">JavaScriptの概要</a></li>\n<li><a href=\"#javascript%E3%81%AE%E5%9F%BA%E6%9C%AC%E4%BB%95%E6%A7%98\">JavaScriptの基本仕様</a>\n<ul>\n<li><a href=\"#javascript%E3%81%AE%E5%9E%8B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">JavaScriptの型について</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#javascript%E3%81%AE%E5%9F%BA%E6%9C%AC%E5%9E%8B\">JavaScriptの基本型</a></li>\n<li><a href=\"#%E5%9F%BA%E6%9C%AC%E5%9E%8B%E3%81%AE%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E5%9E%8B\">基本型のオブジェクト型</a></li>\n<li><a href=\"#%E5%9E%8B%E5%A4%89%E6%8F%9B%E6%95%B0%E5%80%A4%E5%9E%8B--%E6%96%87%E5%AD%97%E5%88%97%E5%9E%8B%E3%81%AE%E3%82%A4%E3%83%87%E3%82%A3%E3%82%AA%E3%83%A0\">型変換(数値型 &#x3C;=> 文字列型)のイディオム</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#javascript%E3%81%AE%E5%BC%8F%E3%81%A8%E6%96%87\">JavaScriptの式と文</a>\n<ul>\n<li><a href=\"#%E6%96%87%E3%81%AE%E7%A8%AE%E9%A1%9E\">文の種類</a></li>\n<li><a href=\"#%E5%BC%8F%E3%81%AE%E7%A8%AE%E9%A1%9E\">式の種類</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%E5%90%8C%E5%80%A4%E6%BC%94%E7%AE%97%E5%AD%90\">同値演算子</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E5%9F%BA%E6%9C%AC%E4%BB%95%E6%A7%98%E5%BE%8C%E5%8D%8A%E6%88%A6%EF%BC%81\">基本仕様後半戦！</a></li>\n<li><a href=\"#%E5%A4%89%E6%95%B0%E3%81%A8%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88\">変数とオブジェクト</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%E4%BB%A3%E5%85%A5\">代入</a></li>\n<li><a href=\"#%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88\">オブジェクト</a></li>\n<li><a href=\"#%E5%A4%A7%E5%A4%89%E3%81%A0%E3%81%A3%E3%81%9F5%E7%AB%A0\">大変だった5章</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E9%96%A2%E6%95%B0%E3%81%A8%E3%82%AF%E3%83%AD%E3%83%BC%E3%82%B8%E3%83%A3\">関数とクロージャ</a>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%97\">スコープ</a></li>\n<li><a href=\"#%E3%82%AF%E3%83%AD%E3%83%BC%E3%82%B8%E3%83%A3\">クロージャ</a></li>\n<li><a href=\"#%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%8C%E3%81%AA%E3%81%84\">モジュールがない</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E3%83%87%E3%83%BC%E3%82%BF%E5%87%A6%E7%90%86\">データ処理</a></li>\n<li><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">まとめ</a>\n<ul>\n<li>\n<ul>\n<li>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%E3%81%A4%E3%81%BE%E3%82%8A%E3%80%81%E7%B5%90%E8%AB%96\">つまり、結論</a></li>\n<li><a href=\"#%E6%AC%A1%E5%9B%9E%E3%81%8B%E3%82%89%E3%81%AF%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E3%82%B5%E3%82%A4%E3%83%89%E3%81%AE%E8%AA%AC%E6%98%8E%E3%82%92%E3%81%97%E3%81%A6%E3%81%8F%E3%82%8C%E3%82%8B%E3%81%9D%E3%81%86%E3%81%A7%E3%81%99%EF%BC%81\">次回からはクライアントサイドの説明をしてくれるそうです！</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"javascript始めました\">JavaScript始めました</h1>\n<p>本当はインターンでずっと使ってたんですけど、\n一切体系的に学んでおらず、\nなぁなぁでコーディングをそろそろ脱却せねばと一念発起いたしました。</p>\n<p><a href=\"https://www.amazon.co.jp/dp/B00P2EG5LC/ref=dp-kindle-redirect?_encoding=UTF8&#x26;btkr=1\">パーフェクト JavaScript</a></p>\n<p>上司の方にこの本とかがいいんじゃない？と言われ、\n<strong>即購入、その間30秒。</strong>\n失敗したのは当日暇だったので\n普通に大学で買えば当日から始められたのにということですね！\nということで、今読んでる最中なのですが、\n入門書に関しては読んだ後にレビューではなくて、\n要点を読みながら書いた方が絶対いい気がするので、\n章が終わるたびに書き足して行っています！</p>\n<h1 id=\"javascriptの概要\">JavaScriptの概要</h1>\n<p>ブラウザ戦争とかいうものがあって、\nブラウザの独自拡張が繰り返された時代があったそうな、\nJavaScriptもその戦争のせいか、\nはたまた醜い人間たちの性か、\n独自拡張性が高い言語になってしまったそうな。\nこれでは非常に使いづらいということで、ECMAScriptなる規格が発足。\n現状では、JavaScriptが新しい機能を備えたバージョンを開発していき、\nそれに対してECMAScriptが順次それを規格化していくという流れだったような。\nとりあえずは規格化されたECMAScriptを使っていれば安心ってことなのだな？</p>\n<h1 id=\"javascriptの基本仕様\">JavaScriptの基本仕様</h1>\n<h2 id=\"javascriptの型について\">JavaScriptの型について</h2>\n<h4 id=\"javascriptの基本型\">JavaScriptの基本型</h4>\n<ul>\n<li>文字列型</li>\n<li>数値型</li>\n<li>ブーリアン型</li>\n<li>null型</li>\n<li>undefined型</li>\n</ul>\n<p>上記の5つが基本型となり、その他を全てオブジェクト型という。</p>\n<h4 id=\"基本型のオブジェクト型\">基本型のオブジェクト型</h4>\n<p>適切な表現が思いつかなかったので意味不明な題名。\n上記5つの基本型に対応するオブジェクト型、クラスが存在する。\nしかし、暗黙の型変換(基本型 &#x3C;=> オブジェクト型)\nによってその存在は認識していなくても\n実質問題ないっぽい。\nので、頭の片隅にしまいながら、\n基本的には忘れていて大丈夫っぽいというか、\n積極的に忘れて暗黙の型変換を使っていくのがベストプラクティスなのだとか。</p>\n<h4 id=\"型変換数値型--文字列型のイディオム\">型変換(数値型 &#x3C;=> 文字列型)のイディオム</h4>\n<p>クライアントにjsファイルをぶん投げる際、\nなるだけ短い文章で書いた方が通信量が抑えられて良いということから、\n暗黙の型変換を使った最短表記がしばしば用いられるそうな。\n可読性は低そうだけどよく使うなら慣れておかねばだ。</p>\n<pre><code>// 数値から文字列\nvar n = 3;\nn+'';\n\n// 文字列から数値\nvar s = '3';\n+s;\n</code></pre>\n<h2 id=\"javascriptの式と文\">JavaScriptの式と文</h2>\n<p>式式文文式文文 む〜ら〜さ〜ぁき\nどこかの歌手が頭から離れない章名。</p>\n<ul>\n<li>ソースコードは文から構成される</li>\n<li>文は文と式から構成される</li>\n<li>式は式と演算子から構成される</li>\n</ul>\n<p>呪文でしょうか、いいえ誰でも。。?</p>\n<h3 id=\"文の種類\">文の種類</h3>\n<p>基本的に文は;で区切られた一区画を指す。その種類として</p>\n<ul>\n<li>ブロック文(複合文)({}で囲まれたもの)</li>\n<li>変数宣言文</li>\n<li>関数宣言文</li>\n<li>式文</li>\n<li>空文</li>\n<li>制御文\n<ul>\n<li>if-else文</li>\n<li>switch-case文</li>\n</ul>\n</li>\n<li>繰り返し文\n<ul>\n<li>while文</li>\n<li>do-while文</li>\n<li>for文</li>\n<li>for in文</li>\n<li>for each in文(JavaScript独自拡張)</li>\n</ul>\n</li>\n<li>break文</li>\n<li>continue文</li>\n<li>return文</li>\n<li>例外(throw)</li>\n</ul>\n<p>基本的に意味不明で特殊なものはないかな？\n(for inとfor each inはなんか注意点いっぱいで使うの怖い)</p>\n<h3 id=\"式の種類\">式の種類</h3>\n<p>文と同じようにまずは列挙して同値演算子だけあとで取り上げます。\n式はオペランドと演算子に分けられるらしく、\nその式を特徴付けるのは演算子なので実質演算子列挙になります！</p>\n<ul>\n<li>算術演算子</li>\n<li>文字列連結演算子</li>\n<li>同値演算子</li>\n<li>比較演算子</li>\n<li>in演算子</li>\n<li>instanceof演算子</li>\n<li>論理演算子(&#x26;&#x26;)</li>\n<li>ビット演算子(俺多分しばらく使わない)</li>\n<li>代入演算子</li>\n<li>算術代入演算子(+=)</li>\n<li>条件演算子</li>\n<li>条件演算子(3項演算子)</li>\n<li>new演算子</li>\n<li>delete演算子</li>\n<li>void演算子</li>\n<li>カンマ演算子</li>\n<li>ドット演算子とブラケット演算子</li>\n<li>関数呼び出し演算子</li>\n</ul>\n<h5 id=\"同値演算子\">同値演算子</h5>\n<p>JavaScriptの同値演算子のやばいポイントは、</p>\n<ul>\n<li>==</li>\n<li>===</li>\n</ul>\n<p>と、二種類の演算子があることに尽きる。\n==だと暗黙の型変換込みでの同値演算子。\n===だと型も含めて同値であるかの判定を行うらしいぞ！</p>\n<h1 id=\"基本仕様後半戦！\">基本仕様後半戦！</h1>\n<p>ここからが難しいところなのでしょうね。\n気合をいれて臨みたいと思います。\nまじで早くNode.jsまでたどり着きたい！</p>\n<h1 id=\"変数とオブジェクト\">変数とオブジェクト</h1>\n<h3 id=\"代入\">代入</h3>\n<ul>\n<li>基本型のリテラルは値を代入</li>\n<li>それ以外のオブジェクトは参照を代入</li>\n</ul>\n<p>だけとりあえず覚えておけば良さそう！\nバイト先でオブジェクトの値コピー方法を何回もググってる気がするけど、\n未だにどれが正解かわかっていない。</p>\n<h3 id=\"オブジェクト\">オブジェクト</h3>\n<p>めちゃくちゃ長くて、\nちょっと難しすぎたから割と読み飛ばしてしまった。\nおそらく著者が言いたかったことのエッセンスは</p>\n<ul>\n<li>基本型以外のものは全てオブジェクト</li>\n<li>オブジェクトそれ自体には名前がなく、\n名前がある変数などに参照を代入することで固有の名前を得る</li>\n<li>オブジェクトは内部にプロパティを持ち、\nアクセスはドットかブラケット</li>\n<li>連想配列としての使い方もある</li>\n<li>this参照には注意が必要</li>\n<li>実質のクラスとしても使用可能</li>\n<li>クラスの継承みたいなのはプロトタイプ継承というものによって行われる</li>\n<li>型判定やプロパティの列挙は汎用性が高すぎるせいで多少面倒</li>\n</ul>\n<h3 id=\"大変だった5章\">大変だった5章</h3>\n<p>この章めちゃくちゃ長くて力入れてるのがひしひしと伝わってきたものの、\nめちゃくちゃ意味不でめちゃくちゃ眠かった(2,3回じゃないほどの寝落ち)。\nしかし頑張っていきたいと思います。。</p>\n<h1 id=\"関数とクロージャ\">関数とクロージャ</h1>\n<h3 id=\"スコープ\">スコープ</h3>\n<ul>\n<li>ブロックスコープがJavaScriptにはない。</li>\n<li>JS独自拡張の変数宣言にletがありそれはブロックスコープがある</li>\n<li>後は基本Pythonと同じ</li>\n</ul>\n<h3 id=\"クロージャ\">クロージャ</h3>\n<p>言葉遣いは難解だったけど、\n過去最高にわかりやすかった気がする。</p>\n<pre><code>function() {\n  var cnt = 0;\n  return function() { return ++cnt; }\n}\n\nvar fn = f();\nfn();  // 1\nfn();  // 2\nfn();  // 3\n</code></pre>\n<p>上記コードのように関数呼び出し時に関数を返すようにすると、\n関数呼び出し時に生成されるCallオブジェクトなるものが\n消去できなくなるため、ずっと同様のCallオブジェクトで\nこの関数オブジェクトが呼び出されることとなり、\n関数内の情報が保存されるという仕組みらしい。</p>\n<h3 id=\"モジュールがない\">モジュールがない</h3>\n<p>モジュールっぽい概念が言語仕様上はないらしいです。\n一つのプロジェクトのグローバル変数が共有されるので、\n大事故につながる恐れがあります。\nそのため、一つのファイルをクラスのように括ってしまうなどの\n対策が迫られるらしいのですが、それでもprivateな変数は作れません。\nそこでクロージャ！みたいな感じの話でした。</p>\n<h1 id=\"データ処理\">データ処理</h1>\n<ul>\n<li>配列</li>\n<li>JSON</li>\n<li>Date()</li>\n<li>正規表現</li>\n</ul>\n<p>についての記載があった。\n配列に関してはものすごく詳しく書かれていたが、\n実用上はそれほど細かい知識は必要なさそうなので割と目を通した程度。\nJSONはeval関数を使わないこと。\nDate関数はクライアントサイドで使うと面倒なことと、\n実行環境に依存すること。\n正規表現はリテラル表現が存在し、</p>\n<pre><code>var reg = /^\\s+/;  // 先頭文字が空白\nvar reg = new RegExp('^\\\\s+');\n</code></pre>\n<p>のように記述する。他にもStringオブジェクト側から、\n引数に正規表現を用いる技法も存在するが、\nここの難点は主に正規表現そのものなので、\nJavaScript側で難しいことはそれほどないと思う。</p>\n<h1 id=\"まとめ\">まとめ</h1>\n<p>これでJavaScript基本仕様については終了！\nらしいがこれで実際にコードちゃんと読めるかは微妙なラインな気がする。\n理由としては、 <strong>コード規約自体は簡単なのに、変なイディオムとか\nメソッドチェーンとかコールバック関数とか見慣れない使い方が多い</strong>\nみたいな感じやと思う。</p>\n<h5 id=\"つまり、結論\">つまり、結論</h5>\n<p>慣れが大事。</p>\n<h5 id=\"次回からはクライアントサイドの説明をしてくれるそうです！\">次回からはクライアントサイドの説明をしてくれるそうです！</h5>","ogImage":{"url":"/assets/blog/dynamic-routing/cover.jpg"},"coverImage":"/assets/blog/dynamic-routing/cover.jpg"}},"__N_SSG":true}